
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PersonScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  preferredName: 'preferredName',
  suffix: 'suffix',
  title: 'title',
  primaryEmail: 'primaryEmail',
  alternateEmail: 'alternateEmail',
  workPhone: 'workPhone',
  mobilePhone: 'mobilePhone',
  personalPhone: 'personalPhone',
  profileImageUrl: 'profileImageUrl',
  biography: 'biography',
  skills: 'skills',
  certifications: 'certifications',
  education: 'education',
  workLocation: 'workLocation',
  timeZone: 'timeZone',
  preferredLanguage: 'preferredLanguage',
  dateOfBirth: 'dateOfBirth',
  securityClearanceLevel: 'securityClearanceLevel',
  clearanceExpirationDate: 'clearanceExpirationDate',
  pivStatus: 'pivStatus',
  pivExpirationDate: 'pivExpirationDate',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  emergencyContactRelation: 'emergencyContactRelation',
  isActive: 'isActive',
  privacySettings: 'privacySettings',
  professionalSummary: 'professionalSummary',
  linkedInProfile: 'linkedInProfile',
  githubProfile: 'githubProfile',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archivedAt: 'archivedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  username: 'username',
  keycloakId: 'keycloakId',
  invitationStatus: 'invitationStatus',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  invitationToken: 'invitationToken',
  invitationExpiresAt: 'invitationExpiresAt',
  confirmationToken: 'confirmationToken',
  confirmationSentAt: 'confirmationSentAt',
  confirmedAt: 'confirmedAt',
  emailVerified: 'emailVerified',
  accountStatus: 'accountStatus',
  statusReason: 'statusReason',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  passwordChangedAt: 'passwordChangedAt',
  mustChangePassword: 'mustChangePassword',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorMethod: 'twoFactorMethod',
  backupCodes: 'backupCodes',
  sessionTimeout: 'sessionTimeout',
  allowedIpRanges: 'allowedIpRanges',
  deviceFingerprints: 'deviceFingerprints',
  securityNotifications: 'securityNotifications',
  apiKeyEnabled: 'apiKeyEnabled',
  apiKeyHash: 'apiKeyHash',
  apiKeyExpiresAt: 'apiKeyExpiresAt',
  roles: 'roles',
  permissions: 'permissions',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deactivatedAt: 'deactivatedAt',
  deactivatedBy: 'deactivatedBy'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbreviation: 'abbreviation',
  type: 'type',
  parentId: 'parentId',
  contactEmail: 'contactEmail',
  securityOfficerEmail: 'securityOfficerEmail',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonOrganizationAffiliationScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  organizationId: 'organizationId',
  jobTitle: 'jobTitle',
  department: 'department',
  employeeId: 'employeeId',
  workLocation: 'workLocation',
  managerId: 'managerId',
  affiliationType: 'affiliationType',
  employmentStatus: 'employmentStatus',
  securityClearanceRequired: 'securityClearanceRequired',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  isPrimary: 'isPrimary',
  payrollNumber: 'payrollNumber',
  costCenter: 'costCenter',
  workSchedule: 'workSchedule',
  compensationLevel: 'compensationLevel',
  benefitsEligible: 'benefitsEligible',
  contractType: 'contractType',
  contractNumber: 'contractNumber',
  billableHours: 'billableHours',
  accessLevel: 'accessLevel',
  facilities: 'facilities',
  equipment: 'equipment',
  notes: 'notes',
  separationReason: 'separationReason',
  separationNotes: 'separationNotes',
  isEligibleForRehire: 'isEligibleForRehire',
  exitInterviewCompleted: 'exitInterviewCompleted',
  exitInterviewDate: 'exitInterviewDate',
  finalWorkDate: 'finalWorkDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransitionUserScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  userId: 'userId',
  role: 'role',
  securityStatus: 'securityStatus',
  platformAccess: 'platformAccess',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  acceptedAt: 'acceptedAt',
  lastAccessAt: 'lastAccessAt',
  accessNotes: 'accessNotes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessOperationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  businessFunction: 'businessFunction',
  technicalDomain: 'technicalDomain',
  description: 'description',
  scope: 'scope',
  objectives: 'objectives',
  performanceMetrics: 'performanceMetrics',
  supportPeriodStart: 'supportPeriodStart',
  supportPeriodEnd: 'supportPeriodEnd',
  currentContractEnd: 'currentContractEnd',
  currentManagerId: 'currentManagerId',
  governmentPMId: 'governmentPMId',
  directorId: 'directorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OperationStakeholderScalarFieldEnum = {
  id: 'id',
  businessOperationId: 'businessOperationId',
  userId: 'userId',
  name: 'name',
  role: 'role',
  email: 'email',
  phone: 'phone',
  organization: 'organization',
  stakeholderType: 'stakeholderType',
  receiveNotifications: 'receiveNotifications',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  businessOperationId: 'businessOperationId',
  contractName: 'contractName',
  contractNumber: 'contractNumber',
  contractorName: 'contractorName',
  contractorPMId: 'contractorPMId',
  startDate: 'startDate',
  endDate: 'endDate',
  canBeExtended: 'canBeExtended',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransitionScalarFieldEnum = {
  id: 'id',
  contractName: 'contractName',
  contractNumber: 'contractNumber',
  contractId: 'contractId',
  organizationId: 'organizationId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  duration: 'duration',
  keyPersonnel: 'keyPersonnel',
  description: 'description',
  status: 'status',
  requiresContinuousService: 'requiresContinuousService',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  priority: 'priority',
  status: 'status',
  transitionId: 'transitionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  oldValues: 'oldValues',
  newValues: 'newValues',
  userId: 'userId',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SecurityClearanceLevel = exports.$Enums.SecurityClearanceLevel = {
  NONE: 'NONE',
  PUBLIC_TRUST: 'PUBLIC_TRUST',
  CONFIDENTIAL: 'CONFIDENTIAL',
  SECRET: 'SECRET',
  TOP_SECRET: 'TOP_SECRET',
  TS_SCI: 'TS_SCI'
};

exports.PIVStatus = exports.$Enums.PIVStatus = {
  PIV_VERIFIED: 'PIV_VERIFIED',
  PIV_EXCEPTION_PENDING: 'PIV_EXCEPTION_PENDING',
  PIV_EXCEPTION_INTERIM: 'PIV_EXCEPTION_INTERIM',
  PIV_EXPIRED: 'PIV_EXPIRED',
  PIV_SUSPENDED: 'PIV_SUSPENDED'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  NOT_INVITED: 'NOT_INVITED',
  INVITED: 'INVITED',
  INVITATION_SENT: 'INVITATION_SENT',
  INVITATION_EXPIRED: 'INVITATION_EXPIRED',
  INVITATION_ACCEPTED: 'INVITATION_ACCEPTED',
  INVITATION_DECLINED: 'INVITATION_DECLINED'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  LOCKED: 'LOCKED',
  EXPIRED: 'EXPIRED',
  DEACTIVATED: 'DEACTIVATED'
};

exports.TwoFactorMethod = exports.$Enums.TwoFactorMethod = {
  NONE: 'NONE',
  SMS: 'SMS',
  EMAIL: 'EMAIL',
  TOTP: 'TOTP',
  HARDWARE_TOKEN: 'HARDWARE_TOKEN',
  BIOMETRIC: 'BIOMETRIC'
};

exports.OrganizationType = exports.$Enums.OrganizationType = {
  GOVERNMENT_AGENCY: 'GOVERNMENT_AGENCY',
  PRIME_CONTRACTOR: 'PRIME_CONTRACTOR',
  SUBCONTRACTOR: 'SUBCONTRACTOR',
  VENDOR: 'VENDOR'
};

exports.AffiliationType = exports.$Enums.AffiliationType = {
  EMPLOYEE: 'EMPLOYEE',
  CONTRACTOR: 'CONTRACTOR',
  CONSULTANT: 'CONSULTANT',
  VENDOR: 'VENDOR',
  PARTNER: 'PARTNER',
  VOLUNTEER: 'VOLUNTEER',
  INTERN: 'INTERN'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  ACTIVE: 'ACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  TERMINATED: 'TERMINATED',
  RESIGNED: 'RESIGNED',
  RETIRED: 'RETIRED',
  CONTRACT_ENDED: 'CONTRACT_ENDED',
  TRANSFERRED: 'TRANSFERRED'
};

exports.ContractType = exports.$Enums.ContractType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  TEMPORARY: 'TEMPORARY',
  SEASONAL: 'SEASONAL',
  PROJECT_BASED: 'PROJECT_BASED'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  VISITOR: 'VISITOR',
  STANDARD: 'STANDARD',
  ELEVATED: 'ELEVATED',
  ADMINISTRATIVE: 'ADMINISTRATIVE',
  EXECUTIVE: 'EXECUTIVE'
};

exports.SeparationReason = exports.$Enums.SeparationReason = {
  VOLUNTARY_RESIGNATION: 'VOLUNTARY_RESIGNATION',
  INVOLUNTARY_TERMINATION: 'INVOLUNTARY_TERMINATION',
  END_OF_CONTRACT: 'END_OF_CONTRACT',
  RETIREMENT: 'RETIREMENT',
  TRANSFER: 'TRANSFER',
  LAYOFF: 'LAYOFF',
  PERFORMANCE: 'PERFORMANCE',
  MISCONDUCT: 'MISCONDUCT'
};

exports.TransitionRole = exports.$Enums.TransitionRole = {
  PROGRAM_MANAGER: 'PROGRAM_MANAGER',
  DEPARTING_CONTRACTOR: 'DEPARTING_CONTRACTOR',
  INCOMING_CONTRACTOR: 'INCOMING_CONTRACTOR',
  SECURITY_OFFICER: 'SECURITY_OFFICER',
  OBSERVER: 'OBSERVER'
};

exports.SecurityStatus = exports.$Enums.SecurityStatus = {
  PENDING: 'PENDING',
  IN_PROCESS: 'IN_PROCESS',
  INTERIM_CLEARED: 'INTERIM_CLEARED',
  CLEARED: 'CLEARED',
  DENIED: 'DENIED',
  REVOKED: 'REVOKED'
};

exports.PlatformAccess = exports.$Enums.PlatformAccess = {
  DISABLED: 'DISABLED',
  READ_ONLY: 'READ_ONLY',
  STANDARD: 'STANDARD',
  FULL_ACCESS: 'FULL_ACCESS'
};

exports.StakeholderType = exports.$Enums.StakeholderType = {
  INTERNAL_PROGRAM: 'INTERNAL_PROGRAM',
  INTERNAL_TECHNICAL: 'INTERNAL_TECHNICAL',
  INTERNAL_EXECUTIVE: 'INTERNAL_EXECUTIVE',
  EXTERNAL_VENDOR: 'EXTERNAL_VENDOR',
  EXTERNAL_SERVICE: 'EXTERNAL_SERVICE',
  EXTERNAL_SME_RESOURCE: 'EXTERNAL_SME_RESOURCE',
  INCOMING_CONTRACTOR: 'INCOMING_CONTRACTOR'
};

exports.ContractStatus = exports.$Enums.ContractStatus = {
  PLANNING: 'PLANNING',
  ACTIVE: 'ACTIVE',
  RENEWAL: 'RENEWAL',
  EXPIRING: 'EXPIRING',
  EXPIRED: 'EXPIRED',
  EXTENDED: 'EXTENDED'
};

exports.TransitionDuration = exports.$Enums.TransitionDuration = {
  IMMEDIATE: 'IMMEDIATE',
  THIRTY_DAYS: 'THIRTY_DAYS',
  FORTY_FIVE_DAYS: 'FORTY_FIVE_DAYS',
  SIXTY_DAYS: 'SIXTY_DAYS',
  NINETY_DAYS: 'NINETY_DAYS'
};

exports.TransitionStatus = exports.$Enums.TransitionStatus = {
  NOT_STARTED: 'NOT_STARTED',
  ON_TRACK: 'ON_TRACK',
  AT_RISK: 'AT_RISK',
  BLOCKED: 'BLOCKED',
  COMPLETED: 'COMPLETED'
};

exports.PriorityLevel = exports.$Enums.PriorityLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.MilestoneStatus = exports.$Enums.MilestoneStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  BLOCKED: 'BLOCKED',
  OVERDUE: 'OVERDUE'
};

exports.Prisma.ModelName = {
  Person: 'Person',
  User: 'User',
  Organization: 'Organization',
  PersonOrganizationAffiliation: 'PersonOrganizationAffiliation',
  TransitionUser: 'TransitionUser',
  BusinessOperation: 'BusinessOperation',
  OperationStakeholder: 'OperationStakeholder',
  Contract: 'Contract',
  Transition: 'Transition',
  Milestone: 'Milestone',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
