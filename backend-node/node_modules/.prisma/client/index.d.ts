
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model BusinessOperation
 * 
 */
export type BusinessOperation = $Result.DefaultSelection<Prisma.$BusinessOperationPayload>
/**
 * Model OperationStakeholder
 * 
 */
export type OperationStakeholder = $Result.DefaultSelection<Prisma.$OperationStakeholderPayload>
/**
 * Model Contract
 * 
 */
export type Contract = $Result.DefaultSelection<Prisma.$ContractPayload>
/**
 * Model Transition
 * 
 */
export type Transition = $Result.DefaultSelection<Prisma.$TransitionPayload>
/**
 * Model Milestone
 * 
 */
export type Milestone = $Result.DefaultSelection<Prisma.$MilestonePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TransitionStatus: {
  NOT_STARTED: 'NOT_STARTED',
  ON_TRACK: 'ON_TRACK',
  AT_RISK: 'AT_RISK',
  BLOCKED: 'BLOCKED',
  COMPLETED: 'COMPLETED'
};

export type TransitionStatus = (typeof TransitionStatus)[keyof typeof TransitionStatus]


export const ContractStatus: {
  PLANNING: 'PLANNING',
  ACTIVE: 'ACTIVE',
  RENEWAL: 'RENEWAL',
  EXPIRING: 'EXPIRING',
  EXPIRED: 'EXPIRED',
  EXTENDED: 'EXTENDED'
};

export type ContractStatus = (typeof ContractStatus)[keyof typeof ContractStatus]


export const StakeholderType: {
  INTERNAL_PROGRAM: 'INTERNAL_PROGRAM',
  INTERNAL_TECHNICAL: 'INTERNAL_TECHNICAL',
  INTERNAL_EXECUTIVE: 'INTERNAL_EXECUTIVE',
  EXTERNAL_VENDOR: 'EXTERNAL_VENDOR',
  EXTERNAL_SERVICE: 'EXTERNAL_SERVICE',
  EXTERNAL_SME_RESOURCE: 'EXTERNAL_SME_RESOURCE',
  INCOMING_CONTRACTOR: 'INCOMING_CONTRACTOR'
};

export type StakeholderType = (typeof StakeholderType)[keyof typeof StakeholderType]


export const TransitionDuration: {
  IMMEDIATE: 'IMMEDIATE',
  THIRTY_DAYS: 'THIRTY_DAYS',
  FORTY_FIVE_DAYS: 'FORTY_FIVE_DAYS',
  SIXTY_DAYS: 'SIXTY_DAYS',
  NINETY_DAYS: 'NINETY_DAYS'
};

export type TransitionDuration = (typeof TransitionDuration)[keyof typeof TransitionDuration]


export const MilestoneStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  BLOCKED: 'BLOCKED',
  OVERDUE: 'OVERDUE'
};

export type MilestoneStatus = (typeof MilestoneStatus)[keyof typeof MilestoneStatus]


export const PriorityLevel: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type PriorityLevel = (typeof PriorityLevel)[keyof typeof PriorityLevel]

}

export type TransitionStatus = $Enums.TransitionStatus

export const TransitionStatus: typeof $Enums.TransitionStatus

export type ContractStatus = $Enums.ContractStatus

export const ContractStatus: typeof $Enums.ContractStatus

export type StakeholderType = $Enums.StakeholderType

export const StakeholderType: typeof $Enums.StakeholderType

export type TransitionDuration = $Enums.TransitionDuration

export const TransitionDuration: typeof $Enums.TransitionDuration

export type MilestoneStatus = $Enums.MilestoneStatus

export const MilestoneStatus: typeof $Enums.MilestoneStatus

export type PriorityLevel = $Enums.PriorityLevel

export const PriorityLevel: typeof $Enums.PriorityLevel

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.businessOperation`: Exposes CRUD operations for the **BusinessOperation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessOperations
    * const businessOperations = await prisma.businessOperation.findMany()
    * ```
    */
  get businessOperation(): Prisma.BusinessOperationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operationStakeholder`: Exposes CRUD operations for the **OperationStakeholder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OperationStakeholders
    * const operationStakeholders = await prisma.operationStakeholder.findMany()
    * ```
    */
  get operationStakeholder(): Prisma.OperationStakeholderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transition`: Exposes CRUD operations for the **Transition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transitions
    * const transitions = await prisma.transition.findMany()
    * ```
    */
  get transition(): Prisma.TransitionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.milestone`: Exposes CRUD operations for the **Milestone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Milestones
    * const milestones = await prisma.milestone.findMany()
    * ```
    */
  get milestone(): Prisma.MilestoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    BusinessOperation: 'BusinessOperation',
    OperationStakeholder: 'OperationStakeholder',
    Contract: 'Contract',
    Transition: 'Transition',
    Milestone: 'Milestone',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "businessOperation" | "operationStakeholder" | "contract" | "transition" | "milestone" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      BusinessOperation: {
        payload: Prisma.$BusinessOperationPayload<ExtArgs>
        fields: Prisma.BusinessOperationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessOperationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessOperationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>
          }
          findFirst: {
            args: Prisma.BusinessOperationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessOperationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>
          }
          findMany: {
            args: Prisma.BusinessOperationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>[]
          }
          create: {
            args: Prisma.BusinessOperationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>
          }
          createMany: {
            args: Prisma.BusinessOperationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessOperationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>[]
          }
          delete: {
            args: Prisma.BusinessOperationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>
          }
          update: {
            args: Prisma.BusinessOperationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>
          }
          deleteMany: {
            args: Prisma.BusinessOperationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessOperationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusinessOperationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>[]
          }
          upsert: {
            args: Prisma.BusinessOperationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessOperationPayload>
          }
          aggregate: {
            args: Prisma.BusinessOperationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusinessOperation>
          }
          groupBy: {
            args: Prisma.BusinessOperationGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessOperationGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessOperationCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessOperationCountAggregateOutputType> | number
          }
        }
      }
      OperationStakeholder: {
        payload: Prisma.$OperationStakeholderPayload<ExtArgs>
        fields: Prisma.OperationStakeholderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperationStakeholderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperationStakeholderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>
          }
          findFirst: {
            args: Prisma.OperationStakeholderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperationStakeholderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>
          }
          findMany: {
            args: Prisma.OperationStakeholderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>[]
          }
          create: {
            args: Prisma.OperationStakeholderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>
          }
          createMany: {
            args: Prisma.OperationStakeholderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperationStakeholderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>[]
          }
          delete: {
            args: Prisma.OperationStakeholderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>
          }
          update: {
            args: Prisma.OperationStakeholderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>
          }
          deleteMany: {
            args: Prisma.OperationStakeholderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperationStakeholderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperationStakeholderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>[]
          }
          upsert: {
            args: Prisma.OperationStakeholderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationStakeholderPayload>
          }
          aggregate: {
            args: Prisma.OperationStakeholderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperationStakeholder>
          }
          groupBy: {
            args: Prisma.OperationStakeholderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperationStakeholderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperationStakeholderCountArgs<ExtArgs>
            result: $Utils.Optional<OperationStakeholderCountAggregateOutputType> | number
          }
        }
      }
      Contract: {
        payload: Prisma.$ContractPayload<ExtArgs>
        fields: Prisma.ContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findFirst: {
            args: Prisma.ContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findMany: {
            args: Prisma.ContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          create: {
            args: Prisma.ContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          createMany: {
            args: Prisma.ContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          delete: {
            args: Prisma.ContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          update: {
            args: Prisma.ContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          deleteMany: {
            args: Prisma.ContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          upsert: {
            args: Prisma.ContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          aggregate: {
            args: Prisma.ContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContract>
          }
          groupBy: {
            args: Prisma.ContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractCountArgs<ExtArgs>
            result: $Utils.Optional<ContractCountAggregateOutputType> | number
          }
        }
      }
      Transition: {
        payload: Prisma.$TransitionPayload<ExtArgs>
        fields: Prisma.TransitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransitionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransitionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>
          }
          findFirst: {
            args: Prisma.TransitionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransitionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>
          }
          findMany: {
            args: Prisma.TransitionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>[]
          }
          create: {
            args: Prisma.TransitionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>
          }
          createMany: {
            args: Prisma.TransitionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransitionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>[]
          }
          delete: {
            args: Prisma.TransitionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>
          }
          update: {
            args: Prisma.TransitionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>
          }
          deleteMany: {
            args: Prisma.TransitionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransitionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransitionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>[]
          }
          upsert: {
            args: Prisma.TransitionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransitionPayload>
          }
          aggregate: {
            args: Prisma.TransitionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransition>
          }
          groupBy: {
            args: Prisma.TransitionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransitionCountArgs<ExtArgs>
            result: $Utils.Optional<TransitionCountAggregateOutputType> | number
          }
        }
      }
      Milestone: {
        payload: Prisma.$MilestonePayload<ExtArgs>
        fields: Prisma.MilestoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MilestoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MilestoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          findFirst: {
            args: Prisma.MilestoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MilestoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          findMany: {
            args: Prisma.MilestoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          create: {
            args: Prisma.MilestoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          createMany: {
            args: Prisma.MilestoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MilestoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          delete: {
            args: Prisma.MilestoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          update: {
            args: Prisma.MilestoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          deleteMany: {
            args: Prisma.MilestoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MilestoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MilestoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          upsert: {
            args: Prisma.MilestoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          aggregate: {
            args: Prisma.MilestoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMilestone>
          }
          groupBy: {
            args: Prisma.MilestoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<MilestoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.MilestoneCountArgs<ExtArgs>
            result: $Utils.Optional<MilestoneCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    businessOperation?: BusinessOperationOmit
    operationStakeholder?: OperationStakeholderOmit
    contract?: ContractOmit
    transition?: TransitionOmit
    milestone?: MilestoneOmit
    auditLog?: AuditLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdTransitions: number
    managedOperations: number
    assignedOperations: number
    directedOperations: number
    contractorPMContracts: number
    stakeholderOperations: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdTransitions?: boolean | UserCountOutputTypeCountCreatedTransitionsArgs
    managedOperations?: boolean | UserCountOutputTypeCountManagedOperationsArgs
    assignedOperations?: boolean | UserCountOutputTypeCountAssignedOperationsArgs
    directedOperations?: boolean | UserCountOutputTypeCountDirectedOperationsArgs
    contractorPMContracts?: boolean | UserCountOutputTypeCountContractorPMContractsArgs
    stakeholderOperations?: boolean | UserCountOutputTypeCountStakeholderOperationsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTransitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransitionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManagedOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessOperationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessOperationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDirectedOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessOperationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContractorPMContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStakeholderOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationStakeholderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type BusinessOperationCountOutputType
   */

  export type BusinessOperationCountOutputType = {
    contracts: number
    stakeholders: number
    auditLogs: number
  }

  export type BusinessOperationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | BusinessOperationCountOutputTypeCountContractsArgs
    stakeholders?: boolean | BusinessOperationCountOutputTypeCountStakeholdersArgs
    auditLogs?: boolean | BusinessOperationCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * BusinessOperationCountOutputType without action
   */
  export type BusinessOperationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperationCountOutputType
     */
    select?: BusinessOperationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BusinessOperationCountOutputType without action
   */
  export type BusinessOperationCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * BusinessOperationCountOutputType without action
   */
  export type BusinessOperationCountOutputTypeCountStakeholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationStakeholderWhereInput
  }

  /**
   * BusinessOperationCountOutputType without action
   */
  export type BusinessOperationCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type ContractCountOutputType
   */

  export type ContractCountOutputType = {
    transitions: number
    auditLogs: number
  }

  export type ContractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transitions?: boolean | ContractCountOutputTypeCountTransitionsArgs
    auditLogs?: boolean | ContractCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractCountOutputType
     */
    select?: ContractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountTransitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransitionWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type TransitionCountOutputType
   */

  export type TransitionCountOutputType = {
    milestones: number
    auditLogs: number
  }

  export type TransitionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    milestones?: boolean | TransitionCountOutputTypeCountMilestonesArgs
    auditLogs?: boolean | TransitionCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * TransitionCountOutputType without action
   */
  export type TransitionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransitionCountOutputType
     */
    select?: TransitionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransitionCountOutputType without action
   */
  export type TransitionCountOutputTypeCountMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
  }

  /**
   * TransitionCountOutputType without action
   */
  export type TransitionCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type MilestoneCountOutputType
   */

  export type MilestoneCountOutputType = {
    auditLogs: number
  }

  export type MilestoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | MilestoneCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * MilestoneCountOutputType without action
   */
  export type MilestoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilestoneCountOutputType
     */
    select?: MilestoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MilestoneCountOutputType without action
   */
  export type MilestoneCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdTransitions?: boolean | User$createdTransitionsArgs<ExtArgs>
    managedOperations?: boolean | User$managedOperationsArgs<ExtArgs>
    assignedOperations?: boolean | User$assignedOperationsArgs<ExtArgs>
    directedOperations?: boolean | User$directedOperationsArgs<ExtArgs>
    contractorPMContracts?: boolean | User$contractorPMContractsArgs<ExtArgs>
    stakeholderOperations?: boolean | User$stakeholderOperationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdTransitions?: boolean | User$createdTransitionsArgs<ExtArgs>
    managedOperations?: boolean | User$managedOperationsArgs<ExtArgs>
    assignedOperations?: boolean | User$assignedOperationsArgs<ExtArgs>
    directedOperations?: boolean | User$directedOperationsArgs<ExtArgs>
    contractorPMContracts?: boolean | User$contractorPMContractsArgs<ExtArgs>
    stakeholderOperations?: boolean | User$stakeholderOperationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdTransitions: Prisma.$TransitionPayload<ExtArgs>[]
      managedOperations: Prisma.$BusinessOperationPayload<ExtArgs>[]
      assignedOperations: Prisma.$BusinessOperationPayload<ExtArgs>[]
      directedOperations: Prisma.$BusinessOperationPayload<ExtArgs>[]
      contractorPMContracts: Prisma.$ContractPayload<ExtArgs>[]
      stakeholderOperations: Prisma.$OperationStakeholderPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string
      lastName: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdTransitions<T extends User$createdTransitionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTransitionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedOperations<T extends User$managedOperationsArgs<ExtArgs> = {}>(args?: Subset<T, User$managedOperationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedOperations<T extends User$assignedOperationsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedOperationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    directedOperations<T extends User$directedOperationsArgs<ExtArgs> = {}>(args?: Subset<T, User$directedOperationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contractorPMContracts<T extends User$contractorPMContractsArgs<ExtArgs> = {}>(args?: Subset<T, User$contractorPMContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stakeholderOperations<T extends User$stakeholderOperationsArgs<ExtArgs> = {}>(args?: Subset<T, User$stakeholderOperationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.createdTransitions
   */
  export type User$createdTransitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    where?: TransitionWhereInput
    orderBy?: TransitionOrderByWithRelationInput | TransitionOrderByWithRelationInput[]
    cursor?: TransitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransitionScalarFieldEnum | TransitionScalarFieldEnum[]
  }

  /**
   * User.managedOperations
   */
  export type User$managedOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    where?: BusinessOperationWhereInput
    orderBy?: BusinessOperationOrderByWithRelationInput | BusinessOperationOrderByWithRelationInput[]
    cursor?: BusinessOperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessOperationScalarFieldEnum | BusinessOperationScalarFieldEnum[]
  }

  /**
   * User.assignedOperations
   */
  export type User$assignedOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    where?: BusinessOperationWhereInput
    orderBy?: BusinessOperationOrderByWithRelationInput | BusinessOperationOrderByWithRelationInput[]
    cursor?: BusinessOperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessOperationScalarFieldEnum | BusinessOperationScalarFieldEnum[]
  }

  /**
   * User.directedOperations
   */
  export type User$directedOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    where?: BusinessOperationWhereInput
    orderBy?: BusinessOperationOrderByWithRelationInput | BusinessOperationOrderByWithRelationInput[]
    cursor?: BusinessOperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessOperationScalarFieldEnum | BusinessOperationScalarFieldEnum[]
  }

  /**
   * User.contractorPMContracts
   */
  export type User$contractorPMContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * User.stakeholderOperations
   */
  export type User$stakeholderOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    where?: OperationStakeholderWhereInput
    orderBy?: OperationStakeholderOrderByWithRelationInput | OperationStakeholderOrderByWithRelationInput[]
    cursor?: OperationStakeholderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperationStakeholderScalarFieldEnum | OperationStakeholderScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model BusinessOperation
   */

  export type AggregateBusinessOperation = {
    _count: BusinessOperationCountAggregateOutputType | null
    _min: BusinessOperationMinAggregateOutputType | null
    _max: BusinessOperationMaxAggregateOutputType | null
  }

  export type BusinessOperationMinAggregateOutputType = {
    id: string | null
    name: string | null
    businessFunction: string | null
    technicalDomain: string | null
    description: string | null
    scope: string | null
    objectives: string | null
    supportPeriodStart: Date | null
    supportPeriodEnd: Date | null
    currentContractEnd: Date | null
    currentManagerId: string | null
    governmentPMId: string | null
    directorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BusinessOperationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    businessFunction: string | null
    technicalDomain: string | null
    description: string | null
    scope: string | null
    objectives: string | null
    supportPeriodStart: Date | null
    supportPeriodEnd: Date | null
    currentContractEnd: Date | null
    currentManagerId: string | null
    governmentPMId: string | null
    directorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BusinessOperationCountAggregateOutputType = {
    id: number
    name: number
    businessFunction: number
    technicalDomain: number
    description: number
    scope: number
    objectives: number
    performanceMetrics: number
    supportPeriodStart: number
    supportPeriodEnd: number
    currentContractEnd: number
    currentManagerId: number
    governmentPMId: number
    directorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BusinessOperationMinAggregateInputType = {
    id?: true
    name?: true
    businessFunction?: true
    technicalDomain?: true
    description?: true
    scope?: true
    objectives?: true
    supportPeriodStart?: true
    supportPeriodEnd?: true
    currentContractEnd?: true
    currentManagerId?: true
    governmentPMId?: true
    directorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BusinessOperationMaxAggregateInputType = {
    id?: true
    name?: true
    businessFunction?: true
    technicalDomain?: true
    description?: true
    scope?: true
    objectives?: true
    supportPeriodStart?: true
    supportPeriodEnd?: true
    currentContractEnd?: true
    currentManagerId?: true
    governmentPMId?: true
    directorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BusinessOperationCountAggregateInputType = {
    id?: true
    name?: true
    businessFunction?: true
    technicalDomain?: true
    description?: true
    scope?: true
    objectives?: true
    performanceMetrics?: true
    supportPeriodStart?: true
    supportPeriodEnd?: true
    currentContractEnd?: true
    currentManagerId?: true
    governmentPMId?: true
    directorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BusinessOperationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessOperation to aggregate.
     */
    where?: BusinessOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessOperations to fetch.
     */
    orderBy?: BusinessOperationOrderByWithRelationInput | BusinessOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessOperations
    **/
    _count?: true | BusinessOperationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessOperationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessOperationMaxAggregateInputType
  }

  export type GetBusinessOperationAggregateType<T extends BusinessOperationAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessOperation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessOperation[P]>
      : GetScalarType<T[P], AggregateBusinessOperation[P]>
  }




  export type BusinessOperationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessOperationWhereInput
    orderBy?: BusinessOperationOrderByWithAggregationInput | BusinessOperationOrderByWithAggregationInput[]
    by: BusinessOperationScalarFieldEnum[] | BusinessOperationScalarFieldEnum
    having?: BusinessOperationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessOperationCountAggregateInputType | true
    _min?: BusinessOperationMinAggregateInputType
    _max?: BusinessOperationMaxAggregateInputType
  }

  export type BusinessOperationGroupByOutputType = {
    id: string
    name: string
    businessFunction: string
    technicalDomain: string
    description: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonValue
    supportPeriodStart: Date
    supportPeriodEnd: Date
    currentContractEnd: Date
    currentManagerId: string | null
    governmentPMId: string
    directorId: string
    createdAt: Date
    updatedAt: Date
    _count: BusinessOperationCountAggregateOutputType | null
    _min: BusinessOperationMinAggregateOutputType | null
    _max: BusinessOperationMaxAggregateOutputType | null
  }

  type GetBusinessOperationGroupByPayload<T extends BusinessOperationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessOperationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessOperationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessOperationGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessOperationGroupByOutputType[P]>
        }
      >
    >


  export type BusinessOperationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    businessFunction?: boolean
    technicalDomain?: boolean
    description?: boolean
    scope?: boolean
    objectives?: boolean
    performanceMetrics?: boolean
    supportPeriodStart?: boolean
    supportPeriodEnd?: boolean
    currentContractEnd?: boolean
    currentManagerId?: boolean
    governmentPMId?: boolean
    directorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentManager?: boolean | BusinessOperation$currentManagerArgs<ExtArgs>
    governmentPM?: boolean | UserDefaultArgs<ExtArgs>
    director?: boolean | UserDefaultArgs<ExtArgs>
    contracts?: boolean | BusinessOperation$contractsArgs<ExtArgs>
    stakeholders?: boolean | BusinessOperation$stakeholdersArgs<ExtArgs>
    auditLogs?: boolean | BusinessOperation$auditLogsArgs<ExtArgs>
    _count?: boolean | BusinessOperationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessOperation"]>

  export type BusinessOperationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    businessFunction?: boolean
    technicalDomain?: boolean
    description?: boolean
    scope?: boolean
    objectives?: boolean
    performanceMetrics?: boolean
    supportPeriodStart?: boolean
    supportPeriodEnd?: boolean
    currentContractEnd?: boolean
    currentManagerId?: boolean
    governmentPMId?: boolean
    directorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentManager?: boolean | BusinessOperation$currentManagerArgs<ExtArgs>
    governmentPM?: boolean | UserDefaultArgs<ExtArgs>
    director?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessOperation"]>

  export type BusinessOperationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    businessFunction?: boolean
    technicalDomain?: boolean
    description?: boolean
    scope?: boolean
    objectives?: boolean
    performanceMetrics?: boolean
    supportPeriodStart?: boolean
    supportPeriodEnd?: boolean
    currentContractEnd?: boolean
    currentManagerId?: boolean
    governmentPMId?: boolean
    directorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentManager?: boolean | BusinessOperation$currentManagerArgs<ExtArgs>
    governmentPM?: boolean | UserDefaultArgs<ExtArgs>
    director?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessOperation"]>

  export type BusinessOperationSelectScalar = {
    id?: boolean
    name?: boolean
    businessFunction?: boolean
    technicalDomain?: boolean
    description?: boolean
    scope?: boolean
    objectives?: boolean
    performanceMetrics?: boolean
    supportPeriodStart?: boolean
    supportPeriodEnd?: boolean
    currentContractEnd?: boolean
    currentManagerId?: boolean
    governmentPMId?: boolean
    directorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BusinessOperationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "businessFunction" | "technicalDomain" | "description" | "scope" | "objectives" | "performanceMetrics" | "supportPeriodStart" | "supportPeriodEnd" | "currentContractEnd" | "currentManagerId" | "governmentPMId" | "directorId" | "createdAt" | "updatedAt", ExtArgs["result"]["businessOperation"]>
  export type BusinessOperationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentManager?: boolean | BusinessOperation$currentManagerArgs<ExtArgs>
    governmentPM?: boolean | UserDefaultArgs<ExtArgs>
    director?: boolean | UserDefaultArgs<ExtArgs>
    contracts?: boolean | BusinessOperation$contractsArgs<ExtArgs>
    stakeholders?: boolean | BusinessOperation$stakeholdersArgs<ExtArgs>
    auditLogs?: boolean | BusinessOperation$auditLogsArgs<ExtArgs>
    _count?: boolean | BusinessOperationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BusinessOperationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentManager?: boolean | BusinessOperation$currentManagerArgs<ExtArgs>
    governmentPM?: boolean | UserDefaultArgs<ExtArgs>
    director?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BusinessOperationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentManager?: boolean | BusinessOperation$currentManagerArgs<ExtArgs>
    governmentPM?: boolean | UserDefaultArgs<ExtArgs>
    director?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BusinessOperationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessOperation"
    objects: {
      currentManager: Prisma.$UserPayload<ExtArgs> | null
      governmentPM: Prisma.$UserPayload<ExtArgs>
      director: Prisma.$UserPayload<ExtArgs>
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      stakeholders: Prisma.$OperationStakeholderPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      businessFunction: string
      technicalDomain: string
      description: string | null
      scope: string
      objectives: string
      performanceMetrics: Prisma.JsonValue
      supportPeriodStart: Date
      supportPeriodEnd: Date
      currentContractEnd: Date
      currentManagerId: string | null
      governmentPMId: string
      directorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["businessOperation"]>
    composites: {}
  }

  type BusinessOperationGetPayload<S extends boolean | null | undefined | BusinessOperationDefaultArgs> = $Result.GetResult<Prisma.$BusinessOperationPayload, S>

  type BusinessOperationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusinessOperationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusinessOperationCountAggregateInputType | true
    }

  export interface BusinessOperationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessOperation'], meta: { name: 'BusinessOperation' } }
    /**
     * Find zero or one BusinessOperation that matches the filter.
     * @param {BusinessOperationFindUniqueArgs} args - Arguments to find a BusinessOperation
     * @example
     * // Get one BusinessOperation
     * const businessOperation = await prisma.businessOperation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessOperationFindUniqueArgs>(args: SelectSubset<T, BusinessOperationFindUniqueArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BusinessOperation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessOperationFindUniqueOrThrowArgs} args - Arguments to find a BusinessOperation
     * @example
     * // Get one BusinessOperation
     * const businessOperation = await prisma.businessOperation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessOperationFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessOperationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessOperation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessOperationFindFirstArgs} args - Arguments to find a BusinessOperation
     * @example
     * // Get one BusinessOperation
     * const businessOperation = await prisma.businessOperation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessOperationFindFirstArgs>(args?: SelectSubset<T, BusinessOperationFindFirstArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessOperation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessOperationFindFirstOrThrowArgs} args - Arguments to find a BusinessOperation
     * @example
     * // Get one BusinessOperation
     * const businessOperation = await prisma.businessOperation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessOperationFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessOperationFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BusinessOperations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessOperationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessOperations
     * const businessOperations = await prisma.businessOperation.findMany()
     * 
     * // Get first 10 BusinessOperations
     * const businessOperations = await prisma.businessOperation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessOperationWithIdOnly = await prisma.businessOperation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessOperationFindManyArgs>(args?: SelectSubset<T, BusinessOperationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BusinessOperation.
     * @param {BusinessOperationCreateArgs} args - Arguments to create a BusinessOperation.
     * @example
     * // Create one BusinessOperation
     * const BusinessOperation = await prisma.businessOperation.create({
     *   data: {
     *     // ... data to create a BusinessOperation
     *   }
     * })
     * 
     */
    create<T extends BusinessOperationCreateArgs>(args: SelectSubset<T, BusinessOperationCreateArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BusinessOperations.
     * @param {BusinessOperationCreateManyArgs} args - Arguments to create many BusinessOperations.
     * @example
     * // Create many BusinessOperations
     * const businessOperation = await prisma.businessOperation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessOperationCreateManyArgs>(args?: SelectSubset<T, BusinessOperationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessOperations and returns the data saved in the database.
     * @param {BusinessOperationCreateManyAndReturnArgs} args - Arguments to create many BusinessOperations.
     * @example
     * // Create many BusinessOperations
     * const businessOperation = await prisma.businessOperation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessOperations and only return the `id`
     * const businessOperationWithIdOnly = await prisma.businessOperation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessOperationCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessOperationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BusinessOperation.
     * @param {BusinessOperationDeleteArgs} args - Arguments to delete one BusinessOperation.
     * @example
     * // Delete one BusinessOperation
     * const BusinessOperation = await prisma.businessOperation.delete({
     *   where: {
     *     // ... filter to delete one BusinessOperation
     *   }
     * })
     * 
     */
    delete<T extends BusinessOperationDeleteArgs>(args: SelectSubset<T, BusinessOperationDeleteArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BusinessOperation.
     * @param {BusinessOperationUpdateArgs} args - Arguments to update one BusinessOperation.
     * @example
     * // Update one BusinessOperation
     * const businessOperation = await prisma.businessOperation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessOperationUpdateArgs>(args: SelectSubset<T, BusinessOperationUpdateArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BusinessOperations.
     * @param {BusinessOperationDeleteManyArgs} args - Arguments to filter BusinessOperations to delete.
     * @example
     * // Delete a few BusinessOperations
     * const { count } = await prisma.businessOperation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessOperationDeleteManyArgs>(args?: SelectSubset<T, BusinessOperationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessOperations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessOperationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessOperations
     * const businessOperation = await prisma.businessOperation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessOperationUpdateManyArgs>(args: SelectSubset<T, BusinessOperationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessOperations and returns the data updated in the database.
     * @param {BusinessOperationUpdateManyAndReturnArgs} args - Arguments to update many BusinessOperations.
     * @example
     * // Update many BusinessOperations
     * const businessOperation = await prisma.businessOperation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BusinessOperations and only return the `id`
     * const businessOperationWithIdOnly = await prisma.businessOperation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusinessOperationUpdateManyAndReturnArgs>(args: SelectSubset<T, BusinessOperationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BusinessOperation.
     * @param {BusinessOperationUpsertArgs} args - Arguments to update or create a BusinessOperation.
     * @example
     * // Update or create a BusinessOperation
     * const businessOperation = await prisma.businessOperation.upsert({
     *   create: {
     *     // ... data to create a BusinessOperation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessOperation we want to update
     *   }
     * })
     */
    upsert<T extends BusinessOperationUpsertArgs>(args: SelectSubset<T, BusinessOperationUpsertArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BusinessOperations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessOperationCountArgs} args - Arguments to filter BusinessOperations to count.
     * @example
     * // Count the number of BusinessOperations
     * const count = await prisma.businessOperation.count({
     *   where: {
     *     // ... the filter for the BusinessOperations we want to count
     *   }
     * })
    **/
    count<T extends BusinessOperationCountArgs>(
      args?: Subset<T, BusinessOperationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessOperationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessOperation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessOperationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessOperationAggregateArgs>(args: Subset<T, BusinessOperationAggregateArgs>): Prisma.PrismaPromise<GetBusinessOperationAggregateType<T>>

    /**
     * Group by BusinessOperation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessOperationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessOperationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessOperationGroupByArgs['orderBy'] }
        : { orderBy?: BusinessOperationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessOperationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessOperationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessOperation model
   */
  readonly fields: BusinessOperationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessOperation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessOperationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    currentManager<T extends BusinessOperation$currentManagerArgs<ExtArgs> = {}>(args?: Subset<T, BusinessOperation$currentManagerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    governmentPM<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    director<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contracts<T extends BusinessOperation$contractsArgs<ExtArgs> = {}>(args?: Subset<T, BusinessOperation$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stakeholders<T extends BusinessOperation$stakeholdersArgs<ExtArgs> = {}>(args?: Subset<T, BusinessOperation$stakeholdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends BusinessOperation$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, BusinessOperation$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusinessOperation model
   */
  interface BusinessOperationFieldRefs {
    readonly id: FieldRef<"BusinessOperation", 'String'>
    readonly name: FieldRef<"BusinessOperation", 'String'>
    readonly businessFunction: FieldRef<"BusinessOperation", 'String'>
    readonly technicalDomain: FieldRef<"BusinessOperation", 'String'>
    readonly description: FieldRef<"BusinessOperation", 'String'>
    readonly scope: FieldRef<"BusinessOperation", 'String'>
    readonly objectives: FieldRef<"BusinessOperation", 'String'>
    readonly performanceMetrics: FieldRef<"BusinessOperation", 'Json'>
    readonly supportPeriodStart: FieldRef<"BusinessOperation", 'DateTime'>
    readonly supportPeriodEnd: FieldRef<"BusinessOperation", 'DateTime'>
    readonly currentContractEnd: FieldRef<"BusinessOperation", 'DateTime'>
    readonly currentManagerId: FieldRef<"BusinessOperation", 'String'>
    readonly governmentPMId: FieldRef<"BusinessOperation", 'String'>
    readonly directorId: FieldRef<"BusinessOperation", 'String'>
    readonly createdAt: FieldRef<"BusinessOperation", 'DateTime'>
    readonly updatedAt: FieldRef<"BusinessOperation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BusinessOperation findUnique
   */
  export type BusinessOperationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessOperation to fetch.
     */
    where: BusinessOperationWhereUniqueInput
  }

  /**
   * BusinessOperation findUniqueOrThrow
   */
  export type BusinessOperationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessOperation to fetch.
     */
    where: BusinessOperationWhereUniqueInput
  }

  /**
   * BusinessOperation findFirst
   */
  export type BusinessOperationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessOperation to fetch.
     */
    where?: BusinessOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessOperations to fetch.
     */
    orderBy?: BusinessOperationOrderByWithRelationInput | BusinessOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessOperations.
     */
    cursor?: BusinessOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessOperations.
     */
    distinct?: BusinessOperationScalarFieldEnum | BusinessOperationScalarFieldEnum[]
  }

  /**
   * BusinessOperation findFirstOrThrow
   */
  export type BusinessOperationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessOperation to fetch.
     */
    where?: BusinessOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessOperations to fetch.
     */
    orderBy?: BusinessOperationOrderByWithRelationInput | BusinessOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessOperations.
     */
    cursor?: BusinessOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessOperations.
     */
    distinct?: BusinessOperationScalarFieldEnum | BusinessOperationScalarFieldEnum[]
  }

  /**
   * BusinessOperation findMany
   */
  export type BusinessOperationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessOperations to fetch.
     */
    where?: BusinessOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessOperations to fetch.
     */
    orderBy?: BusinessOperationOrderByWithRelationInput | BusinessOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessOperations.
     */
    cursor?: BusinessOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessOperations.
     */
    skip?: number
    distinct?: BusinessOperationScalarFieldEnum | BusinessOperationScalarFieldEnum[]
  }

  /**
   * BusinessOperation create
   */
  export type BusinessOperationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessOperation.
     */
    data: XOR<BusinessOperationCreateInput, BusinessOperationUncheckedCreateInput>
  }

  /**
   * BusinessOperation createMany
   */
  export type BusinessOperationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessOperations.
     */
    data: BusinessOperationCreateManyInput | BusinessOperationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusinessOperation createManyAndReturn
   */
  export type BusinessOperationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * The data used to create many BusinessOperations.
     */
    data: BusinessOperationCreateManyInput | BusinessOperationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessOperation update
   */
  export type BusinessOperationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessOperation.
     */
    data: XOR<BusinessOperationUpdateInput, BusinessOperationUncheckedUpdateInput>
    /**
     * Choose, which BusinessOperation to update.
     */
    where: BusinessOperationWhereUniqueInput
  }

  /**
   * BusinessOperation updateMany
   */
  export type BusinessOperationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessOperations.
     */
    data: XOR<BusinessOperationUpdateManyMutationInput, BusinessOperationUncheckedUpdateManyInput>
    /**
     * Filter which BusinessOperations to update
     */
    where?: BusinessOperationWhereInput
    /**
     * Limit how many BusinessOperations to update.
     */
    limit?: number
  }

  /**
   * BusinessOperation updateManyAndReturn
   */
  export type BusinessOperationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * The data used to update BusinessOperations.
     */
    data: XOR<BusinessOperationUpdateManyMutationInput, BusinessOperationUncheckedUpdateManyInput>
    /**
     * Filter which BusinessOperations to update
     */
    where?: BusinessOperationWhereInput
    /**
     * Limit how many BusinessOperations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessOperation upsert
   */
  export type BusinessOperationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessOperation to update in case it exists.
     */
    where: BusinessOperationWhereUniqueInput
    /**
     * In case the BusinessOperation found by the `where` argument doesn't exist, create a new BusinessOperation with this data.
     */
    create: XOR<BusinessOperationCreateInput, BusinessOperationUncheckedCreateInput>
    /**
     * In case the BusinessOperation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessOperationUpdateInput, BusinessOperationUncheckedUpdateInput>
  }

  /**
   * BusinessOperation delete
   */
  export type BusinessOperationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    /**
     * Filter which BusinessOperation to delete.
     */
    where: BusinessOperationWhereUniqueInput
  }

  /**
   * BusinessOperation deleteMany
   */
  export type BusinessOperationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessOperations to delete
     */
    where?: BusinessOperationWhereInput
    /**
     * Limit how many BusinessOperations to delete.
     */
    limit?: number
  }

  /**
   * BusinessOperation.currentManager
   */
  export type BusinessOperation$currentManagerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * BusinessOperation.contracts
   */
  export type BusinessOperation$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * BusinessOperation.stakeholders
   */
  export type BusinessOperation$stakeholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    where?: OperationStakeholderWhereInput
    orderBy?: OperationStakeholderOrderByWithRelationInput | OperationStakeholderOrderByWithRelationInput[]
    cursor?: OperationStakeholderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperationStakeholderScalarFieldEnum | OperationStakeholderScalarFieldEnum[]
  }

  /**
   * BusinessOperation.auditLogs
   */
  export type BusinessOperation$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * BusinessOperation without action
   */
  export type BusinessOperationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
  }


  /**
   * Model OperationStakeholder
   */

  export type AggregateOperationStakeholder = {
    _count: OperationStakeholderCountAggregateOutputType | null
    _min: OperationStakeholderMinAggregateOutputType | null
    _max: OperationStakeholderMaxAggregateOutputType | null
  }

  export type OperationStakeholderMinAggregateOutputType = {
    id: string | null
    businessOperationId: string | null
    userId: string | null
    name: string | null
    role: string | null
    email: string | null
    phone: string | null
    organization: string | null
    stakeholderType: $Enums.StakeholderType | null
    receiveNotifications: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperationStakeholderMaxAggregateOutputType = {
    id: string | null
    businessOperationId: string | null
    userId: string | null
    name: string | null
    role: string | null
    email: string | null
    phone: string | null
    organization: string | null
    stakeholderType: $Enums.StakeholderType | null
    receiveNotifications: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperationStakeholderCountAggregateOutputType = {
    id: number
    businessOperationId: number
    userId: number
    name: number
    role: number
    email: number
    phone: number
    organization: number
    stakeholderType: number
    receiveNotifications: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OperationStakeholderMinAggregateInputType = {
    id?: true
    businessOperationId?: true
    userId?: true
    name?: true
    role?: true
    email?: true
    phone?: true
    organization?: true
    stakeholderType?: true
    receiveNotifications?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperationStakeholderMaxAggregateInputType = {
    id?: true
    businessOperationId?: true
    userId?: true
    name?: true
    role?: true
    email?: true
    phone?: true
    organization?: true
    stakeholderType?: true
    receiveNotifications?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperationStakeholderCountAggregateInputType = {
    id?: true
    businessOperationId?: true
    userId?: true
    name?: true
    role?: true
    email?: true
    phone?: true
    organization?: true
    stakeholderType?: true
    receiveNotifications?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OperationStakeholderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperationStakeholder to aggregate.
     */
    where?: OperationStakeholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationStakeholders to fetch.
     */
    orderBy?: OperationStakeholderOrderByWithRelationInput | OperationStakeholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperationStakeholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationStakeholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationStakeholders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OperationStakeholders
    **/
    _count?: true | OperationStakeholderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperationStakeholderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperationStakeholderMaxAggregateInputType
  }

  export type GetOperationStakeholderAggregateType<T extends OperationStakeholderAggregateArgs> = {
        [P in keyof T & keyof AggregateOperationStakeholder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperationStakeholder[P]>
      : GetScalarType<T[P], AggregateOperationStakeholder[P]>
  }




  export type OperationStakeholderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationStakeholderWhereInput
    orderBy?: OperationStakeholderOrderByWithAggregationInput | OperationStakeholderOrderByWithAggregationInput[]
    by: OperationStakeholderScalarFieldEnum[] | OperationStakeholderScalarFieldEnum
    having?: OperationStakeholderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperationStakeholderCountAggregateInputType | true
    _min?: OperationStakeholderMinAggregateInputType
    _max?: OperationStakeholderMaxAggregateInputType
  }

  export type OperationStakeholderGroupByOutputType = {
    id: string
    businessOperationId: string
    userId: string | null
    name: string
    role: string
    email: string
    phone: string | null
    organization: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: OperationStakeholderCountAggregateOutputType | null
    _min: OperationStakeholderMinAggregateOutputType | null
    _max: OperationStakeholderMaxAggregateOutputType | null
  }

  type GetOperationStakeholderGroupByPayload<T extends OperationStakeholderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperationStakeholderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperationStakeholderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperationStakeholderGroupByOutputType[P]>
            : GetScalarType<T[P], OperationStakeholderGroupByOutputType[P]>
        }
      >
    >


  export type OperationStakeholderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessOperationId?: boolean
    userId?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    phone?: boolean
    organization?: boolean
    stakeholderType?: boolean
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    user?: boolean | OperationStakeholder$userArgs<ExtArgs>
  }, ExtArgs["result"]["operationStakeholder"]>

  export type OperationStakeholderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessOperationId?: boolean
    userId?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    phone?: boolean
    organization?: boolean
    stakeholderType?: boolean
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    user?: boolean | OperationStakeholder$userArgs<ExtArgs>
  }, ExtArgs["result"]["operationStakeholder"]>

  export type OperationStakeholderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessOperationId?: boolean
    userId?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    phone?: boolean
    organization?: boolean
    stakeholderType?: boolean
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    user?: boolean | OperationStakeholder$userArgs<ExtArgs>
  }, ExtArgs["result"]["operationStakeholder"]>

  export type OperationStakeholderSelectScalar = {
    id?: boolean
    businessOperationId?: boolean
    userId?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    phone?: boolean
    organization?: boolean
    stakeholderType?: boolean
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OperationStakeholderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "businessOperationId" | "userId" | "name" | "role" | "email" | "phone" | "organization" | "stakeholderType" | "receiveNotifications" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["operationStakeholder"]>
  export type OperationStakeholderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    user?: boolean | OperationStakeholder$userArgs<ExtArgs>
  }
  export type OperationStakeholderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    user?: boolean | OperationStakeholder$userArgs<ExtArgs>
  }
  export type OperationStakeholderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    user?: boolean | OperationStakeholder$userArgs<ExtArgs>
  }

  export type $OperationStakeholderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OperationStakeholder"
    objects: {
      businessOperation: Prisma.$BusinessOperationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      businessOperationId: string
      userId: string | null
      name: string
      role: string
      email: string
      phone: string | null
      organization: string | null
      stakeholderType: $Enums.StakeholderType
      receiveNotifications: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["operationStakeholder"]>
    composites: {}
  }

  type OperationStakeholderGetPayload<S extends boolean | null | undefined | OperationStakeholderDefaultArgs> = $Result.GetResult<Prisma.$OperationStakeholderPayload, S>

  type OperationStakeholderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperationStakeholderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperationStakeholderCountAggregateInputType | true
    }

  export interface OperationStakeholderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OperationStakeholder'], meta: { name: 'OperationStakeholder' } }
    /**
     * Find zero or one OperationStakeholder that matches the filter.
     * @param {OperationStakeholderFindUniqueArgs} args - Arguments to find a OperationStakeholder
     * @example
     * // Get one OperationStakeholder
     * const operationStakeholder = await prisma.operationStakeholder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperationStakeholderFindUniqueArgs>(args: SelectSubset<T, OperationStakeholderFindUniqueArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OperationStakeholder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperationStakeholderFindUniqueOrThrowArgs} args - Arguments to find a OperationStakeholder
     * @example
     * // Get one OperationStakeholder
     * const operationStakeholder = await prisma.operationStakeholder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperationStakeholderFindUniqueOrThrowArgs>(args: SelectSubset<T, OperationStakeholderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OperationStakeholder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationStakeholderFindFirstArgs} args - Arguments to find a OperationStakeholder
     * @example
     * // Get one OperationStakeholder
     * const operationStakeholder = await prisma.operationStakeholder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperationStakeholderFindFirstArgs>(args?: SelectSubset<T, OperationStakeholderFindFirstArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OperationStakeholder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationStakeholderFindFirstOrThrowArgs} args - Arguments to find a OperationStakeholder
     * @example
     * // Get one OperationStakeholder
     * const operationStakeholder = await prisma.operationStakeholder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperationStakeholderFindFirstOrThrowArgs>(args?: SelectSubset<T, OperationStakeholderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OperationStakeholders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationStakeholderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OperationStakeholders
     * const operationStakeholders = await prisma.operationStakeholder.findMany()
     * 
     * // Get first 10 OperationStakeholders
     * const operationStakeholders = await prisma.operationStakeholder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operationStakeholderWithIdOnly = await prisma.operationStakeholder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperationStakeholderFindManyArgs>(args?: SelectSubset<T, OperationStakeholderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OperationStakeholder.
     * @param {OperationStakeholderCreateArgs} args - Arguments to create a OperationStakeholder.
     * @example
     * // Create one OperationStakeholder
     * const OperationStakeholder = await prisma.operationStakeholder.create({
     *   data: {
     *     // ... data to create a OperationStakeholder
     *   }
     * })
     * 
     */
    create<T extends OperationStakeholderCreateArgs>(args: SelectSubset<T, OperationStakeholderCreateArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OperationStakeholders.
     * @param {OperationStakeholderCreateManyArgs} args - Arguments to create many OperationStakeholders.
     * @example
     * // Create many OperationStakeholders
     * const operationStakeholder = await prisma.operationStakeholder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperationStakeholderCreateManyArgs>(args?: SelectSubset<T, OperationStakeholderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OperationStakeholders and returns the data saved in the database.
     * @param {OperationStakeholderCreateManyAndReturnArgs} args - Arguments to create many OperationStakeholders.
     * @example
     * // Create many OperationStakeholders
     * const operationStakeholder = await prisma.operationStakeholder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OperationStakeholders and only return the `id`
     * const operationStakeholderWithIdOnly = await prisma.operationStakeholder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperationStakeholderCreateManyAndReturnArgs>(args?: SelectSubset<T, OperationStakeholderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OperationStakeholder.
     * @param {OperationStakeholderDeleteArgs} args - Arguments to delete one OperationStakeholder.
     * @example
     * // Delete one OperationStakeholder
     * const OperationStakeholder = await prisma.operationStakeholder.delete({
     *   where: {
     *     // ... filter to delete one OperationStakeholder
     *   }
     * })
     * 
     */
    delete<T extends OperationStakeholderDeleteArgs>(args: SelectSubset<T, OperationStakeholderDeleteArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OperationStakeholder.
     * @param {OperationStakeholderUpdateArgs} args - Arguments to update one OperationStakeholder.
     * @example
     * // Update one OperationStakeholder
     * const operationStakeholder = await prisma.operationStakeholder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperationStakeholderUpdateArgs>(args: SelectSubset<T, OperationStakeholderUpdateArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OperationStakeholders.
     * @param {OperationStakeholderDeleteManyArgs} args - Arguments to filter OperationStakeholders to delete.
     * @example
     * // Delete a few OperationStakeholders
     * const { count } = await prisma.operationStakeholder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperationStakeholderDeleteManyArgs>(args?: SelectSubset<T, OperationStakeholderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperationStakeholders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationStakeholderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OperationStakeholders
     * const operationStakeholder = await prisma.operationStakeholder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperationStakeholderUpdateManyArgs>(args: SelectSubset<T, OperationStakeholderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperationStakeholders and returns the data updated in the database.
     * @param {OperationStakeholderUpdateManyAndReturnArgs} args - Arguments to update many OperationStakeholders.
     * @example
     * // Update many OperationStakeholders
     * const operationStakeholder = await prisma.operationStakeholder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OperationStakeholders and only return the `id`
     * const operationStakeholderWithIdOnly = await prisma.operationStakeholder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperationStakeholderUpdateManyAndReturnArgs>(args: SelectSubset<T, OperationStakeholderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OperationStakeholder.
     * @param {OperationStakeholderUpsertArgs} args - Arguments to update or create a OperationStakeholder.
     * @example
     * // Update or create a OperationStakeholder
     * const operationStakeholder = await prisma.operationStakeholder.upsert({
     *   create: {
     *     // ... data to create a OperationStakeholder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OperationStakeholder we want to update
     *   }
     * })
     */
    upsert<T extends OperationStakeholderUpsertArgs>(args: SelectSubset<T, OperationStakeholderUpsertArgs<ExtArgs>>): Prisma__OperationStakeholderClient<$Result.GetResult<Prisma.$OperationStakeholderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OperationStakeholders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationStakeholderCountArgs} args - Arguments to filter OperationStakeholders to count.
     * @example
     * // Count the number of OperationStakeholders
     * const count = await prisma.operationStakeholder.count({
     *   where: {
     *     // ... the filter for the OperationStakeholders we want to count
     *   }
     * })
    **/
    count<T extends OperationStakeholderCountArgs>(
      args?: Subset<T, OperationStakeholderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperationStakeholderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OperationStakeholder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationStakeholderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperationStakeholderAggregateArgs>(args: Subset<T, OperationStakeholderAggregateArgs>): Prisma.PrismaPromise<GetOperationStakeholderAggregateType<T>>

    /**
     * Group by OperationStakeholder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationStakeholderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperationStakeholderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperationStakeholderGroupByArgs['orderBy'] }
        : { orderBy?: OperationStakeholderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperationStakeholderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperationStakeholderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OperationStakeholder model
   */
  readonly fields: OperationStakeholderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OperationStakeholder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperationStakeholderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businessOperation<T extends BusinessOperationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessOperationDefaultArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends OperationStakeholder$userArgs<ExtArgs> = {}>(args?: Subset<T, OperationStakeholder$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OperationStakeholder model
   */
  interface OperationStakeholderFieldRefs {
    readonly id: FieldRef<"OperationStakeholder", 'String'>
    readonly businessOperationId: FieldRef<"OperationStakeholder", 'String'>
    readonly userId: FieldRef<"OperationStakeholder", 'String'>
    readonly name: FieldRef<"OperationStakeholder", 'String'>
    readonly role: FieldRef<"OperationStakeholder", 'String'>
    readonly email: FieldRef<"OperationStakeholder", 'String'>
    readonly phone: FieldRef<"OperationStakeholder", 'String'>
    readonly organization: FieldRef<"OperationStakeholder", 'String'>
    readonly stakeholderType: FieldRef<"OperationStakeholder", 'StakeholderType'>
    readonly receiveNotifications: FieldRef<"OperationStakeholder", 'Boolean'>
    readonly isActive: FieldRef<"OperationStakeholder", 'Boolean'>
    readonly createdAt: FieldRef<"OperationStakeholder", 'DateTime'>
    readonly updatedAt: FieldRef<"OperationStakeholder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OperationStakeholder findUnique
   */
  export type OperationStakeholderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * Filter, which OperationStakeholder to fetch.
     */
    where: OperationStakeholderWhereUniqueInput
  }

  /**
   * OperationStakeholder findUniqueOrThrow
   */
  export type OperationStakeholderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * Filter, which OperationStakeholder to fetch.
     */
    where: OperationStakeholderWhereUniqueInput
  }

  /**
   * OperationStakeholder findFirst
   */
  export type OperationStakeholderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * Filter, which OperationStakeholder to fetch.
     */
    where?: OperationStakeholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationStakeholders to fetch.
     */
    orderBy?: OperationStakeholderOrderByWithRelationInput | OperationStakeholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperationStakeholders.
     */
    cursor?: OperationStakeholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationStakeholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationStakeholders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperationStakeholders.
     */
    distinct?: OperationStakeholderScalarFieldEnum | OperationStakeholderScalarFieldEnum[]
  }

  /**
   * OperationStakeholder findFirstOrThrow
   */
  export type OperationStakeholderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * Filter, which OperationStakeholder to fetch.
     */
    where?: OperationStakeholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationStakeholders to fetch.
     */
    orderBy?: OperationStakeholderOrderByWithRelationInput | OperationStakeholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperationStakeholders.
     */
    cursor?: OperationStakeholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationStakeholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationStakeholders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperationStakeholders.
     */
    distinct?: OperationStakeholderScalarFieldEnum | OperationStakeholderScalarFieldEnum[]
  }

  /**
   * OperationStakeholder findMany
   */
  export type OperationStakeholderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * Filter, which OperationStakeholders to fetch.
     */
    where?: OperationStakeholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperationStakeholders to fetch.
     */
    orderBy?: OperationStakeholderOrderByWithRelationInput | OperationStakeholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OperationStakeholders.
     */
    cursor?: OperationStakeholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperationStakeholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperationStakeholders.
     */
    skip?: number
    distinct?: OperationStakeholderScalarFieldEnum | OperationStakeholderScalarFieldEnum[]
  }

  /**
   * OperationStakeholder create
   */
  export type OperationStakeholderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * The data needed to create a OperationStakeholder.
     */
    data: XOR<OperationStakeholderCreateInput, OperationStakeholderUncheckedCreateInput>
  }

  /**
   * OperationStakeholder createMany
   */
  export type OperationStakeholderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OperationStakeholders.
     */
    data: OperationStakeholderCreateManyInput | OperationStakeholderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OperationStakeholder createManyAndReturn
   */
  export type OperationStakeholderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * The data used to create many OperationStakeholders.
     */
    data: OperationStakeholderCreateManyInput | OperationStakeholderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OperationStakeholder update
   */
  export type OperationStakeholderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * The data needed to update a OperationStakeholder.
     */
    data: XOR<OperationStakeholderUpdateInput, OperationStakeholderUncheckedUpdateInput>
    /**
     * Choose, which OperationStakeholder to update.
     */
    where: OperationStakeholderWhereUniqueInput
  }

  /**
   * OperationStakeholder updateMany
   */
  export type OperationStakeholderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OperationStakeholders.
     */
    data: XOR<OperationStakeholderUpdateManyMutationInput, OperationStakeholderUncheckedUpdateManyInput>
    /**
     * Filter which OperationStakeholders to update
     */
    where?: OperationStakeholderWhereInput
    /**
     * Limit how many OperationStakeholders to update.
     */
    limit?: number
  }

  /**
   * OperationStakeholder updateManyAndReturn
   */
  export type OperationStakeholderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * The data used to update OperationStakeholders.
     */
    data: XOR<OperationStakeholderUpdateManyMutationInput, OperationStakeholderUncheckedUpdateManyInput>
    /**
     * Filter which OperationStakeholders to update
     */
    where?: OperationStakeholderWhereInput
    /**
     * Limit how many OperationStakeholders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OperationStakeholder upsert
   */
  export type OperationStakeholderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * The filter to search for the OperationStakeholder to update in case it exists.
     */
    where: OperationStakeholderWhereUniqueInput
    /**
     * In case the OperationStakeholder found by the `where` argument doesn't exist, create a new OperationStakeholder with this data.
     */
    create: XOR<OperationStakeholderCreateInput, OperationStakeholderUncheckedCreateInput>
    /**
     * In case the OperationStakeholder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperationStakeholderUpdateInput, OperationStakeholderUncheckedUpdateInput>
  }

  /**
   * OperationStakeholder delete
   */
  export type OperationStakeholderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
    /**
     * Filter which OperationStakeholder to delete.
     */
    where: OperationStakeholderWhereUniqueInput
  }

  /**
   * OperationStakeholder deleteMany
   */
  export type OperationStakeholderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperationStakeholders to delete
     */
    where?: OperationStakeholderWhereInput
    /**
     * Limit how many OperationStakeholders to delete.
     */
    limit?: number
  }

  /**
   * OperationStakeholder.user
   */
  export type OperationStakeholder$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OperationStakeholder without action
   */
  export type OperationStakeholderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperationStakeholder
     */
    select?: OperationStakeholderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperationStakeholder
     */
    omit?: OperationStakeholderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationStakeholderInclude<ExtArgs> | null
  }


  /**
   * Model Contract
   */

  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractMinAggregateOutputType = {
    id: string | null
    businessOperationId: string | null
    contractName: string | null
    contractNumber: string | null
    contractorName: string | null
    contractorPMId: string | null
    startDate: Date | null
    endDate: Date | null
    canBeExtended: boolean | null
    status: $Enums.ContractStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractMaxAggregateOutputType = {
    id: string | null
    businessOperationId: string | null
    contractName: string | null
    contractNumber: string | null
    contractorName: string | null
    contractorPMId: string | null
    startDate: Date | null
    endDate: Date | null
    canBeExtended: boolean | null
    status: $Enums.ContractStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractCountAggregateOutputType = {
    id: number
    businessOperationId: number
    contractName: number
    contractNumber: number
    contractorName: number
    contractorPMId: number
    startDate: number
    endDate: number
    canBeExtended: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractMinAggregateInputType = {
    id?: true
    businessOperationId?: true
    contractName?: true
    contractNumber?: true
    contractorName?: true
    contractorPMId?: true
    startDate?: true
    endDate?: true
    canBeExtended?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractMaxAggregateInputType = {
    id?: true
    businessOperationId?: true
    contractName?: true
    contractNumber?: true
    contractorName?: true
    contractorPMId?: true
    startDate?: true
    endDate?: true
    canBeExtended?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractCountAggregateInputType = {
    id?: true
    businessOperationId?: true
    contractName?: true
    contractNumber?: true
    contractorName?: true
    contractorPMId?: true
    startDate?: true
    endDate?: true
    canBeExtended?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contract to aggregate.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithAggregationInput | ContractOrderByWithAggregationInput[]
    by: ContractScalarFieldEnum[] | ContractScalarFieldEnum
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }

  export type ContractGroupByOutputType = {
    id: string
    businessOperationId: string
    contractName: string
    contractNumber: string
    contractorName: string
    contractorPMId: string | null
    startDate: Date
    endDate: Date
    canBeExtended: boolean
    status: $Enums.ContractStatus
    createdAt: Date
    updatedAt: Date
    _count: ContractCountAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessOperationId?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractorName?: boolean
    contractorPMId?: boolean
    startDate?: boolean
    endDate?: boolean
    canBeExtended?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    contractorPM?: boolean | Contract$contractorPMArgs<ExtArgs>
    transitions?: boolean | Contract$transitionsArgs<ExtArgs>
    auditLogs?: boolean | Contract$auditLogsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessOperationId?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractorName?: boolean
    contractorPMId?: boolean
    startDate?: boolean
    endDate?: boolean
    canBeExtended?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    contractorPM?: boolean | Contract$contractorPMArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessOperationId?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractorName?: boolean
    contractorPMId?: boolean
    startDate?: boolean
    endDate?: boolean
    canBeExtended?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    contractorPM?: boolean | Contract$contractorPMArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectScalar = {
    id?: boolean
    businessOperationId?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractorName?: boolean
    contractorPMId?: boolean
    startDate?: boolean
    endDate?: boolean
    canBeExtended?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "businessOperationId" | "contractName" | "contractNumber" | "contractorName" | "contractorPMId" | "startDate" | "endDate" | "canBeExtended" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["contract"]>
  export type ContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    contractorPM?: boolean | Contract$contractorPMArgs<ExtArgs>
    transitions?: boolean | Contract$transitionsArgs<ExtArgs>
    auditLogs?: boolean | Contract$auditLogsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    contractorPM?: boolean | Contract$contractorPMArgs<ExtArgs>
  }
  export type ContractIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessOperation?: boolean | BusinessOperationDefaultArgs<ExtArgs>
    contractorPM?: boolean | Contract$contractorPMArgs<ExtArgs>
  }

  export type $ContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contract"
    objects: {
      businessOperation: Prisma.$BusinessOperationPayload<ExtArgs>
      contractorPM: Prisma.$UserPayload<ExtArgs> | null
      transitions: Prisma.$TransitionPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      businessOperationId: string
      contractName: string
      contractNumber: string
      contractorName: string
      contractorPMId: string | null
      startDate: Date
      endDate: Date
      canBeExtended: boolean
      status: $Enums.ContractStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contract"]>
    composites: {}
  }

  type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = $Result.GetResult<Prisma.$ContractPayload, S>

  type ContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractCountAggregateInputType | true
    }

  export interface ContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractFindUniqueArgs>(args: SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractFindFirstArgs>(args?: SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractFindManyArgs>(args?: SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
     */
    create<T extends ContractCreateArgs>(args: SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contracts.
     * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractCreateManyArgs>(args?: SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contracts and returns the data saved in the database.
     * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
     */
    delete<T extends ContractDeleteArgs>(args: SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractUpdateArgs>(args: SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractDeleteManyArgs>(args?: SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractUpdateManyArgs>(args: SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts and returns the data updated in the database.
     * @param {ContractUpdateManyAndReturnArgs} args - Arguments to update many Contracts.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
     */
    upsert<T extends ContractUpsertArgs>(args: SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contract model
   */
  readonly fields: ContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businessOperation<T extends BusinessOperationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessOperationDefaultArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contractorPM<T extends Contract$contractorPMArgs<ExtArgs> = {}>(args?: Subset<T, Contract$contractorPMArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    transitions<T extends Contract$transitionsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$transitionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Contract$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contract model
   */
  interface ContractFieldRefs {
    readonly id: FieldRef<"Contract", 'String'>
    readonly businessOperationId: FieldRef<"Contract", 'String'>
    readonly contractName: FieldRef<"Contract", 'String'>
    readonly contractNumber: FieldRef<"Contract", 'String'>
    readonly contractorName: FieldRef<"Contract", 'String'>
    readonly contractorPMId: FieldRef<"Contract", 'String'>
    readonly startDate: FieldRef<"Contract", 'DateTime'>
    readonly endDate: FieldRef<"Contract", 'DateTime'>
    readonly canBeExtended: FieldRef<"Contract", 'Boolean'>
    readonly status: FieldRef<"Contract", 'ContractStatus'>
    readonly createdAt: FieldRef<"Contract", 'DateTime'>
    readonly updatedAt: FieldRef<"Contract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findUniqueOrThrow
   */
  export type ContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findFirstOrThrow
   */
  export type ContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findMany
   */
  export type ContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract create
   */
  export type ContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to create a Contract.
     */
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }

  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contract createManyAndReturn
   */
  export type ContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract update
   */
  export type ContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to update a Contract.
     */
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
  }

  /**
   * Contract updateManyAndReturn
   */
  export type ContractUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract upsert
   */
  export type ContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The filter to search for the Contract to update in case it exists.
     */
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     */
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }

  /**
   * Contract delete
   */
  export type ContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter which Contract to delete.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to delete.
     */
    limit?: number
  }

  /**
   * Contract.contractorPM
   */
  export type Contract$contractorPMArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Contract.transitions
   */
  export type Contract$transitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    where?: TransitionWhereInput
    orderBy?: TransitionOrderByWithRelationInput | TransitionOrderByWithRelationInput[]
    cursor?: TransitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransitionScalarFieldEnum | TransitionScalarFieldEnum[]
  }

  /**
   * Contract.auditLogs
   */
  export type Contract$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Contract without action
   */
  export type ContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
  }


  /**
   * Model Transition
   */

  export type AggregateTransition = {
    _count: TransitionCountAggregateOutputType | null
    _min: TransitionMinAggregateOutputType | null
    _max: TransitionMaxAggregateOutputType | null
  }

  export type TransitionMinAggregateOutputType = {
    id: string | null
    contractName: string | null
    contractNumber: string | null
    contractId: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    duration: $Enums.TransitionDuration | null
    keyPersonnel: string | null
    description: string | null
    status: $Enums.TransitionStatus | null
    requiresContinuousService: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransitionMaxAggregateOutputType = {
    id: string | null
    contractName: string | null
    contractNumber: string | null
    contractId: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    duration: $Enums.TransitionDuration | null
    keyPersonnel: string | null
    description: string | null
    status: $Enums.TransitionStatus | null
    requiresContinuousService: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransitionCountAggregateOutputType = {
    id: number
    contractName: number
    contractNumber: number
    contractId: number
    name: number
    startDate: number
    endDate: number
    duration: number
    keyPersonnel: number
    description: number
    status: number
    requiresContinuousService: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransitionMinAggregateInputType = {
    id?: true
    contractName?: true
    contractNumber?: true
    contractId?: true
    name?: true
    startDate?: true
    endDate?: true
    duration?: true
    keyPersonnel?: true
    description?: true
    status?: true
    requiresContinuousService?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransitionMaxAggregateInputType = {
    id?: true
    contractName?: true
    contractNumber?: true
    contractId?: true
    name?: true
    startDate?: true
    endDate?: true
    duration?: true
    keyPersonnel?: true
    description?: true
    status?: true
    requiresContinuousService?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransitionCountAggregateInputType = {
    id?: true
    contractName?: true
    contractNumber?: true
    contractId?: true
    name?: true
    startDate?: true
    endDate?: true
    duration?: true
    keyPersonnel?: true
    description?: true
    status?: true
    requiresContinuousService?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransitionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transition to aggregate.
     */
    where?: TransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transitions to fetch.
     */
    orderBy?: TransitionOrderByWithRelationInput | TransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transitions
    **/
    _count?: true | TransitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransitionMaxAggregateInputType
  }

  export type GetTransitionAggregateType<T extends TransitionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransition[P]>
      : GetScalarType<T[P], AggregateTransition[P]>
  }




  export type TransitionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransitionWhereInput
    orderBy?: TransitionOrderByWithAggregationInput | TransitionOrderByWithAggregationInput[]
    by: TransitionScalarFieldEnum[] | TransitionScalarFieldEnum
    having?: TransitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransitionCountAggregateInputType | true
    _min?: TransitionMinAggregateInputType
    _max?: TransitionMaxAggregateInputType
  }

  export type TransitionGroupByOutputType = {
    id: string
    contractName: string | null
    contractNumber: string | null
    contractId: string | null
    name: string | null
    startDate: Date
    endDate: Date
    duration: $Enums.TransitionDuration
    keyPersonnel: string | null
    description: string | null
    status: $Enums.TransitionStatus
    requiresContinuousService: boolean
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: TransitionCountAggregateOutputType | null
    _min: TransitionMinAggregateOutputType | null
    _max: TransitionMaxAggregateOutputType | null
  }

  type GetTransitionGroupByPayload<T extends TransitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransitionGroupByOutputType[P]>
            : GetScalarType<T[P], TransitionGroupByOutputType[P]>
        }
      >
    >


  export type TransitionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    duration?: boolean
    keyPersonnel?: boolean
    description?: boolean
    status?: boolean
    requiresContinuousService?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | Transition$contractArgs<ExtArgs>
    creator?: boolean | Transition$creatorArgs<ExtArgs>
    milestones?: boolean | Transition$milestonesArgs<ExtArgs>
    auditLogs?: boolean | Transition$auditLogsArgs<ExtArgs>
    _count?: boolean | TransitionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transition"]>

  export type TransitionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    duration?: boolean
    keyPersonnel?: boolean
    description?: boolean
    status?: boolean
    requiresContinuousService?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | Transition$contractArgs<ExtArgs>
    creator?: boolean | Transition$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["transition"]>

  export type TransitionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    duration?: boolean
    keyPersonnel?: boolean
    description?: boolean
    status?: boolean
    requiresContinuousService?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | Transition$contractArgs<ExtArgs>
    creator?: boolean | Transition$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["transition"]>

  export type TransitionSelectScalar = {
    id?: boolean
    contractName?: boolean
    contractNumber?: boolean
    contractId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    duration?: boolean
    keyPersonnel?: boolean
    description?: boolean
    status?: boolean
    requiresContinuousService?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransitionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contractName" | "contractNumber" | "contractId" | "name" | "startDate" | "endDate" | "duration" | "keyPersonnel" | "description" | "status" | "requiresContinuousService" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["transition"]>
  export type TransitionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | Transition$contractArgs<ExtArgs>
    creator?: boolean | Transition$creatorArgs<ExtArgs>
    milestones?: boolean | Transition$milestonesArgs<ExtArgs>
    auditLogs?: boolean | Transition$auditLogsArgs<ExtArgs>
    _count?: boolean | TransitionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransitionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | Transition$contractArgs<ExtArgs>
    creator?: boolean | Transition$creatorArgs<ExtArgs>
  }
  export type TransitionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | Transition$contractArgs<ExtArgs>
    creator?: boolean | Transition$creatorArgs<ExtArgs>
  }

  export type $TransitionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transition"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs> | null
      creator: Prisma.$UserPayload<ExtArgs> | null
      milestones: Prisma.$MilestonePayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contractName: string | null
      contractNumber: string | null
      contractId: string | null
      name: string | null
      startDate: Date
      endDate: Date
      duration: $Enums.TransitionDuration
      keyPersonnel: string | null
      description: string | null
      status: $Enums.TransitionStatus
      requiresContinuousService: boolean
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transition"]>
    composites: {}
  }

  type TransitionGetPayload<S extends boolean | null | undefined | TransitionDefaultArgs> = $Result.GetResult<Prisma.$TransitionPayload, S>

  type TransitionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransitionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransitionCountAggregateInputType | true
    }

  export interface TransitionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transition'], meta: { name: 'Transition' } }
    /**
     * Find zero or one Transition that matches the filter.
     * @param {TransitionFindUniqueArgs} args - Arguments to find a Transition
     * @example
     * // Get one Transition
     * const transition = await prisma.transition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransitionFindUniqueArgs>(args: SelectSubset<T, TransitionFindUniqueArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransitionFindUniqueOrThrowArgs} args - Arguments to find a Transition
     * @example
     * // Get one Transition
     * const transition = await prisma.transition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransitionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransitionFindFirstArgs} args - Arguments to find a Transition
     * @example
     * // Get one Transition
     * const transition = await prisma.transition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransitionFindFirstArgs>(args?: SelectSubset<T, TransitionFindFirstArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransitionFindFirstOrThrowArgs} args - Arguments to find a Transition
     * @example
     * // Get one Transition
     * const transition = await prisma.transition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransitionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransitionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransitionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transitions
     * const transitions = await prisma.transition.findMany()
     * 
     * // Get first 10 Transitions
     * const transitions = await prisma.transition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transitionWithIdOnly = await prisma.transition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransitionFindManyArgs>(args?: SelectSubset<T, TransitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transition.
     * @param {TransitionCreateArgs} args - Arguments to create a Transition.
     * @example
     * // Create one Transition
     * const Transition = await prisma.transition.create({
     *   data: {
     *     // ... data to create a Transition
     *   }
     * })
     * 
     */
    create<T extends TransitionCreateArgs>(args: SelectSubset<T, TransitionCreateArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transitions.
     * @param {TransitionCreateManyArgs} args - Arguments to create many Transitions.
     * @example
     * // Create many Transitions
     * const transition = await prisma.transition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransitionCreateManyArgs>(args?: SelectSubset<T, TransitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transitions and returns the data saved in the database.
     * @param {TransitionCreateManyAndReturnArgs} args - Arguments to create many Transitions.
     * @example
     * // Create many Transitions
     * const transition = await prisma.transition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transitions and only return the `id`
     * const transitionWithIdOnly = await prisma.transition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransitionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transition.
     * @param {TransitionDeleteArgs} args - Arguments to delete one Transition.
     * @example
     * // Delete one Transition
     * const Transition = await prisma.transition.delete({
     *   where: {
     *     // ... filter to delete one Transition
     *   }
     * })
     * 
     */
    delete<T extends TransitionDeleteArgs>(args: SelectSubset<T, TransitionDeleteArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transition.
     * @param {TransitionUpdateArgs} args - Arguments to update one Transition.
     * @example
     * // Update one Transition
     * const transition = await prisma.transition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransitionUpdateArgs>(args: SelectSubset<T, TransitionUpdateArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transitions.
     * @param {TransitionDeleteManyArgs} args - Arguments to filter Transitions to delete.
     * @example
     * // Delete a few Transitions
     * const { count } = await prisma.transition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransitionDeleteManyArgs>(args?: SelectSubset<T, TransitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transitions
     * const transition = await prisma.transition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransitionUpdateManyArgs>(args: SelectSubset<T, TransitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transitions and returns the data updated in the database.
     * @param {TransitionUpdateManyAndReturnArgs} args - Arguments to update many Transitions.
     * @example
     * // Update many Transitions
     * const transition = await prisma.transition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transitions and only return the `id`
     * const transitionWithIdOnly = await prisma.transition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransitionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransitionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transition.
     * @param {TransitionUpsertArgs} args - Arguments to update or create a Transition.
     * @example
     * // Update or create a Transition
     * const transition = await prisma.transition.upsert({
     *   create: {
     *     // ... data to create a Transition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transition we want to update
     *   }
     * })
     */
    upsert<T extends TransitionUpsertArgs>(args: SelectSubset<T, TransitionUpsertArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransitionCountArgs} args - Arguments to filter Transitions to count.
     * @example
     * // Count the number of Transitions
     * const count = await prisma.transition.count({
     *   where: {
     *     // ... the filter for the Transitions we want to count
     *   }
     * })
    **/
    count<T extends TransitionCountArgs>(
      args?: Subset<T, TransitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransitionAggregateArgs>(args: Subset<T, TransitionAggregateArgs>): Prisma.PrismaPromise<GetTransitionAggregateType<T>>

    /**
     * Group by Transition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransitionGroupByArgs['orderBy'] }
        : { orderBy?: TransitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transition model
   */
  readonly fields: TransitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransitionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends Transition$contractArgs<ExtArgs> = {}>(args?: Subset<T, Transition$contractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    creator<T extends Transition$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Transition$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    milestones<T extends Transition$milestonesArgs<ExtArgs> = {}>(args?: Subset<T, Transition$milestonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Transition$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Transition$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transition model
   */
  interface TransitionFieldRefs {
    readonly id: FieldRef<"Transition", 'String'>
    readonly contractName: FieldRef<"Transition", 'String'>
    readonly contractNumber: FieldRef<"Transition", 'String'>
    readonly contractId: FieldRef<"Transition", 'String'>
    readonly name: FieldRef<"Transition", 'String'>
    readonly startDate: FieldRef<"Transition", 'DateTime'>
    readonly endDate: FieldRef<"Transition", 'DateTime'>
    readonly duration: FieldRef<"Transition", 'TransitionDuration'>
    readonly keyPersonnel: FieldRef<"Transition", 'String'>
    readonly description: FieldRef<"Transition", 'String'>
    readonly status: FieldRef<"Transition", 'TransitionStatus'>
    readonly requiresContinuousService: FieldRef<"Transition", 'Boolean'>
    readonly createdBy: FieldRef<"Transition", 'String'>
    readonly createdAt: FieldRef<"Transition", 'DateTime'>
    readonly updatedAt: FieldRef<"Transition", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transition findUnique
   */
  export type TransitionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * Filter, which Transition to fetch.
     */
    where: TransitionWhereUniqueInput
  }

  /**
   * Transition findUniqueOrThrow
   */
  export type TransitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * Filter, which Transition to fetch.
     */
    where: TransitionWhereUniqueInput
  }

  /**
   * Transition findFirst
   */
  export type TransitionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * Filter, which Transition to fetch.
     */
    where?: TransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transitions to fetch.
     */
    orderBy?: TransitionOrderByWithRelationInput | TransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transitions.
     */
    cursor?: TransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transitions.
     */
    distinct?: TransitionScalarFieldEnum | TransitionScalarFieldEnum[]
  }

  /**
   * Transition findFirstOrThrow
   */
  export type TransitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * Filter, which Transition to fetch.
     */
    where?: TransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transitions to fetch.
     */
    orderBy?: TransitionOrderByWithRelationInput | TransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transitions.
     */
    cursor?: TransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transitions.
     */
    distinct?: TransitionScalarFieldEnum | TransitionScalarFieldEnum[]
  }

  /**
   * Transition findMany
   */
  export type TransitionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * Filter, which Transitions to fetch.
     */
    where?: TransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transitions to fetch.
     */
    orderBy?: TransitionOrderByWithRelationInput | TransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transitions.
     */
    cursor?: TransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transitions.
     */
    skip?: number
    distinct?: TransitionScalarFieldEnum | TransitionScalarFieldEnum[]
  }

  /**
   * Transition create
   */
  export type TransitionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transition.
     */
    data: XOR<TransitionCreateInput, TransitionUncheckedCreateInput>
  }

  /**
   * Transition createMany
   */
  export type TransitionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transitions.
     */
    data: TransitionCreateManyInput | TransitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transition createManyAndReturn
   */
  export type TransitionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * The data used to create many Transitions.
     */
    data: TransitionCreateManyInput | TransitionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transition update
   */
  export type TransitionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transition.
     */
    data: XOR<TransitionUpdateInput, TransitionUncheckedUpdateInput>
    /**
     * Choose, which Transition to update.
     */
    where: TransitionWhereUniqueInput
  }

  /**
   * Transition updateMany
   */
  export type TransitionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transitions.
     */
    data: XOR<TransitionUpdateManyMutationInput, TransitionUncheckedUpdateManyInput>
    /**
     * Filter which Transitions to update
     */
    where?: TransitionWhereInput
    /**
     * Limit how many Transitions to update.
     */
    limit?: number
  }

  /**
   * Transition updateManyAndReturn
   */
  export type TransitionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * The data used to update Transitions.
     */
    data: XOR<TransitionUpdateManyMutationInput, TransitionUncheckedUpdateManyInput>
    /**
     * Filter which Transitions to update
     */
    where?: TransitionWhereInput
    /**
     * Limit how many Transitions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transition upsert
   */
  export type TransitionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transition to update in case it exists.
     */
    where: TransitionWhereUniqueInput
    /**
     * In case the Transition found by the `where` argument doesn't exist, create a new Transition with this data.
     */
    create: XOR<TransitionCreateInput, TransitionUncheckedCreateInput>
    /**
     * In case the Transition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransitionUpdateInput, TransitionUncheckedUpdateInput>
  }

  /**
   * Transition delete
   */
  export type TransitionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    /**
     * Filter which Transition to delete.
     */
    where: TransitionWhereUniqueInput
  }

  /**
   * Transition deleteMany
   */
  export type TransitionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transitions to delete
     */
    where?: TransitionWhereInput
    /**
     * Limit how many Transitions to delete.
     */
    limit?: number
  }

  /**
   * Transition.contract
   */
  export type Transition$contractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * Transition.creator
   */
  export type Transition$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Transition.milestones
   */
  export type Transition$milestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    cursor?: MilestoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Transition.auditLogs
   */
  export type Transition$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Transition without action
   */
  export type TransitionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
  }


  /**
   * Model Milestone
   */

  export type AggregateMilestone = {
    _count: MilestoneCountAggregateOutputType | null
    _min: MilestoneMinAggregateOutputType | null
    _max: MilestoneMaxAggregateOutputType | null
  }

  export type MilestoneMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    priority: $Enums.PriorityLevel | null
    status: $Enums.MilestoneStatus | null
    transitionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MilestoneMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    priority: $Enums.PriorityLevel | null
    status: $Enums.MilestoneStatus | null
    transitionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MilestoneCountAggregateOutputType = {
    id: number
    title: number
    description: number
    dueDate: number
    priority: number
    status: number
    transitionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MilestoneMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    priority?: true
    status?: true
    transitionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MilestoneMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    priority?: true
    status?: true
    transitionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MilestoneCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    priority?: true
    status?: true
    transitionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MilestoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Milestone to aggregate.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Milestones
    **/
    _count?: true | MilestoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MilestoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MilestoneMaxAggregateInputType
  }

  export type GetMilestoneAggregateType<T extends MilestoneAggregateArgs> = {
        [P in keyof T & keyof AggregateMilestone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMilestone[P]>
      : GetScalarType<T[P], AggregateMilestone[P]>
  }




  export type MilestoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithAggregationInput | MilestoneOrderByWithAggregationInput[]
    by: MilestoneScalarFieldEnum[] | MilestoneScalarFieldEnum
    having?: MilestoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MilestoneCountAggregateInputType | true
    _min?: MilestoneMinAggregateInputType
    _max?: MilestoneMaxAggregateInputType
  }

  export type MilestoneGroupByOutputType = {
    id: string
    title: string
    description: string | null
    dueDate: Date
    priority: $Enums.PriorityLevel
    status: $Enums.MilestoneStatus
    transitionId: string
    createdAt: Date
    updatedAt: Date
    _count: MilestoneCountAggregateOutputType | null
    _min: MilestoneMinAggregateOutputType | null
    _max: MilestoneMaxAggregateOutputType | null
  }

  type GetMilestoneGroupByPayload<T extends MilestoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MilestoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MilestoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MilestoneGroupByOutputType[P]>
            : GetScalarType<T[P], MilestoneGroupByOutputType[P]>
        }
      >
    >


  export type MilestoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    priority?: boolean
    status?: boolean
    transitionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transition?: boolean | TransitionDefaultArgs<ExtArgs>
    auditLogs?: boolean | Milestone$auditLogsArgs<ExtArgs>
    _count?: boolean | MilestoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    priority?: boolean
    status?: boolean
    transitionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transition?: boolean | TransitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    priority?: boolean
    status?: boolean
    transitionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transition?: boolean | TransitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    priority?: boolean
    status?: boolean
    transitionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MilestoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "dueDate" | "priority" | "status" | "transitionId" | "createdAt" | "updatedAt", ExtArgs["result"]["milestone"]>
  export type MilestoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transition?: boolean | TransitionDefaultArgs<ExtArgs>
    auditLogs?: boolean | Milestone$auditLogsArgs<ExtArgs>
    _count?: boolean | MilestoneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MilestoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transition?: boolean | TransitionDefaultArgs<ExtArgs>
  }
  export type MilestoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transition?: boolean | TransitionDefaultArgs<ExtArgs>
  }

  export type $MilestonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Milestone"
    objects: {
      transition: Prisma.$TransitionPayload<ExtArgs>
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      dueDate: Date
      priority: $Enums.PriorityLevel
      status: $Enums.MilestoneStatus
      transitionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["milestone"]>
    composites: {}
  }

  type MilestoneGetPayload<S extends boolean | null | undefined | MilestoneDefaultArgs> = $Result.GetResult<Prisma.$MilestonePayload, S>

  type MilestoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MilestoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MilestoneCountAggregateInputType | true
    }

  export interface MilestoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Milestone'], meta: { name: 'Milestone' } }
    /**
     * Find zero or one Milestone that matches the filter.
     * @param {MilestoneFindUniqueArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MilestoneFindUniqueArgs>(args: SelectSubset<T, MilestoneFindUniqueArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Milestone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MilestoneFindUniqueOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MilestoneFindUniqueOrThrowArgs>(args: SelectSubset<T, MilestoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Milestone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MilestoneFindFirstArgs>(args?: SelectSubset<T, MilestoneFindFirstArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Milestone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MilestoneFindFirstOrThrowArgs>(args?: SelectSubset<T, MilestoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Milestones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Milestones
     * const milestones = await prisma.milestone.findMany()
     * 
     * // Get first 10 Milestones
     * const milestones = await prisma.milestone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const milestoneWithIdOnly = await prisma.milestone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MilestoneFindManyArgs>(args?: SelectSubset<T, MilestoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Milestone.
     * @param {MilestoneCreateArgs} args - Arguments to create a Milestone.
     * @example
     * // Create one Milestone
     * const Milestone = await prisma.milestone.create({
     *   data: {
     *     // ... data to create a Milestone
     *   }
     * })
     * 
     */
    create<T extends MilestoneCreateArgs>(args: SelectSubset<T, MilestoneCreateArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Milestones.
     * @param {MilestoneCreateManyArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MilestoneCreateManyArgs>(args?: SelectSubset<T, MilestoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Milestones and returns the data saved in the database.
     * @param {MilestoneCreateManyAndReturnArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Milestones and only return the `id`
     * const milestoneWithIdOnly = await prisma.milestone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MilestoneCreateManyAndReturnArgs>(args?: SelectSubset<T, MilestoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Milestone.
     * @param {MilestoneDeleteArgs} args - Arguments to delete one Milestone.
     * @example
     * // Delete one Milestone
     * const Milestone = await prisma.milestone.delete({
     *   where: {
     *     // ... filter to delete one Milestone
     *   }
     * })
     * 
     */
    delete<T extends MilestoneDeleteArgs>(args: SelectSubset<T, MilestoneDeleteArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Milestone.
     * @param {MilestoneUpdateArgs} args - Arguments to update one Milestone.
     * @example
     * // Update one Milestone
     * const milestone = await prisma.milestone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MilestoneUpdateArgs>(args: SelectSubset<T, MilestoneUpdateArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Milestones.
     * @param {MilestoneDeleteManyArgs} args - Arguments to filter Milestones to delete.
     * @example
     * // Delete a few Milestones
     * const { count } = await prisma.milestone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MilestoneDeleteManyArgs>(args?: SelectSubset<T, MilestoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Milestones
     * const milestone = await prisma.milestone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MilestoneUpdateManyArgs>(args: SelectSubset<T, MilestoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Milestones and returns the data updated in the database.
     * @param {MilestoneUpdateManyAndReturnArgs} args - Arguments to update many Milestones.
     * @example
     * // Update many Milestones
     * const milestone = await prisma.milestone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Milestones and only return the `id`
     * const milestoneWithIdOnly = await prisma.milestone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MilestoneUpdateManyAndReturnArgs>(args: SelectSubset<T, MilestoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Milestone.
     * @param {MilestoneUpsertArgs} args - Arguments to update or create a Milestone.
     * @example
     * // Update or create a Milestone
     * const milestone = await prisma.milestone.upsert({
     *   create: {
     *     // ... data to create a Milestone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Milestone we want to update
     *   }
     * })
     */
    upsert<T extends MilestoneUpsertArgs>(args: SelectSubset<T, MilestoneUpsertArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneCountArgs} args - Arguments to filter Milestones to count.
     * @example
     * // Count the number of Milestones
     * const count = await prisma.milestone.count({
     *   where: {
     *     // ... the filter for the Milestones we want to count
     *   }
     * })
    **/
    count<T extends MilestoneCountArgs>(
      args?: Subset<T, MilestoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MilestoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MilestoneAggregateArgs>(args: Subset<T, MilestoneAggregateArgs>): Prisma.PrismaPromise<GetMilestoneAggregateType<T>>

    /**
     * Group by Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MilestoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MilestoneGroupByArgs['orderBy'] }
        : { orderBy?: MilestoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MilestoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMilestoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Milestone model
   */
  readonly fields: MilestoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Milestone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MilestoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transition<T extends TransitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransitionDefaultArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    auditLogs<T extends Milestone$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Milestone$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Milestone model
   */
  interface MilestoneFieldRefs {
    readonly id: FieldRef<"Milestone", 'String'>
    readonly title: FieldRef<"Milestone", 'String'>
    readonly description: FieldRef<"Milestone", 'String'>
    readonly dueDate: FieldRef<"Milestone", 'DateTime'>
    readonly priority: FieldRef<"Milestone", 'PriorityLevel'>
    readonly status: FieldRef<"Milestone", 'MilestoneStatus'>
    readonly transitionId: FieldRef<"Milestone", 'String'>
    readonly createdAt: FieldRef<"Milestone", 'DateTime'>
    readonly updatedAt: FieldRef<"Milestone", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Milestone findUnique
   */
  export type MilestoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone findUniqueOrThrow
   */
  export type MilestoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone findFirst
   */
  export type MilestoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone findFirstOrThrow
   */
  export type MilestoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone findMany
   */
  export type MilestoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestones to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone create
   */
  export type MilestoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Milestone.
     */
    data: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>
  }

  /**
   * Milestone createMany
   */
  export type MilestoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Milestone createManyAndReturn
   */
  export type MilestoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Milestone update
   */
  export type MilestoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Milestone.
     */
    data: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>
    /**
     * Choose, which Milestone to update.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone updateMany
   */
  export type MilestoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Milestones.
     */
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyInput>
    /**
     * Filter which Milestones to update
     */
    where?: MilestoneWhereInput
    /**
     * Limit how many Milestones to update.
     */
    limit?: number
  }

  /**
   * Milestone updateManyAndReturn
   */
  export type MilestoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * The data used to update Milestones.
     */
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyInput>
    /**
     * Filter which Milestones to update
     */
    where?: MilestoneWhereInput
    /**
     * Limit how many Milestones to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Milestone upsert
   */
  export type MilestoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Milestone to update in case it exists.
     */
    where: MilestoneWhereUniqueInput
    /**
     * In case the Milestone found by the `where` argument doesn't exist, create a new Milestone with this data.
     */
    create: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>
    /**
     * In case the Milestone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>
  }

  /**
   * Milestone delete
   */
  export type MilestoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter which Milestone to delete.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone deleteMany
   */
  export type MilestoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Milestones to delete
     */
    where?: MilestoneWhereInput
    /**
     * Limit how many Milestones to delete.
     */
    limit?: number
  }

  /**
   * Milestone.auditLogs
   */
  export type Milestone$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Milestone without action
   */
  export type MilestoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    action: string | null
    userId: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    action: string | null
    userId: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    entityType: number
    entityId: number
    action: number
    oldValues: number
    newValues: number
    userId: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    action?: true
    userId?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    action?: true
    userId?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    action?: true
    oldValues?: true
    newValues?: true
    userId?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    entityType: string
    entityId: string
    action: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    userId: string
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    businessOperation?: boolean | AuditLog$businessOperationArgs<ExtArgs>
    contract?: boolean | AuditLog$contractArgs<ExtArgs>
    transition?: boolean | AuditLog$transitionArgs<ExtArgs>
    milestone?: boolean | AuditLog$milestoneArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    businessOperation?: boolean | AuditLog$businessOperationArgs<ExtArgs>
    contract?: boolean | AuditLog$contractArgs<ExtArgs>
    transition?: boolean | AuditLog$transitionArgs<ExtArgs>
    milestone?: boolean | AuditLog$milestoneArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    businessOperation?: boolean | AuditLog$businessOperationArgs<ExtArgs>
    contract?: boolean | AuditLog$contractArgs<ExtArgs>
    transition?: boolean | AuditLog$transitionArgs<ExtArgs>
    milestone?: boolean | AuditLog$milestoneArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityType" | "entityId" | "action" | "oldValues" | "newValues" | "userId" | "timestamp", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    businessOperation?: boolean | AuditLog$businessOperationArgs<ExtArgs>
    contract?: boolean | AuditLog$contractArgs<ExtArgs>
    transition?: boolean | AuditLog$transitionArgs<ExtArgs>
    milestone?: boolean | AuditLog$milestoneArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    businessOperation?: boolean | AuditLog$businessOperationArgs<ExtArgs>
    contract?: boolean | AuditLog$contractArgs<ExtArgs>
    transition?: boolean | AuditLog$transitionArgs<ExtArgs>
    milestone?: boolean | AuditLog$milestoneArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    businessOperation?: boolean | AuditLog$businessOperationArgs<ExtArgs>
    contract?: boolean | AuditLog$contractArgs<ExtArgs>
    transition?: boolean | AuditLog$transitionArgs<ExtArgs>
    milestone?: boolean | AuditLog$milestoneArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      businessOperation: Prisma.$BusinessOperationPayload<ExtArgs> | null
      contract: Prisma.$ContractPayload<ExtArgs> | null
      transition: Prisma.$TransitionPayload<ExtArgs> | null
      milestone: Prisma.$MilestonePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityType: string
      entityId: string
      action: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      userId: string
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    businessOperation<T extends AuditLog$businessOperationArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$businessOperationArgs<ExtArgs>>): Prisma__BusinessOperationClient<$Result.GetResult<Prisma.$BusinessOperationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    contract<T extends AuditLog$contractArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$contractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    transition<T extends AuditLog$transitionArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$transitionArgs<ExtArgs>>): Prisma__TransitionClient<$Result.GetResult<Prisma.$TransitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    milestone<T extends AuditLog$milestoneArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$milestoneArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.businessOperation
   */
  export type AuditLog$businessOperationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessOperation
     */
    select?: BusinessOperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessOperation
     */
    omit?: BusinessOperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessOperationInclude<ExtArgs> | null
    where?: BusinessOperationWhereInput
  }

  /**
   * AuditLog.contract
   */
  export type AuditLog$contractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * AuditLog.transition
   */
  export type AuditLog$transitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transition
     */
    select?: TransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transition
     */
    omit?: TransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransitionInclude<ExtArgs> | null
    where?: TransitionWhereInput
  }

  /**
   * AuditLog.milestone
   */
  export type AuditLog$milestoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    where?: MilestoneWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BusinessOperationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    businessFunction: 'businessFunction',
    technicalDomain: 'technicalDomain',
    description: 'description',
    scope: 'scope',
    objectives: 'objectives',
    performanceMetrics: 'performanceMetrics',
    supportPeriodStart: 'supportPeriodStart',
    supportPeriodEnd: 'supportPeriodEnd',
    currentContractEnd: 'currentContractEnd',
    currentManagerId: 'currentManagerId',
    governmentPMId: 'governmentPMId',
    directorId: 'directorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BusinessOperationScalarFieldEnum = (typeof BusinessOperationScalarFieldEnum)[keyof typeof BusinessOperationScalarFieldEnum]


  export const OperationStakeholderScalarFieldEnum: {
    id: 'id',
    businessOperationId: 'businessOperationId',
    userId: 'userId',
    name: 'name',
    role: 'role',
    email: 'email',
    phone: 'phone',
    organization: 'organization',
    stakeholderType: 'stakeholderType',
    receiveNotifications: 'receiveNotifications',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OperationStakeholderScalarFieldEnum = (typeof OperationStakeholderScalarFieldEnum)[keyof typeof OperationStakeholderScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    id: 'id',
    businessOperationId: 'businessOperationId',
    contractName: 'contractName',
    contractNumber: 'contractNumber',
    contractorName: 'contractorName',
    contractorPMId: 'contractorPMId',
    startDate: 'startDate',
    endDate: 'endDate',
    canBeExtended: 'canBeExtended',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const TransitionScalarFieldEnum: {
    id: 'id',
    contractName: 'contractName',
    contractNumber: 'contractNumber',
    contractId: 'contractId',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    duration: 'duration',
    keyPersonnel: 'keyPersonnel',
    description: 'description',
    status: 'status',
    requiresContinuousService: 'requiresContinuousService',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransitionScalarFieldEnum = (typeof TransitionScalarFieldEnum)[keyof typeof TransitionScalarFieldEnum]


  export const MilestoneScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    dueDate: 'dueDate',
    priority: 'priority',
    status: 'status',
    transitionId: 'transitionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MilestoneScalarFieldEnum = (typeof MilestoneScalarFieldEnum)[keyof typeof MilestoneScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    entityType: 'entityType',
    entityId: 'entityId',
    action: 'action',
    oldValues: 'oldValues',
    newValues: 'newValues',
    userId: 'userId',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'StakeholderType'
   */
  export type EnumStakeholderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StakeholderType'>
    


  /**
   * Reference to a field of type 'StakeholderType[]'
   */
  export type ListEnumStakeholderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StakeholderType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ContractStatus'
   */
  export type EnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus'>
    


  /**
   * Reference to a field of type 'ContractStatus[]'
   */
  export type ListEnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus[]'>
    


  /**
   * Reference to a field of type 'TransitionDuration'
   */
  export type EnumTransitionDurationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransitionDuration'>
    


  /**
   * Reference to a field of type 'TransitionDuration[]'
   */
  export type ListEnumTransitionDurationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransitionDuration[]'>
    


  /**
   * Reference to a field of type 'TransitionStatus'
   */
  export type EnumTransitionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransitionStatus'>
    


  /**
   * Reference to a field of type 'TransitionStatus[]'
   */
  export type ListEnumTransitionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransitionStatus[]'>
    


  /**
   * Reference to a field of type 'PriorityLevel'
   */
  export type EnumPriorityLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriorityLevel'>
    


  /**
   * Reference to a field of type 'PriorityLevel[]'
   */
  export type ListEnumPriorityLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriorityLevel[]'>
    


  /**
   * Reference to a field of type 'MilestoneStatus'
   */
  export type EnumMilestoneStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MilestoneStatus'>
    


  /**
   * Reference to a field of type 'MilestoneStatus[]'
   */
  export type ListEnumMilestoneStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MilestoneStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdTransitions?: TransitionListRelationFilter
    managedOperations?: BusinessOperationListRelationFilter
    assignedOperations?: BusinessOperationListRelationFilter
    directedOperations?: BusinessOperationListRelationFilter
    contractorPMContracts?: ContractListRelationFilter
    stakeholderOperations?: OperationStakeholderListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdTransitions?: TransitionOrderByRelationAggregateInput
    managedOperations?: BusinessOperationOrderByRelationAggregateInput
    assignedOperations?: BusinessOperationOrderByRelationAggregateInput
    directedOperations?: BusinessOperationOrderByRelationAggregateInput
    contractorPMContracts?: ContractOrderByRelationAggregateInput
    stakeholderOperations?: OperationStakeholderOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdTransitions?: TransitionListRelationFilter
    managedOperations?: BusinessOperationListRelationFilter
    assignedOperations?: BusinessOperationListRelationFilter
    directedOperations?: BusinessOperationListRelationFilter
    contractorPMContracts?: ContractListRelationFilter
    stakeholderOperations?: OperationStakeholderListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BusinessOperationWhereInput = {
    AND?: BusinessOperationWhereInput | BusinessOperationWhereInput[]
    OR?: BusinessOperationWhereInput[]
    NOT?: BusinessOperationWhereInput | BusinessOperationWhereInput[]
    id?: StringFilter<"BusinessOperation"> | string
    name?: StringFilter<"BusinessOperation"> | string
    businessFunction?: StringFilter<"BusinessOperation"> | string
    technicalDomain?: StringFilter<"BusinessOperation"> | string
    description?: StringNullableFilter<"BusinessOperation"> | string | null
    scope?: StringFilter<"BusinessOperation"> | string
    objectives?: StringFilter<"BusinessOperation"> | string
    performanceMetrics?: JsonFilter<"BusinessOperation">
    supportPeriodStart?: DateTimeFilter<"BusinessOperation"> | Date | string
    supportPeriodEnd?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentContractEnd?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentManagerId?: StringNullableFilter<"BusinessOperation"> | string | null
    governmentPMId?: StringFilter<"BusinessOperation"> | string
    directorId?: StringFilter<"BusinessOperation"> | string
    createdAt?: DateTimeFilter<"BusinessOperation"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentManager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    governmentPM?: XOR<UserScalarRelationFilter, UserWhereInput>
    director?: XOR<UserScalarRelationFilter, UserWhereInput>
    contracts?: ContractListRelationFilter
    stakeholders?: OperationStakeholderListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type BusinessOperationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    businessFunction?: SortOrder
    technicalDomain?: SortOrder
    description?: SortOrderInput | SortOrder
    scope?: SortOrder
    objectives?: SortOrder
    performanceMetrics?: SortOrder
    supportPeriodStart?: SortOrder
    supportPeriodEnd?: SortOrder
    currentContractEnd?: SortOrder
    currentManagerId?: SortOrderInput | SortOrder
    governmentPMId?: SortOrder
    directorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentManager?: UserOrderByWithRelationInput
    governmentPM?: UserOrderByWithRelationInput
    director?: UserOrderByWithRelationInput
    contracts?: ContractOrderByRelationAggregateInput
    stakeholders?: OperationStakeholderOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type BusinessOperationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BusinessOperationWhereInput | BusinessOperationWhereInput[]
    OR?: BusinessOperationWhereInput[]
    NOT?: BusinessOperationWhereInput | BusinessOperationWhereInput[]
    name?: StringFilter<"BusinessOperation"> | string
    businessFunction?: StringFilter<"BusinessOperation"> | string
    technicalDomain?: StringFilter<"BusinessOperation"> | string
    description?: StringNullableFilter<"BusinessOperation"> | string | null
    scope?: StringFilter<"BusinessOperation"> | string
    objectives?: StringFilter<"BusinessOperation"> | string
    performanceMetrics?: JsonFilter<"BusinessOperation">
    supportPeriodStart?: DateTimeFilter<"BusinessOperation"> | Date | string
    supportPeriodEnd?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentContractEnd?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentManagerId?: StringNullableFilter<"BusinessOperation"> | string | null
    governmentPMId?: StringFilter<"BusinessOperation"> | string
    directorId?: StringFilter<"BusinessOperation"> | string
    createdAt?: DateTimeFilter<"BusinessOperation"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentManager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    governmentPM?: XOR<UserScalarRelationFilter, UserWhereInput>
    director?: XOR<UserScalarRelationFilter, UserWhereInput>
    contracts?: ContractListRelationFilter
    stakeholders?: OperationStakeholderListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id">

  export type BusinessOperationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    businessFunction?: SortOrder
    technicalDomain?: SortOrder
    description?: SortOrderInput | SortOrder
    scope?: SortOrder
    objectives?: SortOrder
    performanceMetrics?: SortOrder
    supportPeriodStart?: SortOrder
    supportPeriodEnd?: SortOrder
    currentContractEnd?: SortOrder
    currentManagerId?: SortOrderInput | SortOrder
    governmentPMId?: SortOrder
    directorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BusinessOperationCountOrderByAggregateInput
    _max?: BusinessOperationMaxOrderByAggregateInput
    _min?: BusinessOperationMinOrderByAggregateInput
  }

  export type BusinessOperationScalarWhereWithAggregatesInput = {
    AND?: BusinessOperationScalarWhereWithAggregatesInput | BusinessOperationScalarWhereWithAggregatesInput[]
    OR?: BusinessOperationScalarWhereWithAggregatesInput[]
    NOT?: BusinessOperationScalarWhereWithAggregatesInput | BusinessOperationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BusinessOperation"> | string
    name?: StringWithAggregatesFilter<"BusinessOperation"> | string
    businessFunction?: StringWithAggregatesFilter<"BusinessOperation"> | string
    technicalDomain?: StringWithAggregatesFilter<"BusinessOperation"> | string
    description?: StringNullableWithAggregatesFilter<"BusinessOperation"> | string | null
    scope?: StringWithAggregatesFilter<"BusinessOperation"> | string
    objectives?: StringWithAggregatesFilter<"BusinessOperation"> | string
    performanceMetrics?: JsonWithAggregatesFilter<"BusinessOperation">
    supportPeriodStart?: DateTimeWithAggregatesFilter<"BusinessOperation"> | Date | string
    supportPeriodEnd?: DateTimeWithAggregatesFilter<"BusinessOperation"> | Date | string
    currentContractEnd?: DateTimeWithAggregatesFilter<"BusinessOperation"> | Date | string
    currentManagerId?: StringNullableWithAggregatesFilter<"BusinessOperation"> | string | null
    governmentPMId?: StringWithAggregatesFilter<"BusinessOperation"> | string
    directorId?: StringWithAggregatesFilter<"BusinessOperation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BusinessOperation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BusinessOperation"> | Date | string
  }

  export type OperationStakeholderWhereInput = {
    AND?: OperationStakeholderWhereInput | OperationStakeholderWhereInput[]
    OR?: OperationStakeholderWhereInput[]
    NOT?: OperationStakeholderWhereInput | OperationStakeholderWhereInput[]
    id?: StringFilter<"OperationStakeholder"> | string
    businessOperationId?: StringFilter<"OperationStakeholder"> | string
    userId?: StringNullableFilter<"OperationStakeholder"> | string | null
    name?: StringFilter<"OperationStakeholder"> | string
    role?: StringFilter<"OperationStakeholder"> | string
    email?: StringFilter<"OperationStakeholder"> | string
    phone?: StringNullableFilter<"OperationStakeholder"> | string | null
    organization?: StringNullableFilter<"OperationStakeholder"> | string | null
    stakeholderType?: EnumStakeholderTypeFilter<"OperationStakeholder"> | $Enums.StakeholderType
    receiveNotifications?: BoolFilter<"OperationStakeholder"> | boolean
    isActive?: BoolFilter<"OperationStakeholder"> | boolean
    createdAt?: DateTimeFilter<"OperationStakeholder"> | Date | string
    updatedAt?: DateTimeFilter<"OperationStakeholder"> | Date | string
    businessOperation?: XOR<BusinessOperationScalarRelationFilter, BusinessOperationWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type OperationStakeholderOrderByWithRelationInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    organization?: SortOrderInput | SortOrder
    stakeholderType?: SortOrder
    receiveNotifications?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    businessOperation?: BusinessOperationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type OperationStakeholderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OperationStakeholderWhereInput | OperationStakeholderWhereInput[]
    OR?: OperationStakeholderWhereInput[]
    NOT?: OperationStakeholderWhereInput | OperationStakeholderWhereInput[]
    businessOperationId?: StringFilter<"OperationStakeholder"> | string
    userId?: StringNullableFilter<"OperationStakeholder"> | string | null
    name?: StringFilter<"OperationStakeholder"> | string
    role?: StringFilter<"OperationStakeholder"> | string
    email?: StringFilter<"OperationStakeholder"> | string
    phone?: StringNullableFilter<"OperationStakeholder"> | string | null
    organization?: StringNullableFilter<"OperationStakeholder"> | string | null
    stakeholderType?: EnumStakeholderTypeFilter<"OperationStakeholder"> | $Enums.StakeholderType
    receiveNotifications?: BoolFilter<"OperationStakeholder"> | boolean
    isActive?: BoolFilter<"OperationStakeholder"> | boolean
    createdAt?: DateTimeFilter<"OperationStakeholder"> | Date | string
    updatedAt?: DateTimeFilter<"OperationStakeholder"> | Date | string
    businessOperation?: XOR<BusinessOperationScalarRelationFilter, BusinessOperationWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type OperationStakeholderOrderByWithAggregationInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    organization?: SortOrderInput | SortOrder
    stakeholderType?: SortOrder
    receiveNotifications?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OperationStakeholderCountOrderByAggregateInput
    _max?: OperationStakeholderMaxOrderByAggregateInput
    _min?: OperationStakeholderMinOrderByAggregateInput
  }

  export type OperationStakeholderScalarWhereWithAggregatesInput = {
    AND?: OperationStakeholderScalarWhereWithAggregatesInput | OperationStakeholderScalarWhereWithAggregatesInput[]
    OR?: OperationStakeholderScalarWhereWithAggregatesInput[]
    NOT?: OperationStakeholderScalarWhereWithAggregatesInput | OperationStakeholderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OperationStakeholder"> | string
    businessOperationId?: StringWithAggregatesFilter<"OperationStakeholder"> | string
    userId?: StringNullableWithAggregatesFilter<"OperationStakeholder"> | string | null
    name?: StringWithAggregatesFilter<"OperationStakeholder"> | string
    role?: StringWithAggregatesFilter<"OperationStakeholder"> | string
    email?: StringWithAggregatesFilter<"OperationStakeholder"> | string
    phone?: StringNullableWithAggregatesFilter<"OperationStakeholder"> | string | null
    organization?: StringNullableWithAggregatesFilter<"OperationStakeholder"> | string | null
    stakeholderType?: EnumStakeholderTypeWithAggregatesFilter<"OperationStakeholder"> | $Enums.StakeholderType
    receiveNotifications?: BoolWithAggregatesFilter<"OperationStakeholder"> | boolean
    isActive?: BoolWithAggregatesFilter<"OperationStakeholder"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"OperationStakeholder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OperationStakeholder"> | Date | string
  }

  export type ContractWhereInput = {
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    id?: StringFilter<"Contract"> | string
    businessOperationId?: StringFilter<"Contract"> | string
    contractName?: StringFilter<"Contract"> | string
    contractNumber?: StringFilter<"Contract"> | string
    contractorName?: StringFilter<"Contract"> | string
    contractorPMId?: StringNullableFilter<"Contract"> | string | null
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    canBeExtended?: BoolFilter<"Contract"> | boolean
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    businessOperation?: XOR<BusinessOperationScalarRelationFilter, BusinessOperationWhereInput>
    contractorPM?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    transitions?: TransitionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type ContractOrderByWithRelationInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractorName?: SortOrder
    contractorPMId?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    canBeExtended?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    businessOperation?: BusinessOperationOrderByWithRelationInput
    contractorPM?: UserOrderByWithRelationInput
    transitions?: TransitionOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type ContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    contractNumber?: string
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    businessOperationId?: StringFilter<"Contract"> | string
    contractName?: StringFilter<"Contract"> | string
    contractorName?: StringFilter<"Contract"> | string
    contractorPMId?: StringNullableFilter<"Contract"> | string | null
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    canBeExtended?: BoolFilter<"Contract"> | boolean
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    businessOperation?: XOR<BusinessOperationScalarRelationFilter, BusinessOperationWhereInput>
    contractorPM?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    transitions?: TransitionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "contractNumber">

  export type ContractOrderByWithAggregationInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractorName?: SortOrder
    contractorPMId?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    canBeExtended?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractCountOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    OR?: ContractScalarWhereWithAggregatesInput[]
    NOT?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contract"> | string
    businessOperationId?: StringWithAggregatesFilter<"Contract"> | string
    contractName?: StringWithAggregatesFilter<"Contract"> | string
    contractNumber?: StringWithAggregatesFilter<"Contract"> | string
    contractorName?: StringWithAggregatesFilter<"Contract"> | string
    contractorPMId?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    canBeExtended?: BoolWithAggregatesFilter<"Contract"> | boolean
    status?: EnumContractStatusWithAggregatesFilter<"Contract"> | $Enums.ContractStatus
    createdAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
  }

  export type TransitionWhereInput = {
    AND?: TransitionWhereInput | TransitionWhereInput[]
    OR?: TransitionWhereInput[]
    NOT?: TransitionWhereInput | TransitionWhereInput[]
    id?: StringFilter<"Transition"> | string
    contractName?: StringNullableFilter<"Transition"> | string | null
    contractNumber?: StringNullableFilter<"Transition"> | string | null
    contractId?: StringNullableFilter<"Transition"> | string | null
    name?: StringNullableFilter<"Transition"> | string | null
    startDate?: DateTimeFilter<"Transition"> | Date | string
    endDate?: DateTimeFilter<"Transition"> | Date | string
    duration?: EnumTransitionDurationFilter<"Transition"> | $Enums.TransitionDuration
    keyPersonnel?: StringNullableFilter<"Transition"> | string | null
    description?: StringNullableFilter<"Transition"> | string | null
    status?: EnumTransitionStatusFilter<"Transition"> | $Enums.TransitionStatus
    requiresContinuousService?: BoolFilter<"Transition"> | boolean
    createdBy?: StringNullableFilter<"Transition"> | string | null
    createdAt?: DateTimeFilter<"Transition"> | Date | string
    updatedAt?: DateTimeFilter<"Transition"> | Date | string
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    milestones?: MilestoneListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type TransitionOrderByWithRelationInput = {
    id?: SortOrder
    contractName?: SortOrderInput | SortOrder
    contractNumber?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    duration?: SortOrder
    keyPersonnel?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    requiresContinuousService?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contract?: ContractOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    milestones?: MilestoneOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type TransitionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    contractNumber?: string
    AND?: TransitionWhereInput | TransitionWhereInput[]
    OR?: TransitionWhereInput[]
    NOT?: TransitionWhereInput | TransitionWhereInput[]
    contractName?: StringNullableFilter<"Transition"> | string | null
    contractId?: StringNullableFilter<"Transition"> | string | null
    name?: StringNullableFilter<"Transition"> | string | null
    startDate?: DateTimeFilter<"Transition"> | Date | string
    endDate?: DateTimeFilter<"Transition"> | Date | string
    duration?: EnumTransitionDurationFilter<"Transition"> | $Enums.TransitionDuration
    keyPersonnel?: StringNullableFilter<"Transition"> | string | null
    description?: StringNullableFilter<"Transition"> | string | null
    status?: EnumTransitionStatusFilter<"Transition"> | $Enums.TransitionStatus
    requiresContinuousService?: BoolFilter<"Transition"> | boolean
    createdBy?: StringNullableFilter<"Transition"> | string | null
    createdAt?: DateTimeFilter<"Transition"> | Date | string
    updatedAt?: DateTimeFilter<"Transition"> | Date | string
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    milestones?: MilestoneListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "contractNumber">

  export type TransitionOrderByWithAggregationInput = {
    id?: SortOrder
    contractName?: SortOrderInput | SortOrder
    contractNumber?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    duration?: SortOrder
    keyPersonnel?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    requiresContinuousService?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransitionCountOrderByAggregateInput
    _max?: TransitionMaxOrderByAggregateInput
    _min?: TransitionMinOrderByAggregateInput
  }

  export type TransitionScalarWhereWithAggregatesInput = {
    AND?: TransitionScalarWhereWithAggregatesInput | TransitionScalarWhereWithAggregatesInput[]
    OR?: TransitionScalarWhereWithAggregatesInput[]
    NOT?: TransitionScalarWhereWithAggregatesInput | TransitionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transition"> | string
    contractName?: StringNullableWithAggregatesFilter<"Transition"> | string | null
    contractNumber?: StringNullableWithAggregatesFilter<"Transition"> | string | null
    contractId?: StringNullableWithAggregatesFilter<"Transition"> | string | null
    name?: StringNullableWithAggregatesFilter<"Transition"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Transition"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Transition"> | Date | string
    duration?: EnumTransitionDurationWithAggregatesFilter<"Transition"> | $Enums.TransitionDuration
    keyPersonnel?: StringNullableWithAggregatesFilter<"Transition"> | string | null
    description?: StringNullableWithAggregatesFilter<"Transition"> | string | null
    status?: EnumTransitionStatusWithAggregatesFilter<"Transition"> | $Enums.TransitionStatus
    requiresContinuousService?: BoolWithAggregatesFilter<"Transition"> | boolean
    createdBy?: StringNullableWithAggregatesFilter<"Transition"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transition"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transition"> | Date | string
  }

  export type MilestoneWhereInput = {
    AND?: MilestoneWhereInput | MilestoneWhereInput[]
    OR?: MilestoneWhereInput[]
    NOT?: MilestoneWhereInput | MilestoneWhereInput[]
    id?: StringFilter<"Milestone"> | string
    title?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    dueDate?: DateTimeFilter<"Milestone"> | Date | string
    priority?: EnumPriorityLevelFilter<"Milestone"> | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFilter<"Milestone"> | $Enums.MilestoneStatus
    transitionId?: StringFilter<"Milestone"> | string
    createdAt?: DateTimeFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string
    transition?: XOR<TransitionScalarRelationFilter, TransitionWhereInput>
    auditLogs?: AuditLogListRelationFilter
  }

  export type MilestoneOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    transitionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transition?: TransitionOrderByWithRelationInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type MilestoneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MilestoneWhereInput | MilestoneWhereInput[]
    OR?: MilestoneWhereInput[]
    NOT?: MilestoneWhereInput | MilestoneWhereInput[]
    title?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    dueDate?: DateTimeFilter<"Milestone"> | Date | string
    priority?: EnumPriorityLevelFilter<"Milestone"> | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFilter<"Milestone"> | $Enums.MilestoneStatus
    transitionId?: StringFilter<"Milestone"> | string
    createdAt?: DateTimeFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string
    transition?: XOR<TransitionScalarRelationFilter, TransitionWhereInput>
    auditLogs?: AuditLogListRelationFilter
  }, "id">

  export type MilestoneOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    transitionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MilestoneCountOrderByAggregateInput
    _max?: MilestoneMaxOrderByAggregateInput
    _min?: MilestoneMinOrderByAggregateInput
  }

  export type MilestoneScalarWhereWithAggregatesInput = {
    AND?: MilestoneScalarWhereWithAggregatesInput | MilestoneScalarWhereWithAggregatesInput[]
    OR?: MilestoneScalarWhereWithAggregatesInput[]
    NOT?: MilestoneScalarWhereWithAggregatesInput | MilestoneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Milestone"> | string
    title?: StringWithAggregatesFilter<"Milestone"> | string
    description?: StringNullableWithAggregatesFilter<"Milestone"> | string | null
    dueDate?: DateTimeWithAggregatesFilter<"Milestone"> | Date | string
    priority?: EnumPriorityLevelWithAggregatesFilter<"Milestone"> | $Enums.PriorityLevel
    status?: EnumMilestoneStatusWithAggregatesFilter<"Milestone"> | $Enums.MilestoneStatus
    transitionId?: StringWithAggregatesFilter<"Milestone"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Milestone"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    userId?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    businessOperation?: XOR<BusinessOperationNullableScalarRelationFilter, BusinessOperationWhereInput> | null
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
    transition?: XOR<TransitionNullableScalarRelationFilter, TransitionWhereInput> | null
    milestone?: XOR<MilestoneNullableScalarRelationFilter, MilestoneWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    businessOperation?: BusinessOperationOrderByWithRelationInput
    contract?: ContractOrderByWithRelationInput
    transition?: TransitionOrderByWithRelationInput
    milestone?: MilestoneOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    userId?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    businessOperation?: XOR<BusinessOperationNullableScalarRelationFilter, BusinessOperationWhereInput> | null
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
    transition?: XOR<TransitionNullableScalarRelationFilter, TransitionWhereInput> | null
    milestone?: XOR<MilestoneNullableScalarRelationFilter, MilestoneWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    entityType?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionUncheckedCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractUncheckedCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUncheckedUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUncheckedUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessOperationCreateInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentManager?: UserCreateNestedOneWithoutManagedOperationsInput
    governmentPM: UserCreateNestedOneWithoutAssignedOperationsInput
    director: UserCreateNestedOneWithoutDirectedOperationsInput
    contracts?: ContractCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUncheckedCreateInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    governmentPMId: string
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderUncheckedCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManager?: UserUpdateOneWithoutManagedOperationsNestedInput
    governmentPM?: UserUpdateOneRequiredWithoutAssignedOperationsNestedInput
    director?: UserUpdateOneRequiredWithoutDirectedOperationsNestedInput
    contracts?: ContractUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    governmentPMId?: StringFieldUpdateOperationsInput | string
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationCreateManyInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    governmentPMId: string
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessOperationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessOperationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    governmentPMId?: StringFieldUpdateOperationsInput | string
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationStakeholderCreateInput = {
    id?: string
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businessOperation: BusinessOperationCreateNestedOneWithoutStakeholdersInput
    user?: UserCreateNestedOneWithoutStakeholderOperationsInput
  }

  export type OperationStakeholderUncheckedCreateInput = {
    id?: string
    businessOperationId: string
    userId?: string | null
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationStakeholderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessOperation?: BusinessOperationUpdateOneRequiredWithoutStakeholdersNestedInput
    user?: UserUpdateOneWithoutStakeholderOperationsNestedInput
  }

  export type OperationStakeholderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationStakeholderCreateManyInput = {
    id?: string
    businessOperationId: string
    userId?: string | null
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationStakeholderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationStakeholderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateInput = {
    id?: string
    contractName: string
    contractNumber: string
    contractorName: string
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    businessOperation: BusinessOperationCreateNestedOneWithoutContractsInput
    contractorPM?: UserCreateNestedOneWithoutContractorPMContractsInput
    transitions?: TransitionCreateNestedManyWithoutContractInput
    auditLogs?: AuditLogCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateInput = {
    id?: string
    businessOperationId: string
    contractName: string
    contractNumber: string
    contractorName: string
    contractorPMId?: string | null
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transitions?: TransitionUncheckedCreateNestedManyWithoutContractInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessOperation?: BusinessOperationUpdateOneRequiredWithoutContractsNestedInput
    contractorPM?: UserUpdateOneWithoutContractorPMContractsNestedInput
    transitions?: TransitionUpdateManyWithoutContractNestedInput
    auditLogs?: AuditLogUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    contractorPMId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transitions?: TransitionUncheckedUpdateManyWithoutContractNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractCreateManyInput = {
    id?: string
    businessOperationId: string
    contractName: string
    contractNumber: string
    contractorName: string
    contractorPMId?: string | null
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    contractorPMId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransitionCreateInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contract?: ContractCreateNestedOneWithoutTransitionsInput
    creator?: UserCreateNestedOneWithoutCreatedTransitionsInput
    milestones?: MilestoneCreateNestedManyWithoutTransitionInput
    auditLogs?: AuditLogCreateNestedManyWithoutTransitionInput
  }

  export type TransitionUncheckedCreateInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    contractId?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneUncheckedCreateNestedManyWithoutTransitionInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTransitionInput
  }

  export type TransitionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneWithoutTransitionsNestedInput
    creator?: UserUpdateOneWithoutCreatedTransitionsNestedInput
    milestones?: MilestoneUpdateManyWithoutTransitionNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUncheckedUpdateManyWithoutTransitionNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionCreateManyInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    contractId?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransitionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransitionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilestoneCreateInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transition: TransitionCreateNestedOneWithoutMilestonesInput
    auditLogs?: AuditLogCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    transitionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transition?: TransitionUpdateOneRequiredWithoutMilestonesNestedInput
    auditLogs?: AuditLogUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    transitionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    transitionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MilestoneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilestoneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    transitionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    businessOperation?: BusinessOperationCreateNestedOneWithoutAuditLogsInput
    contract?: ContractCreateNestedOneWithoutAuditLogsInput
    transition?: TransitionCreateNestedOneWithoutAuditLogsInput
    milestone?: MilestoneCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    businessOperation?: BusinessOperationUpdateOneWithoutAuditLogsNestedInput
    contract?: ContractUpdateOneWithoutAuditLogsNestedInput
    transition?: TransitionUpdateOneWithoutAuditLogsNestedInput
    milestone?: MilestoneUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TransitionListRelationFilter = {
    every?: TransitionWhereInput
    some?: TransitionWhereInput
    none?: TransitionWhereInput
  }

  export type BusinessOperationListRelationFilter = {
    every?: BusinessOperationWhereInput
    some?: BusinessOperationWhereInput
    none?: BusinessOperationWhereInput
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type OperationStakeholderListRelationFilter = {
    every?: OperationStakeholderWhereInput
    some?: OperationStakeholderWhereInput
    none?: OperationStakeholderWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type TransitionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BusinessOperationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperationStakeholderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BusinessOperationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    businessFunction?: SortOrder
    technicalDomain?: SortOrder
    description?: SortOrder
    scope?: SortOrder
    objectives?: SortOrder
    performanceMetrics?: SortOrder
    supportPeriodStart?: SortOrder
    supportPeriodEnd?: SortOrder
    currentContractEnd?: SortOrder
    currentManagerId?: SortOrder
    governmentPMId?: SortOrder
    directorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BusinessOperationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    businessFunction?: SortOrder
    technicalDomain?: SortOrder
    description?: SortOrder
    scope?: SortOrder
    objectives?: SortOrder
    supportPeriodStart?: SortOrder
    supportPeriodEnd?: SortOrder
    currentContractEnd?: SortOrder
    currentManagerId?: SortOrder
    governmentPMId?: SortOrder
    directorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BusinessOperationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    businessFunction?: SortOrder
    technicalDomain?: SortOrder
    description?: SortOrder
    scope?: SortOrder
    objectives?: SortOrder
    supportPeriodStart?: SortOrder
    supportPeriodEnd?: SortOrder
    currentContractEnd?: SortOrder
    currentManagerId?: SortOrder
    governmentPMId?: SortOrder
    directorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumStakeholderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StakeholderType | EnumStakeholderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStakeholderTypeFilter<$PrismaModel> | $Enums.StakeholderType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BusinessOperationScalarRelationFilter = {
    is?: BusinessOperationWhereInput
    isNot?: BusinessOperationWhereInput
  }

  export type OperationStakeholderCountOrderByAggregateInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    organization?: SortOrder
    stakeholderType?: SortOrder
    receiveNotifications?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperationStakeholderMaxOrderByAggregateInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    organization?: SortOrder
    stakeholderType?: SortOrder
    receiveNotifications?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperationStakeholderMinOrderByAggregateInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    organization?: SortOrder
    stakeholderType?: SortOrder
    receiveNotifications?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStakeholderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StakeholderType | EnumStakeholderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStakeholderTypeWithAggregatesFilter<$PrismaModel> | $Enums.StakeholderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStakeholderTypeFilter<$PrismaModel>
    _max?: NestedEnumStakeholderTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type ContractCountOrderByAggregateInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractorName?: SortOrder
    contractorPMId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    canBeExtended?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractorName?: SortOrder
    contractorPMId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    canBeExtended?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    id?: SortOrder
    businessOperationId?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractorName?: SortOrder
    contractorPMId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    canBeExtended?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type EnumTransitionDurationFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionDuration | EnumTransitionDurationFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionDurationFilter<$PrismaModel> | $Enums.TransitionDuration
  }

  export type EnumTransitionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionStatus | EnumTransitionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionStatusFilter<$PrismaModel> | $Enums.TransitionStatus
  }

  export type ContractNullableScalarRelationFilter = {
    is?: ContractWhereInput | null
    isNot?: ContractWhereInput | null
  }

  export type MilestoneListRelationFilter = {
    every?: MilestoneWhereInput
    some?: MilestoneWhereInput
    none?: MilestoneWhereInput
  }

  export type MilestoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransitionCountOrderByAggregateInput = {
    id?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    duration?: SortOrder
    keyPersonnel?: SortOrder
    description?: SortOrder
    status?: SortOrder
    requiresContinuousService?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransitionMaxOrderByAggregateInput = {
    id?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    duration?: SortOrder
    keyPersonnel?: SortOrder
    description?: SortOrder
    status?: SortOrder
    requiresContinuousService?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransitionMinOrderByAggregateInput = {
    id?: SortOrder
    contractName?: SortOrder
    contractNumber?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    duration?: SortOrder
    keyPersonnel?: SortOrder
    description?: SortOrder
    status?: SortOrder
    requiresContinuousService?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTransitionDurationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionDuration | EnumTransitionDurationFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionDurationWithAggregatesFilter<$PrismaModel> | $Enums.TransitionDuration
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransitionDurationFilter<$PrismaModel>
    _max?: NestedEnumTransitionDurationFilter<$PrismaModel>
  }

  export type EnumTransitionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionStatus | EnumTransitionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransitionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransitionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransitionStatusFilter<$PrismaModel>
  }

  export type EnumPriorityLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityLevel | EnumPriorityLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityLevelFilter<$PrismaModel> | $Enums.PriorityLevel
  }

  export type EnumMilestoneStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MilestoneStatus | EnumMilestoneStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMilestoneStatusFilter<$PrismaModel> | $Enums.MilestoneStatus
  }

  export type TransitionScalarRelationFilter = {
    is?: TransitionWhereInput
    isNot?: TransitionWhereInput
  }

  export type MilestoneCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    transitionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MilestoneMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    transitionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MilestoneMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    transitionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPriorityLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityLevel | EnumPriorityLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityLevelWithAggregatesFilter<$PrismaModel> | $Enums.PriorityLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityLevelFilter<$PrismaModel>
    _max?: NestedEnumPriorityLevelFilter<$PrismaModel>
  }

  export type EnumMilestoneStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MilestoneStatus | EnumMilestoneStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMilestoneStatusWithAggregatesFilter<$PrismaModel> | $Enums.MilestoneStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMilestoneStatusFilter<$PrismaModel>
    _max?: NestedEnumMilestoneStatusFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BusinessOperationNullableScalarRelationFilter = {
    is?: BusinessOperationWhereInput | null
    isNot?: BusinessOperationWhereInput | null
  }

  export type TransitionNullableScalarRelationFilter = {
    is?: TransitionWhereInput | null
    isNot?: TransitionWhereInput | null
  }

  export type MilestoneNullableScalarRelationFilter = {
    is?: MilestoneWhereInput | null
    isNot?: MilestoneWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type TransitionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TransitionCreateWithoutCreatorInput, TransitionUncheckedCreateWithoutCreatorInput> | TransitionCreateWithoutCreatorInput[] | TransitionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutCreatorInput | TransitionCreateOrConnectWithoutCreatorInput[]
    createMany?: TransitionCreateManyCreatorInputEnvelope
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
  }

  export type BusinessOperationCreateNestedManyWithoutCurrentManagerInput = {
    create?: XOR<BusinessOperationCreateWithoutCurrentManagerInput, BusinessOperationUncheckedCreateWithoutCurrentManagerInput> | BusinessOperationCreateWithoutCurrentManagerInput[] | BusinessOperationUncheckedCreateWithoutCurrentManagerInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutCurrentManagerInput | BusinessOperationCreateOrConnectWithoutCurrentManagerInput[]
    createMany?: BusinessOperationCreateManyCurrentManagerInputEnvelope
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
  }

  export type BusinessOperationCreateNestedManyWithoutGovernmentPMInput = {
    create?: XOR<BusinessOperationCreateWithoutGovernmentPMInput, BusinessOperationUncheckedCreateWithoutGovernmentPMInput> | BusinessOperationCreateWithoutGovernmentPMInput[] | BusinessOperationUncheckedCreateWithoutGovernmentPMInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutGovernmentPMInput | BusinessOperationCreateOrConnectWithoutGovernmentPMInput[]
    createMany?: BusinessOperationCreateManyGovernmentPMInputEnvelope
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
  }

  export type BusinessOperationCreateNestedManyWithoutDirectorInput = {
    create?: XOR<BusinessOperationCreateWithoutDirectorInput, BusinessOperationUncheckedCreateWithoutDirectorInput> | BusinessOperationCreateWithoutDirectorInput[] | BusinessOperationUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutDirectorInput | BusinessOperationCreateOrConnectWithoutDirectorInput[]
    createMany?: BusinessOperationCreateManyDirectorInputEnvelope
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutContractorPMInput = {
    create?: XOR<ContractCreateWithoutContractorPMInput, ContractUncheckedCreateWithoutContractorPMInput> | ContractCreateWithoutContractorPMInput[] | ContractUncheckedCreateWithoutContractorPMInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorPMInput | ContractCreateOrConnectWithoutContractorPMInput[]
    createMany?: ContractCreateManyContractorPMInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type OperationStakeholderCreateNestedManyWithoutUserInput = {
    create?: XOR<OperationStakeholderCreateWithoutUserInput, OperationStakeholderUncheckedCreateWithoutUserInput> | OperationStakeholderCreateWithoutUserInput[] | OperationStakeholderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutUserInput | OperationStakeholderCreateOrConnectWithoutUserInput[]
    createMany?: OperationStakeholderCreateManyUserInputEnvelope
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type TransitionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TransitionCreateWithoutCreatorInput, TransitionUncheckedCreateWithoutCreatorInput> | TransitionCreateWithoutCreatorInput[] | TransitionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutCreatorInput | TransitionCreateOrConnectWithoutCreatorInput[]
    createMany?: TransitionCreateManyCreatorInputEnvelope
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
  }

  export type BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput = {
    create?: XOR<BusinessOperationCreateWithoutCurrentManagerInput, BusinessOperationUncheckedCreateWithoutCurrentManagerInput> | BusinessOperationCreateWithoutCurrentManagerInput[] | BusinessOperationUncheckedCreateWithoutCurrentManagerInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutCurrentManagerInput | BusinessOperationCreateOrConnectWithoutCurrentManagerInput[]
    createMany?: BusinessOperationCreateManyCurrentManagerInputEnvelope
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
  }

  export type BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput = {
    create?: XOR<BusinessOperationCreateWithoutGovernmentPMInput, BusinessOperationUncheckedCreateWithoutGovernmentPMInput> | BusinessOperationCreateWithoutGovernmentPMInput[] | BusinessOperationUncheckedCreateWithoutGovernmentPMInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutGovernmentPMInput | BusinessOperationCreateOrConnectWithoutGovernmentPMInput[]
    createMany?: BusinessOperationCreateManyGovernmentPMInputEnvelope
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
  }

  export type BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput = {
    create?: XOR<BusinessOperationCreateWithoutDirectorInput, BusinessOperationUncheckedCreateWithoutDirectorInput> | BusinessOperationCreateWithoutDirectorInput[] | BusinessOperationUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutDirectorInput | BusinessOperationCreateOrConnectWithoutDirectorInput[]
    createMany?: BusinessOperationCreateManyDirectorInputEnvelope
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutContractorPMInput = {
    create?: XOR<ContractCreateWithoutContractorPMInput, ContractUncheckedCreateWithoutContractorPMInput> | ContractCreateWithoutContractorPMInput[] | ContractUncheckedCreateWithoutContractorPMInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorPMInput | ContractCreateOrConnectWithoutContractorPMInput[]
    createMany?: ContractCreateManyContractorPMInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type OperationStakeholderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OperationStakeholderCreateWithoutUserInput, OperationStakeholderUncheckedCreateWithoutUserInput> | OperationStakeholderCreateWithoutUserInput[] | OperationStakeholderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutUserInput | OperationStakeholderCreateOrConnectWithoutUserInput[]
    createMany?: OperationStakeholderCreateManyUserInputEnvelope
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TransitionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TransitionCreateWithoutCreatorInput, TransitionUncheckedCreateWithoutCreatorInput> | TransitionCreateWithoutCreatorInput[] | TransitionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutCreatorInput | TransitionCreateOrConnectWithoutCreatorInput[]
    upsert?: TransitionUpsertWithWhereUniqueWithoutCreatorInput | TransitionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TransitionCreateManyCreatorInputEnvelope
    set?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    disconnect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    delete?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    update?: TransitionUpdateWithWhereUniqueWithoutCreatorInput | TransitionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TransitionUpdateManyWithWhereWithoutCreatorInput | TransitionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TransitionScalarWhereInput | TransitionScalarWhereInput[]
  }

  export type BusinessOperationUpdateManyWithoutCurrentManagerNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutCurrentManagerInput, BusinessOperationUncheckedCreateWithoutCurrentManagerInput> | BusinessOperationCreateWithoutCurrentManagerInput[] | BusinessOperationUncheckedCreateWithoutCurrentManagerInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutCurrentManagerInput | BusinessOperationCreateOrConnectWithoutCurrentManagerInput[]
    upsert?: BusinessOperationUpsertWithWhereUniqueWithoutCurrentManagerInput | BusinessOperationUpsertWithWhereUniqueWithoutCurrentManagerInput[]
    createMany?: BusinessOperationCreateManyCurrentManagerInputEnvelope
    set?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    disconnect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    delete?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    update?: BusinessOperationUpdateWithWhereUniqueWithoutCurrentManagerInput | BusinessOperationUpdateWithWhereUniqueWithoutCurrentManagerInput[]
    updateMany?: BusinessOperationUpdateManyWithWhereWithoutCurrentManagerInput | BusinessOperationUpdateManyWithWhereWithoutCurrentManagerInput[]
    deleteMany?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
  }

  export type BusinessOperationUpdateManyWithoutGovernmentPMNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutGovernmentPMInput, BusinessOperationUncheckedCreateWithoutGovernmentPMInput> | BusinessOperationCreateWithoutGovernmentPMInput[] | BusinessOperationUncheckedCreateWithoutGovernmentPMInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutGovernmentPMInput | BusinessOperationCreateOrConnectWithoutGovernmentPMInput[]
    upsert?: BusinessOperationUpsertWithWhereUniqueWithoutGovernmentPMInput | BusinessOperationUpsertWithWhereUniqueWithoutGovernmentPMInput[]
    createMany?: BusinessOperationCreateManyGovernmentPMInputEnvelope
    set?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    disconnect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    delete?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    update?: BusinessOperationUpdateWithWhereUniqueWithoutGovernmentPMInput | BusinessOperationUpdateWithWhereUniqueWithoutGovernmentPMInput[]
    updateMany?: BusinessOperationUpdateManyWithWhereWithoutGovernmentPMInput | BusinessOperationUpdateManyWithWhereWithoutGovernmentPMInput[]
    deleteMany?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
  }

  export type BusinessOperationUpdateManyWithoutDirectorNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutDirectorInput, BusinessOperationUncheckedCreateWithoutDirectorInput> | BusinessOperationCreateWithoutDirectorInput[] | BusinessOperationUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutDirectorInput | BusinessOperationCreateOrConnectWithoutDirectorInput[]
    upsert?: BusinessOperationUpsertWithWhereUniqueWithoutDirectorInput | BusinessOperationUpsertWithWhereUniqueWithoutDirectorInput[]
    createMany?: BusinessOperationCreateManyDirectorInputEnvelope
    set?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    disconnect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    delete?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    update?: BusinessOperationUpdateWithWhereUniqueWithoutDirectorInput | BusinessOperationUpdateWithWhereUniqueWithoutDirectorInput[]
    updateMany?: BusinessOperationUpdateManyWithWhereWithoutDirectorInput | BusinessOperationUpdateManyWithWhereWithoutDirectorInput[]
    deleteMany?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutContractorPMNestedInput = {
    create?: XOR<ContractCreateWithoutContractorPMInput, ContractUncheckedCreateWithoutContractorPMInput> | ContractCreateWithoutContractorPMInput[] | ContractUncheckedCreateWithoutContractorPMInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorPMInput | ContractCreateOrConnectWithoutContractorPMInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutContractorPMInput | ContractUpsertWithWhereUniqueWithoutContractorPMInput[]
    createMany?: ContractCreateManyContractorPMInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutContractorPMInput | ContractUpdateWithWhereUniqueWithoutContractorPMInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutContractorPMInput | ContractUpdateManyWithWhereWithoutContractorPMInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type OperationStakeholderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperationStakeholderCreateWithoutUserInput, OperationStakeholderUncheckedCreateWithoutUserInput> | OperationStakeholderCreateWithoutUserInput[] | OperationStakeholderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutUserInput | OperationStakeholderCreateOrConnectWithoutUserInput[]
    upsert?: OperationStakeholderUpsertWithWhereUniqueWithoutUserInput | OperationStakeholderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OperationStakeholderCreateManyUserInputEnvelope
    set?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    disconnect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    delete?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    update?: OperationStakeholderUpdateWithWhereUniqueWithoutUserInput | OperationStakeholderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperationStakeholderUpdateManyWithWhereWithoutUserInput | OperationStakeholderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperationStakeholderScalarWhereInput | OperationStakeholderScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type TransitionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TransitionCreateWithoutCreatorInput, TransitionUncheckedCreateWithoutCreatorInput> | TransitionCreateWithoutCreatorInput[] | TransitionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutCreatorInput | TransitionCreateOrConnectWithoutCreatorInput[]
    upsert?: TransitionUpsertWithWhereUniqueWithoutCreatorInput | TransitionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TransitionCreateManyCreatorInputEnvelope
    set?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    disconnect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    delete?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    update?: TransitionUpdateWithWhereUniqueWithoutCreatorInput | TransitionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TransitionUpdateManyWithWhereWithoutCreatorInput | TransitionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TransitionScalarWhereInput | TransitionScalarWhereInput[]
  }

  export type BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutCurrentManagerInput, BusinessOperationUncheckedCreateWithoutCurrentManagerInput> | BusinessOperationCreateWithoutCurrentManagerInput[] | BusinessOperationUncheckedCreateWithoutCurrentManagerInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutCurrentManagerInput | BusinessOperationCreateOrConnectWithoutCurrentManagerInput[]
    upsert?: BusinessOperationUpsertWithWhereUniqueWithoutCurrentManagerInput | BusinessOperationUpsertWithWhereUniqueWithoutCurrentManagerInput[]
    createMany?: BusinessOperationCreateManyCurrentManagerInputEnvelope
    set?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    disconnect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    delete?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    update?: BusinessOperationUpdateWithWhereUniqueWithoutCurrentManagerInput | BusinessOperationUpdateWithWhereUniqueWithoutCurrentManagerInput[]
    updateMany?: BusinessOperationUpdateManyWithWhereWithoutCurrentManagerInput | BusinessOperationUpdateManyWithWhereWithoutCurrentManagerInput[]
    deleteMany?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
  }

  export type BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutGovernmentPMInput, BusinessOperationUncheckedCreateWithoutGovernmentPMInput> | BusinessOperationCreateWithoutGovernmentPMInput[] | BusinessOperationUncheckedCreateWithoutGovernmentPMInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutGovernmentPMInput | BusinessOperationCreateOrConnectWithoutGovernmentPMInput[]
    upsert?: BusinessOperationUpsertWithWhereUniqueWithoutGovernmentPMInput | BusinessOperationUpsertWithWhereUniqueWithoutGovernmentPMInput[]
    createMany?: BusinessOperationCreateManyGovernmentPMInputEnvelope
    set?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    disconnect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    delete?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    update?: BusinessOperationUpdateWithWhereUniqueWithoutGovernmentPMInput | BusinessOperationUpdateWithWhereUniqueWithoutGovernmentPMInput[]
    updateMany?: BusinessOperationUpdateManyWithWhereWithoutGovernmentPMInput | BusinessOperationUpdateManyWithWhereWithoutGovernmentPMInput[]
    deleteMany?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
  }

  export type BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutDirectorInput, BusinessOperationUncheckedCreateWithoutDirectorInput> | BusinessOperationCreateWithoutDirectorInput[] | BusinessOperationUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutDirectorInput | BusinessOperationCreateOrConnectWithoutDirectorInput[]
    upsert?: BusinessOperationUpsertWithWhereUniqueWithoutDirectorInput | BusinessOperationUpsertWithWhereUniqueWithoutDirectorInput[]
    createMany?: BusinessOperationCreateManyDirectorInputEnvelope
    set?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    disconnect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    delete?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    connect?: BusinessOperationWhereUniqueInput | BusinessOperationWhereUniqueInput[]
    update?: BusinessOperationUpdateWithWhereUniqueWithoutDirectorInput | BusinessOperationUpdateWithWhereUniqueWithoutDirectorInput[]
    updateMany?: BusinessOperationUpdateManyWithWhereWithoutDirectorInput | BusinessOperationUpdateManyWithWhereWithoutDirectorInput[]
    deleteMany?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutContractorPMNestedInput = {
    create?: XOR<ContractCreateWithoutContractorPMInput, ContractUncheckedCreateWithoutContractorPMInput> | ContractCreateWithoutContractorPMInput[] | ContractUncheckedCreateWithoutContractorPMInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutContractorPMInput | ContractCreateOrConnectWithoutContractorPMInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutContractorPMInput | ContractUpsertWithWhereUniqueWithoutContractorPMInput[]
    createMany?: ContractCreateManyContractorPMInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutContractorPMInput | ContractUpdateWithWhereUniqueWithoutContractorPMInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutContractorPMInput | ContractUpdateManyWithWhereWithoutContractorPMInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperationStakeholderCreateWithoutUserInput, OperationStakeholderUncheckedCreateWithoutUserInput> | OperationStakeholderCreateWithoutUserInput[] | OperationStakeholderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutUserInput | OperationStakeholderCreateOrConnectWithoutUserInput[]
    upsert?: OperationStakeholderUpsertWithWhereUniqueWithoutUserInput | OperationStakeholderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OperationStakeholderCreateManyUserInputEnvelope
    set?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    disconnect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    delete?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    update?: OperationStakeholderUpdateWithWhereUniqueWithoutUserInput | OperationStakeholderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperationStakeholderUpdateManyWithWhereWithoutUserInput | OperationStakeholderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperationStakeholderScalarWhereInput | OperationStakeholderScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutManagedOperationsInput = {
    create?: XOR<UserCreateWithoutManagedOperationsInput, UserUncheckedCreateWithoutManagedOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedOperationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedOperationsInput = {
    create?: XOR<UserCreateWithoutAssignedOperationsInput, UserUncheckedCreateWithoutAssignedOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedOperationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDirectedOperationsInput = {
    create?: XOR<UserCreateWithoutDirectedOperationsInput, UserUncheckedCreateWithoutDirectedOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectedOperationsInput
    connect?: UserWhereUniqueInput
  }

  export type ContractCreateNestedManyWithoutBusinessOperationInput = {
    create?: XOR<ContractCreateWithoutBusinessOperationInput, ContractUncheckedCreateWithoutBusinessOperationInput> | ContractCreateWithoutBusinessOperationInput[] | ContractUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutBusinessOperationInput | ContractCreateOrConnectWithoutBusinessOperationInput[]
    createMany?: ContractCreateManyBusinessOperationInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type OperationStakeholderCreateNestedManyWithoutBusinessOperationInput = {
    create?: XOR<OperationStakeholderCreateWithoutBusinessOperationInput, OperationStakeholderUncheckedCreateWithoutBusinessOperationInput> | OperationStakeholderCreateWithoutBusinessOperationInput[] | OperationStakeholderUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutBusinessOperationInput | OperationStakeholderCreateOrConnectWithoutBusinessOperationInput[]
    createMany?: OperationStakeholderCreateManyBusinessOperationInputEnvelope
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutBusinessOperationInput = {
    create?: XOR<AuditLogCreateWithoutBusinessOperationInput, AuditLogUncheckedCreateWithoutBusinessOperationInput> | AuditLogCreateWithoutBusinessOperationInput[] | AuditLogUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessOperationInput | AuditLogCreateOrConnectWithoutBusinessOperationInput[]
    createMany?: AuditLogCreateManyBusinessOperationInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutBusinessOperationInput = {
    create?: XOR<ContractCreateWithoutBusinessOperationInput, ContractUncheckedCreateWithoutBusinessOperationInput> | ContractCreateWithoutBusinessOperationInput[] | ContractUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutBusinessOperationInput | ContractCreateOrConnectWithoutBusinessOperationInput[]
    createMany?: ContractCreateManyBusinessOperationInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type OperationStakeholderUncheckedCreateNestedManyWithoutBusinessOperationInput = {
    create?: XOR<OperationStakeholderCreateWithoutBusinessOperationInput, OperationStakeholderUncheckedCreateWithoutBusinessOperationInput> | OperationStakeholderCreateWithoutBusinessOperationInput[] | OperationStakeholderUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutBusinessOperationInput | OperationStakeholderCreateOrConnectWithoutBusinessOperationInput[]
    createMany?: OperationStakeholderCreateManyBusinessOperationInputEnvelope
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutBusinessOperationInput = {
    create?: XOR<AuditLogCreateWithoutBusinessOperationInput, AuditLogUncheckedCreateWithoutBusinessOperationInput> | AuditLogCreateWithoutBusinessOperationInput[] | AuditLogUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessOperationInput | AuditLogCreateOrConnectWithoutBusinessOperationInput[]
    createMany?: AuditLogCreateManyBusinessOperationInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutManagedOperationsNestedInput = {
    create?: XOR<UserCreateWithoutManagedOperationsInput, UserUncheckedCreateWithoutManagedOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedOperationsInput
    upsert?: UserUpsertWithoutManagedOperationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagedOperationsInput, UserUpdateWithoutManagedOperationsInput>, UserUncheckedUpdateWithoutManagedOperationsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedOperationsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedOperationsInput, UserUncheckedCreateWithoutAssignedOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedOperationsInput
    upsert?: UserUpsertWithoutAssignedOperationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedOperationsInput, UserUpdateWithoutAssignedOperationsInput>, UserUncheckedUpdateWithoutAssignedOperationsInput>
  }

  export type UserUpdateOneRequiredWithoutDirectedOperationsNestedInput = {
    create?: XOR<UserCreateWithoutDirectedOperationsInput, UserUncheckedCreateWithoutDirectedOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectedOperationsInput
    upsert?: UserUpsertWithoutDirectedOperationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDirectedOperationsInput, UserUpdateWithoutDirectedOperationsInput>, UserUncheckedUpdateWithoutDirectedOperationsInput>
  }

  export type ContractUpdateManyWithoutBusinessOperationNestedInput = {
    create?: XOR<ContractCreateWithoutBusinessOperationInput, ContractUncheckedCreateWithoutBusinessOperationInput> | ContractCreateWithoutBusinessOperationInput[] | ContractUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutBusinessOperationInput | ContractCreateOrConnectWithoutBusinessOperationInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutBusinessOperationInput | ContractUpsertWithWhereUniqueWithoutBusinessOperationInput[]
    createMany?: ContractCreateManyBusinessOperationInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutBusinessOperationInput | ContractUpdateWithWhereUniqueWithoutBusinessOperationInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutBusinessOperationInput | ContractUpdateManyWithWhereWithoutBusinessOperationInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type OperationStakeholderUpdateManyWithoutBusinessOperationNestedInput = {
    create?: XOR<OperationStakeholderCreateWithoutBusinessOperationInput, OperationStakeholderUncheckedCreateWithoutBusinessOperationInput> | OperationStakeholderCreateWithoutBusinessOperationInput[] | OperationStakeholderUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutBusinessOperationInput | OperationStakeholderCreateOrConnectWithoutBusinessOperationInput[]
    upsert?: OperationStakeholderUpsertWithWhereUniqueWithoutBusinessOperationInput | OperationStakeholderUpsertWithWhereUniqueWithoutBusinessOperationInput[]
    createMany?: OperationStakeholderCreateManyBusinessOperationInputEnvelope
    set?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    disconnect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    delete?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    update?: OperationStakeholderUpdateWithWhereUniqueWithoutBusinessOperationInput | OperationStakeholderUpdateWithWhereUniqueWithoutBusinessOperationInput[]
    updateMany?: OperationStakeholderUpdateManyWithWhereWithoutBusinessOperationInput | OperationStakeholderUpdateManyWithWhereWithoutBusinessOperationInput[]
    deleteMany?: OperationStakeholderScalarWhereInput | OperationStakeholderScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutBusinessOperationNestedInput = {
    create?: XOR<AuditLogCreateWithoutBusinessOperationInput, AuditLogUncheckedCreateWithoutBusinessOperationInput> | AuditLogCreateWithoutBusinessOperationInput[] | AuditLogUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessOperationInput | AuditLogCreateOrConnectWithoutBusinessOperationInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutBusinessOperationInput | AuditLogUpsertWithWhereUniqueWithoutBusinessOperationInput[]
    createMany?: AuditLogCreateManyBusinessOperationInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutBusinessOperationInput | AuditLogUpdateWithWhereUniqueWithoutBusinessOperationInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutBusinessOperationInput | AuditLogUpdateManyWithWhereWithoutBusinessOperationInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutBusinessOperationNestedInput = {
    create?: XOR<ContractCreateWithoutBusinessOperationInput, ContractUncheckedCreateWithoutBusinessOperationInput> | ContractCreateWithoutBusinessOperationInput[] | ContractUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutBusinessOperationInput | ContractCreateOrConnectWithoutBusinessOperationInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutBusinessOperationInput | ContractUpsertWithWhereUniqueWithoutBusinessOperationInput[]
    createMany?: ContractCreateManyBusinessOperationInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutBusinessOperationInput | ContractUpdateWithWhereUniqueWithoutBusinessOperationInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutBusinessOperationInput | ContractUpdateManyWithWhereWithoutBusinessOperationInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationNestedInput = {
    create?: XOR<OperationStakeholderCreateWithoutBusinessOperationInput, OperationStakeholderUncheckedCreateWithoutBusinessOperationInput> | OperationStakeholderCreateWithoutBusinessOperationInput[] | OperationStakeholderUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: OperationStakeholderCreateOrConnectWithoutBusinessOperationInput | OperationStakeholderCreateOrConnectWithoutBusinessOperationInput[]
    upsert?: OperationStakeholderUpsertWithWhereUniqueWithoutBusinessOperationInput | OperationStakeholderUpsertWithWhereUniqueWithoutBusinessOperationInput[]
    createMany?: OperationStakeholderCreateManyBusinessOperationInputEnvelope
    set?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    disconnect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    delete?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    connect?: OperationStakeholderWhereUniqueInput | OperationStakeholderWhereUniqueInput[]
    update?: OperationStakeholderUpdateWithWhereUniqueWithoutBusinessOperationInput | OperationStakeholderUpdateWithWhereUniqueWithoutBusinessOperationInput[]
    updateMany?: OperationStakeholderUpdateManyWithWhereWithoutBusinessOperationInput | OperationStakeholderUpdateManyWithWhereWithoutBusinessOperationInput[]
    deleteMany?: OperationStakeholderScalarWhereInput | OperationStakeholderScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutBusinessOperationNestedInput = {
    create?: XOR<AuditLogCreateWithoutBusinessOperationInput, AuditLogUncheckedCreateWithoutBusinessOperationInput> | AuditLogCreateWithoutBusinessOperationInput[] | AuditLogUncheckedCreateWithoutBusinessOperationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessOperationInput | AuditLogCreateOrConnectWithoutBusinessOperationInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutBusinessOperationInput | AuditLogUpsertWithWhereUniqueWithoutBusinessOperationInput[]
    createMany?: AuditLogCreateManyBusinessOperationInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutBusinessOperationInput | AuditLogUpdateWithWhereUniqueWithoutBusinessOperationInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutBusinessOperationInput | AuditLogUpdateManyWithWhereWithoutBusinessOperationInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type BusinessOperationCreateNestedOneWithoutStakeholdersInput = {
    create?: XOR<BusinessOperationCreateWithoutStakeholdersInput, BusinessOperationUncheckedCreateWithoutStakeholdersInput>
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutStakeholdersInput
    connect?: BusinessOperationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStakeholderOperationsInput = {
    create?: XOR<UserCreateWithoutStakeholderOperationsInput, UserUncheckedCreateWithoutStakeholderOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStakeholderOperationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStakeholderTypeFieldUpdateOperationsInput = {
    set?: $Enums.StakeholderType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BusinessOperationUpdateOneRequiredWithoutStakeholdersNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutStakeholdersInput, BusinessOperationUncheckedCreateWithoutStakeholdersInput>
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutStakeholdersInput
    upsert?: BusinessOperationUpsertWithoutStakeholdersInput
    connect?: BusinessOperationWhereUniqueInput
    update?: XOR<XOR<BusinessOperationUpdateToOneWithWhereWithoutStakeholdersInput, BusinessOperationUpdateWithoutStakeholdersInput>, BusinessOperationUncheckedUpdateWithoutStakeholdersInput>
  }

  export type UserUpdateOneWithoutStakeholderOperationsNestedInput = {
    create?: XOR<UserCreateWithoutStakeholderOperationsInput, UserUncheckedCreateWithoutStakeholderOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStakeholderOperationsInput
    upsert?: UserUpsertWithoutStakeholderOperationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStakeholderOperationsInput, UserUpdateWithoutStakeholderOperationsInput>, UserUncheckedUpdateWithoutStakeholderOperationsInput>
  }

  export type BusinessOperationCreateNestedOneWithoutContractsInput = {
    create?: XOR<BusinessOperationCreateWithoutContractsInput, BusinessOperationUncheckedCreateWithoutContractsInput>
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutContractsInput
    connect?: BusinessOperationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutContractorPMContractsInput = {
    create?: XOR<UserCreateWithoutContractorPMContractsInput, UserUncheckedCreateWithoutContractorPMContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContractorPMContractsInput
    connect?: UserWhereUniqueInput
  }

  export type TransitionCreateNestedManyWithoutContractInput = {
    create?: XOR<TransitionCreateWithoutContractInput, TransitionUncheckedCreateWithoutContractInput> | TransitionCreateWithoutContractInput[] | TransitionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutContractInput | TransitionCreateOrConnectWithoutContractInput[]
    createMany?: TransitionCreateManyContractInputEnvelope
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutContractInput = {
    create?: XOR<AuditLogCreateWithoutContractInput, AuditLogUncheckedCreateWithoutContractInput> | AuditLogCreateWithoutContractInput[] | AuditLogUncheckedCreateWithoutContractInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutContractInput | AuditLogCreateOrConnectWithoutContractInput[]
    createMany?: AuditLogCreateManyContractInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type TransitionUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<TransitionCreateWithoutContractInput, TransitionUncheckedCreateWithoutContractInput> | TransitionCreateWithoutContractInput[] | TransitionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutContractInput | TransitionCreateOrConnectWithoutContractInput[]
    createMany?: TransitionCreateManyContractInputEnvelope
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<AuditLogCreateWithoutContractInput, AuditLogUncheckedCreateWithoutContractInput> | AuditLogCreateWithoutContractInput[] | AuditLogUncheckedCreateWithoutContractInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutContractInput | AuditLogCreateOrConnectWithoutContractInput[]
    createMany?: AuditLogCreateManyContractInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumContractStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContractStatus
  }

  export type BusinessOperationUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutContractsInput, BusinessOperationUncheckedCreateWithoutContractsInput>
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutContractsInput
    upsert?: BusinessOperationUpsertWithoutContractsInput
    connect?: BusinessOperationWhereUniqueInput
    update?: XOR<XOR<BusinessOperationUpdateToOneWithWhereWithoutContractsInput, BusinessOperationUpdateWithoutContractsInput>, BusinessOperationUncheckedUpdateWithoutContractsInput>
  }

  export type UserUpdateOneWithoutContractorPMContractsNestedInput = {
    create?: XOR<UserCreateWithoutContractorPMContractsInput, UserUncheckedCreateWithoutContractorPMContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContractorPMContractsInput
    upsert?: UserUpsertWithoutContractorPMContractsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContractorPMContractsInput, UserUpdateWithoutContractorPMContractsInput>, UserUncheckedUpdateWithoutContractorPMContractsInput>
  }

  export type TransitionUpdateManyWithoutContractNestedInput = {
    create?: XOR<TransitionCreateWithoutContractInput, TransitionUncheckedCreateWithoutContractInput> | TransitionCreateWithoutContractInput[] | TransitionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutContractInput | TransitionCreateOrConnectWithoutContractInput[]
    upsert?: TransitionUpsertWithWhereUniqueWithoutContractInput | TransitionUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: TransitionCreateManyContractInputEnvelope
    set?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    disconnect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    delete?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    update?: TransitionUpdateWithWhereUniqueWithoutContractInput | TransitionUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: TransitionUpdateManyWithWhereWithoutContractInput | TransitionUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: TransitionScalarWhereInput | TransitionScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutContractNestedInput = {
    create?: XOR<AuditLogCreateWithoutContractInput, AuditLogUncheckedCreateWithoutContractInput> | AuditLogCreateWithoutContractInput[] | AuditLogUncheckedCreateWithoutContractInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutContractInput | AuditLogCreateOrConnectWithoutContractInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutContractInput | AuditLogUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: AuditLogCreateManyContractInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutContractInput | AuditLogUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutContractInput | AuditLogUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type TransitionUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<TransitionCreateWithoutContractInput, TransitionUncheckedCreateWithoutContractInput> | TransitionCreateWithoutContractInput[] | TransitionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransitionCreateOrConnectWithoutContractInput | TransitionCreateOrConnectWithoutContractInput[]
    upsert?: TransitionUpsertWithWhereUniqueWithoutContractInput | TransitionUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: TransitionCreateManyContractInputEnvelope
    set?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    disconnect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    delete?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    connect?: TransitionWhereUniqueInput | TransitionWhereUniqueInput[]
    update?: TransitionUpdateWithWhereUniqueWithoutContractInput | TransitionUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: TransitionUpdateManyWithWhereWithoutContractInput | TransitionUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: TransitionScalarWhereInput | TransitionScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<AuditLogCreateWithoutContractInput, AuditLogUncheckedCreateWithoutContractInput> | AuditLogCreateWithoutContractInput[] | AuditLogUncheckedCreateWithoutContractInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutContractInput | AuditLogCreateOrConnectWithoutContractInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutContractInput | AuditLogUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: AuditLogCreateManyContractInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutContractInput | AuditLogUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutContractInput | AuditLogUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ContractCreateNestedOneWithoutTransitionsInput = {
    create?: XOR<ContractCreateWithoutTransitionsInput, ContractUncheckedCreateWithoutTransitionsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutTransitionsInput
    connect?: ContractWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedTransitionsInput = {
    create?: XOR<UserCreateWithoutCreatedTransitionsInput, UserUncheckedCreateWithoutCreatedTransitionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTransitionsInput
    connect?: UserWhereUniqueInput
  }

  export type MilestoneCreateNestedManyWithoutTransitionInput = {
    create?: XOR<MilestoneCreateWithoutTransitionInput, MilestoneUncheckedCreateWithoutTransitionInput> | MilestoneCreateWithoutTransitionInput[] | MilestoneUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTransitionInput | MilestoneCreateOrConnectWithoutTransitionInput[]
    createMany?: MilestoneCreateManyTransitionInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutTransitionInput = {
    create?: XOR<AuditLogCreateWithoutTransitionInput, AuditLogUncheckedCreateWithoutTransitionInput> | AuditLogCreateWithoutTransitionInput[] | AuditLogUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTransitionInput | AuditLogCreateOrConnectWithoutTransitionInput[]
    createMany?: AuditLogCreateManyTransitionInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type MilestoneUncheckedCreateNestedManyWithoutTransitionInput = {
    create?: XOR<MilestoneCreateWithoutTransitionInput, MilestoneUncheckedCreateWithoutTransitionInput> | MilestoneCreateWithoutTransitionInput[] | MilestoneUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTransitionInput | MilestoneCreateOrConnectWithoutTransitionInput[]
    createMany?: MilestoneCreateManyTransitionInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutTransitionInput = {
    create?: XOR<AuditLogCreateWithoutTransitionInput, AuditLogUncheckedCreateWithoutTransitionInput> | AuditLogCreateWithoutTransitionInput[] | AuditLogUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTransitionInput | AuditLogCreateOrConnectWithoutTransitionInput[]
    createMany?: AuditLogCreateManyTransitionInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumTransitionDurationFieldUpdateOperationsInput = {
    set?: $Enums.TransitionDuration
  }

  export type EnumTransitionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransitionStatus
  }

  export type ContractUpdateOneWithoutTransitionsNestedInput = {
    create?: XOR<ContractCreateWithoutTransitionsInput, ContractUncheckedCreateWithoutTransitionsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutTransitionsInput
    upsert?: ContractUpsertWithoutTransitionsInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutTransitionsInput, ContractUpdateWithoutTransitionsInput>, ContractUncheckedUpdateWithoutTransitionsInput>
  }

  export type UserUpdateOneWithoutCreatedTransitionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTransitionsInput, UserUncheckedCreateWithoutCreatedTransitionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTransitionsInput
    upsert?: UserUpsertWithoutCreatedTransitionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTransitionsInput, UserUpdateWithoutCreatedTransitionsInput>, UserUncheckedUpdateWithoutCreatedTransitionsInput>
  }

  export type MilestoneUpdateManyWithoutTransitionNestedInput = {
    create?: XOR<MilestoneCreateWithoutTransitionInput, MilestoneUncheckedCreateWithoutTransitionInput> | MilestoneCreateWithoutTransitionInput[] | MilestoneUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTransitionInput | MilestoneCreateOrConnectWithoutTransitionInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutTransitionInput | MilestoneUpsertWithWhereUniqueWithoutTransitionInput[]
    createMany?: MilestoneCreateManyTransitionInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutTransitionInput | MilestoneUpdateWithWhereUniqueWithoutTransitionInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutTransitionInput | MilestoneUpdateManyWithWhereWithoutTransitionInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutTransitionNestedInput = {
    create?: XOR<AuditLogCreateWithoutTransitionInput, AuditLogUncheckedCreateWithoutTransitionInput> | AuditLogCreateWithoutTransitionInput[] | AuditLogUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTransitionInput | AuditLogCreateOrConnectWithoutTransitionInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutTransitionInput | AuditLogUpsertWithWhereUniqueWithoutTransitionInput[]
    createMany?: AuditLogCreateManyTransitionInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutTransitionInput | AuditLogUpdateWithWhereUniqueWithoutTransitionInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutTransitionInput | AuditLogUpdateManyWithWhereWithoutTransitionInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type MilestoneUncheckedUpdateManyWithoutTransitionNestedInput = {
    create?: XOR<MilestoneCreateWithoutTransitionInput, MilestoneUncheckedCreateWithoutTransitionInput> | MilestoneCreateWithoutTransitionInput[] | MilestoneUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutTransitionInput | MilestoneCreateOrConnectWithoutTransitionInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutTransitionInput | MilestoneUpsertWithWhereUniqueWithoutTransitionInput[]
    createMany?: MilestoneCreateManyTransitionInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutTransitionInput | MilestoneUpdateWithWhereUniqueWithoutTransitionInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutTransitionInput | MilestoneUpdateManyWithWhereWithoutTransitionInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutTransitionNestedInput = {
    create?: XOR<AuditLogCreateWithoutTransitionInput, AuditLogUncheckedCreateWithoutTransitionInput> | AuditLogCreateWithoutTransitionInput[] | AuditLogUncheckedCreateWithoutTransitionInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTransitionInput | AuditLogCreateOrConnectWithoutTransitionInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutTransitionInput | AuditLogUpsertWithWhereUniqueWithoutTransitionInput[]
    createMany?: AuditLogCreateManyTransitionInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutTransitionInput | AuditLogUpdateWithWhereUniqueWithoutTransitionInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutTransitionInput | AuditLogUpdateManyWithWhereWithoutTransitionInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type TransitionCreateNestedOneWithoutMilestonesInput = {
    create?: XOR<TransitionCreateWithoutMilestonesInput, TransitionUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: TransitionCreateOrConnectWithoutMilestonesInput
    connect?: TransitionWhereUniqueInput
  }

  export type AuditLogCreateNestedManyWithoutMilestoneInput = {
    create?: XOR<AuditLogCreateWithoutMilestoneInput, AuditLogUncheckedCreateWithoutMilestoneInput> | AuditLogCreateWithoutMilestoneInput[] | AuditLogUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutMilestoneInput | AuditLogCreateOrConnectWithoutMilestoneInput[]
    createMany?: AuditLogCreateManyMilestoneInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutMilestoneInput = {
    create?: XOR<AuditLogCreateWithoutMilestoneInput, AuditLogUncheckedCreateWithoutMilestoneInput> | AuditLogCreateWithoutMilestoneInput[] | AuditLogUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutMilestoneInput | AuditLogCreateOrConnectWithoutMilestoneInput[]
    createMany?: AuditLogCreateManyMilestoneInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumPriorityLevelFieldUpdateOperationsInput = {
    set?: $Enums.PriorityLevel
  }

  export type EnumMilestoneStatusFieldUpdateOperationsInput = {
    set?: $Enums.MilestoneStatus
  }

  export type TransitionUpdateOneRequiredWithoutMilestonesNestedInput = {
    create?: XOR<TransitionCreateWithoutMilestonesInput, TransitionUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: TransitionCreateOrConnectWithoutMilestonesInput
    upsert?: TransitionUpsertWithoutMilestonesInput
    connect?: TransitionWhereUniqueInput
    update?: XOR<XOR<TransitionUpdateToOneWithWhereWithoutMilestonesInput, TransitionUpdateWithoutMilestonesInput>, TransitionUncheckedUpdateWithoutMilestonesInput>
  }

  export type AuditLogUpdateManyWithoutMilestoneNestedInput = {
    create?: XOR<AuditLogCreateWithoutMilestoneInput, AuditLogUncheckedCreateWithoutMilestoneInput> | AuditLogCreateWithoutMilestoneInput[] | AuditLogUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutMilestoneInput | AuditLogCreateOrConnectWithoutMilestoneInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutMilestoneInput | AuditLogUpsertWithWhereUniqueWithoutMilestoneInput[]
    createMany?: AuditLogCreateManyMilestoneInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutMilestoneInput | AuditLogUpdateWithWhereUniqueWithoutMilestoneInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutMilestoneInput | AuditLogUpdateManyWithWhereWithoutMilestoneInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutMilestoneNestedInput = {
    create?: XOR<AuditLogCreateWithoutMilestoneInput, AuditLogUncheckedCreateWithoutMilestoneInput> | AuditLogCreateWithoutMilestoneInput[] | AuditLogUncheckedCreateWithoutMilestoneInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutMilestoneInput | AuditLogCreateOrConnectWithoutMilestoneInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutMilestoneInput | AuditLogUpsertWithWhereUniqueWithoutMilestoneInput[]
    createMany?: AuditLogCreateManyMilestoneInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutMilestoneInput | AuditLogUpdateWithWhereUniqueWithoutMilestoneInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutMilestoneInput | AuditLogUpdateManyWithWhereWithoutMilestoneInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type BusinessOperationCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<BusinessOperationCreateWithoutAuditLogsInput, BusinessOperationUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutAuditLogsInput
    connect?: BusinessOperationWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<ContractCreateWithoutAuditLogsInput, ContractUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutAuditLogsInput
    connect?: ContractWhereUniqueInput
  }

  export type TransitionCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<TransitionCreateWithoutAuditLogsInput, TransitionUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: TransitionCreateOrConnectWithoutAuditLogsInput
    connect?: TransitionWhereUniqueInput
  }

  export type MilestoneCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<MilestoneCreateWithoutAuditLogsInput, MilestoneUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: MilestoneCreateOrConnectWithoutAuditLogsInput
    connect?: MilestoneWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type BusinessOperationUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<BusinessOperationCreateWithoutAuditLogsInput, BusinessOperationUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: BusinessOperationCreateOrConnectWithoutAuditLogsInput
    upsert?: BusinessOperationUpsertWithoutAuditLogsInput
    disconnect?: BusinessOperationWhereInput | boolean
    delete?: BusinessOperationWhereInput | boolean
    connect?: BusinessOperationWhereUniqueInput
    update?: XOR<XOR<BusinessOperationUpdateToOneWithWhereWithoutAuditLogsInput, BusinessOperationUpdateWithoutAuditLogsInput>, BusinessOperationUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ContractUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<ContractCreateWithoutAuditLogsInput, ContractUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutAuditLogsInput
    upsert?: ContractUpsertWithoutAuditLogsInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutAuditLogsInput, ContractUpdateWithoutAuditLogsInput>, ContractUncheckedUpdateWithoutAuditLogsInput>
  }

  export type TransitionUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<TransitionCreateWithoutAuditLogsInput, TransitionUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: TransitionCreateOrConnectWithoutAuditLogsInput
    upsert?: TransitionUpsertWithoutAuditLogsInput
    disconnect?: TransitionWhereInput | boolean
    delete?: TransitionWhereInput | boolean
    connect?: TransitionWhereUniqueInput
    update?: XOR<XOR<TransitionUpdateToOneWithWhereWithoutAuditLogsInput, TransitionUpdateWithoutAuditLogsInput>, TransitionUncheckedUpdateWithoutAuditLogsInput>
  }

  export type MilestoneUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<MilestoneCreateWithoutAuditLogsInput, MilestoneUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: MilestoneCreateOrConnectWithoutAuditLogsInput
    upsert?: MilestoneUpsertWithoutAuditLogsInput
    disconnect?: MilestoneWhereInput | boolean
    delete?: MilestoneWhereInput | boolean
    connect?: MilestoneWhereUniqueInput
    update?: XOR<XOR<MilestoneUpdateToOneWithWhereWithoutAuditLogsInput, MilestoneUpdateWithoutAuditLogsInput>, MilestoneUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumStakeholderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StakeholderType | EnumStakeholderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStakeholderTypeFilter<$PrismaModel> | $Enums.StakeholderType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumStakeholderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StakeholderType | EnumStakeholderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StakeholderType[] | ListEnumStakeholderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStakeholderTypeWithAggregatesFilter<$PrismaModel> | $Enums.StakeholderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStakeholderTypeFilter<$PrismaModel>
    _max?: NestedEnumStakeholderTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type NestedEnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type NestedEnumTransitionDurationFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionDuration | EnumTransitionDurationFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionDurationFilter<$PrismaModel> | $Enums.TransitionDuration
  }

  export type NestedEnumTransitionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionStatus | EnumTransitionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionStatusFilter<$PrismaModel> | $Enums.TransitionStatus
  }

  export type NestedEnumTransitionDurationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionDuration | EnumTransitionDurationFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionDuration[] | ListEnumTransitionDurationFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionDurationWithAggregatesFilter<$PrismaModel> | $Enums.TransitionDuration
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransitionDurationFilter<$PrismaModel>
    _max?: NestedEnumTransitionDurationFilter<$PrismaModel>
  }

  export type NestedEnumTransitionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransitionStatus | EnumTransitionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransitionStatus[] | ListEnumTransitionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransitionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransitionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransitionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransitionStatusFilter<$PrismaModel>
  }

  export type NestedEnumPriorityLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityLevel | EnumPriorityLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityLevelFilter<$PrismaModel> | $Enums.PriorityLevel
  }

  export type NestedEnumMilestoneStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MilestoneStatus | EnumMilestoneStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMilestoneStatusFilter<$PrismaModel> | $Enums.MilestoneStatus
  }

  export type NestedEnumPriorityLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityLevel | EnumPriorityLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriorityLevel[] | ListEnumPriorityLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityLevelWithAggregatesFilter<$PrismaModel> | $Enums.PriorityLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityLevelFilter<$PrismaModel>
    _max?: NestedEnumPriorityLevelFilter<$PrismaModel>
  }

  export type NestedEnumMilestoneStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MilestoneStatus | EnumMilestoneStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MilestoneStatus[] | ListEnumMilestoneStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMilestoneStatusWithAggregatesFilter<$PrismaModel> | $Enums.MilestoneStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMilestoneStatusFilter<$PrismaModel>
    _max?: NestedEnumMilestoneStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TransitionCreateWithoutCreatorInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contract?: ContractCreateNestedOneWithoutTransitionsInput
    milestones?: MilestoneCreateNestedManyWithoutTransitionInput
    auditLogs?: AuditLogCreateNestedManyWithoutTransitionInput
  }

  export type TransitionUncheckedCreateWithoutCreatorInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    contractId?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneUncheckedCreateNestedManyWithoutTransitionInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTransitionInput
  }

  export type TransitionCreateOrConnectWithoutCreatorInput = {
    where: TransitionWhereUniqueInput
    create: XOR<TransitionCreateWithoutCreatorInput, TransitionUncheckedCreateWithoutCreatorInput>
  }

  export type TransitionCreateManyCreatorInputEnvelope = {
    data: TransitionCreateManyCreatorInput | TransitionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type BusinessOperationCreateWithoutCurrentManagerInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    governmentPM: UserCreateNestedOneWithoutAssignedOperationsInput
    director: UserCreateNestedOneWithoutDirectedOperationsInput
    contracts?: ContractCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUncheckedCreateWithoutCurrentManagerInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    governmentPMId: string
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderUncheckedCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationCreateOrConnectWithoutCurrentManagerInput = {
    where: BusinessOperationWhereUniqueInput
    create: XOR<BusinessOperationCreateWithoutCurrentManagerInput, BusinessOperationUncheckedCreateWithoutCurrentManagerInput>
  }

  export type BusinessOperationCreateManyCurrentManagerInputEnvelope = {
    data: BusinessOperationCreateManyCurrentManagerInput | BusinessOperationCreateManyCurrentManagerInput[]
    skipDuplicates?: boolean
  }

  export type BusinessOperationCreateWithoutGovernmentPMInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentManager?: UserCreateNestedOneWithoutManagedOperationsInput
    director: UserCreateNestedOneWithoutDirectedOperationsInput
    contracts?: ContractCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUncheckedCreateWithoutGovernmentPMInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderUncheckedCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationCreateOrConnectWithoutGovernmentPMInput = {
    where: BusinessOperationWhereUniqueInput
    create: XOR<BusinessOperationCreateWithoutGovernmentPMInput, BusinessOperationUncheckedCreateWithoutGovernmentPMInput>
  }

  export type BusinessOperationCreateManyGovernmentPMInputEnvelope = {
    data: BusinessOperationCreateManyGovernmentPMInput | BusinessOperationCreateManyGovernmentPMInput[]
    skipDuplicates?: boolean
  }

  export type BusinessOperationCreateWithoutDirectorInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentManager?: UserCreateNestedOneWithoutManagedOperationsInput
    governmentPM: UserCreateNestedOneWithoutAssignedOperationsInput
    contracts?: ContractCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUncheckedCreateWithoutDirectorInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    governmentPMId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderUncheckedCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationCreateOrConnectWithoutDirectorInput = {
    where: BusinessOperationWhereUniqueInput
    create: XOR<BusinessOperationCreateWithoutDirectorInput, BusinessOperationUncheckedCreateWithoutDirectorInput>
  }

  export type BusinessOperationCreateManyDirectorInputEnvelope = {
    data: BusinessOperationCreateManyDirectorInput | BusinessOperationCreateManyDirectorInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutContractorPMInput = {
    id?: string
    contractName: string
    contractNumber: string
    contractorName: string
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    businessOperation: BusinessOperationCreateNestedOneWithoutContractsInput
    transitions?: TransitionCreateNestedManyWithoutContractInput
    auditLogs?: AuditLogCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutContractorPMInput = {
    id?: string
    businessOperationId: string
    contractName: string
    contractNumber: string
    contractorName: string
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transitions?: TransitionUncheckedCreateNestedManyWithoutContractInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutContractorPMInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutContractorPMInput, ContractUncheckedCreateWithoutContractorPMInput>
  }

  export type ContractCreateManyContractorPMInputEnvelope = {
    data: ContractCreateManyContractorPMInput | ContractCreateManyContractorPMInput[]
    skipDuplicates?: boolean
  }

  export type OperationStakeholderCreateWithoutUserInput = {
    id?: string
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businessOperation: BusinessOperationCreateNestedOneWithoutStakeholdersInput
  }

  export type OperationStakeholderUncheckedCreateWithoutUserInput = {
    id?: string
    businessOperationId: string
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationStakeholderCreateOrConnectWithoutUserInput = {
    where: OperationStakeholderWhereUniqueInput
    create: XOR<OperationStakeholderCreateWithoutUserInput, OperationStakeholderUncheckedCreateWithoutUserInput>
  }

  export type OperationStakeholderCreateManyUserInputEnvelope = {
    data: OperationStakeholderCreateManyUserInput | OperationStakeholderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    businessOperation?: BusinessOperationCreateNestedOneWithoutAuditLogsInput
    contract?: ContractCreateNestedOneWithoutAuditLogsInput
    transition?: TransitionCreateNestedOneWithoutAuditLogsInput
    milestone?: MilestoneCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransitionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TransitionWhereUniqueInput
    update: XOR<TransitionUpdateWithoutCreatorInput, TransitionUncheckedUpdateWithoutCreatorInput>
    create: XOR<TransitionCreateWithoutCreatorInput, TransitionUncheckedCreateWithoutCreatorInput>
  }

  export type TransitionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TransitionWhereUniqueInput
    data: XOR<TransitionUpdateWithoutCreatorInput, TransitionUncheckedUpdateWithoutCreatorInput>
  }

  export type TransitionUpdateManyWithWhereWithoutCreatorInput = {
    where: TransitionScalarWhereInput
    data: XOR<TransitionUpdateManyMutationInput, TransitionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TransitionScalarWhereInput = {
    AND?: TransitionScalarWhereInput | TransitionScalarWhereInput[]
    OR?: TransitionScalarWhereInput[]
    NOT?: TransitionScalarWhereInput | TransitionScalarWhereInput[]
    id?: StringFilter<"Transition"> | string
    contractName?: StringNullableFilter<"Transition"> | string | null
    contractNumber?: StringNullableFilter<"Transition"> | string | null
    contractId?: StringNullableFilter<"Transition"> | string | null
    name?: StringNullableFilter<"Transition"> | string | null
    startDate?: DateTimeFilter<"Transition"> | Date | string
    endDate?: DateTimeFilter<"Transition"> | Date | string
    duration?: EnumTransitionDurationFilter<"Transition"> | $Enums.TransitionDuration
    keyPersonnel?: StringNullableFilter<"Transition"> | string | null
    description?: StringNullableFilter<"Transition"> | string | null
    status?: EnumTransitionStatusFilter<"Transition"> | $Enums.TransitionStatus
    requiresContinuousService?: BoolFilter<"Transition"> | boolean
    createdBy?: StringNullableFilter<"Transition"> | string | null
    createdAt?: DateTimeFilter<"Transition"> | Date | string
    updatedAt?: DateTimeFilter<"Transition"> | Date | string
  }

  export type BusinessOperationUpsertWithWhereUniqueWithoutCurrentManagerInput = {
    where: BusinessOperationWhereUniqueInput
    update: XOR<BusinessOperationUpdateWithoutCurrentManagerInput, BusinessOperationUncheckedUpdateWithoutCurrentManagerInput>
    create: XOR<BusinessOperationCreateWithoutCurrentManagerInput, BusinessOperationUncheckedCreateWithoutCurrentManagerInput>
  }

  export type BusinessOperationUpdateWithWhereUniqueWithoutCurrentManagerInput = {
    where: BusinessOperationWhereUniqueInput
    data: XOR<BusinessOperationUpdateWithoutCurrentManagerInput, BusinessOperationUncheckedUpdateWithoutCurrentManagerInput>
  }

  export type BusinessOperationUpdateManyWithWhereWithoutCurrentManagerInput = {
    where: BusinessOperationScalarWhereInput
    data: XOR<BusinessOperationUpdateManyMutationInput, BusinessOperationUncheckedUpdateManyWithoutCurrentManagerInput>
  }

  export type BusinessOperationScalarWhereInput = {
    AND?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
    OR?: BusinessOperationScalarWhereInput[]
    NOT?: BusinessOperationScalarWhereInput | BusinessOperationScalarWhereInput[]
    id?: StringFilter<"BusinessOperation"> | string
    name?: StringFilter<"BusinessOperation"> | string
    businessFunction?: StringFilter<"BusinessOperation"> | string
    technicalDomain?: StringFilter<"BusinessOperation"> | string
    description?: StringNullableFilter<"BusinessOperation"> | string | null
    scope?: StringFilter<"BusinessOperation"> | string
    objectives?: StringFilter<"BusinessOperation"> | string
    performanceMetrics?: JsonFilter<"BusinessOperation">
    supportPeriodStart?: DateTimeFilter<"BusinessOperation"> | Date | string
    supportPeriodEnd?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentContractEnd?: DateTimeFilter<"BusinessOperation"> | Date | string
    currentManagerId?: StringNullableFilter<"BusinessOperation"> | string | null
    governmentPMId?: StringFilter<"BusinessOperation"> | string
    directorId?: StringFilter<"BusinessOperation"> | string
    createdAt?: DateTimeFilter<"BusinessOperation"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessOperation"> | Date | string
  }

  export type BusinessOperationUpsertWithWhereUniqueWithoutGovernmentPMInput = {
    where: BusinessOperationWhereUniqueInput
    update: XOR<BusinessOperationUpdateWithoutGovernmentPMInput, BusinessOperationUncheckedUpdateWithoutGovernmentPMInput>
    create: XOR<BusinessOperationCreateWithoutGovernmentPMInput, BusinessOperationUncheckedCreateWithoutGovernmentPMInput>
  }

  export type BusinessOperationUpdateWithWhereUniqueWithoutGovernmentPMInput = {
    where: BusinessOperationWhereUniqueInput
    data: XOR<BusinessOperationUpdateWithoutGovernmentPMInput, BusinessOperationUncheckedUpdateWithoutGovernmentPMInput>
  }

  export type BusinessOperationUpdateManyWithWhereWithoutGovernmentPMInput = {
    where: BusinessOperationScalarWhereInput
    data: XOR<BusinessOperationUpdateManyMutationInput, BusinessOperationUncheckedUpdateManyWithoutGovernmentPMInput>
  }

  export type BusinessOperationUpsertWithWhereUniqueWithoutDirectorInput = {
    where: BusinessOperationWhereUniqueInput
    update: XOR<BusinessOperationUpdateWithoutDirectorInput, BusinessOperationUncheckedUpdateWithoutDirectorInput>
    create: XOR<BusinessOperationCreateWithoutDirectorInput, BusinessOperationUncheckedCreateWithoutDirectorInput>
  }

  export type BusinessOperationUpdateWithWhereUniqueWithoutDirectorInput = {
    where: BusinessOperationWhereUniqueInput
    data: XOR<BusinessOperationUpdateWithoutDirectorInput, BusinessOperationUncheckedUpdateWithoutDirectorInput>
  }

  export type BusinessOperationUpdateManyWithWhereWithoutDirectorInput = {
    where: BusinessOperationScalarWhereInput
    data: XOR<BusinessOperationUpdateManyMutationInput, BusinessOperationUncheckedUpdateManyWithoutDirectorInput>
  }

  export type ContractUpsertWithWhereUniqueWithoutContractorPMInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutContractorPMInput, ContractUncheckedUpdateWithoutContractorPMInput>
    create: XOR<ContractCreateWithoutContractorPMInput, ContractUncheckedCreateWithoutContractorPMInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutContractorPMInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutContractorPMInput, ContractUncheckedUpdateWithoutContractorPMInput>
  }

  export type ContractUpdateManyWithWhereWithoutContractorPMInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutContractorPMInput>
  }

  export type ContractScalarWhereInput = {
    AND?: ContractScalarWhereInput | ContractScalarWhereInput[]
    OR?: ContractScalarWhereInput[]
    NOT?: ContractScalarWhereInput | ContractScalarWhereInput[]
    id?: StringFilter<"Contract"> | string
    businessOperationId?: StringFilter<"Contract"> | string
    contractName?: StringFilter<"Contract"> | string
    contractNumber?: StringFilter<"Contract"> | string
    contractorName?: StringFilter<"Contract"> | string
    contractorPMId?: StringNullableFilter<"Contract"> | string | null
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    canBeExtended?: BoolFilter<"Contract"> | boolean
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
  }

  export type OperationStakeholderUpsertWithWhereUniqueWithoutUserInput = {
    where: OperationStakeholderWhereUniqueInput
    update: XOR<OperationStakeholderUpdateWithoutUserInput, OperationStakeholderUncheckedUpdateWithoutUserInput>
    create: XOR<OperationStakeholderCreateWithoutUserInput, OperationStakeholderUncheckedCreateWithoutUserInput>
  }

  export type OperationStakeholderUpdateWithWhereUniqueWithoutUserInput = {
    where: OperationStakeholderWhereUniqueInput
    data: XOR<OperationStakeholderUpdateWithoutUserInput, OperationStakeholderUncheckedUpdateWithoutUserInput>
  }

  export type OperationStakeholderUpdateManyWithWhereWithoutUserInput = {
    where: OperationStakeholderScalarWhereInput
    data: XOR<OperationStakeholderUpdateManyMutationInput, OperationStakeholderUncheckedUpdateManyWithoutUserInput>
  }

  export type OperationStakeholderScalarWhereInput = {
    AND?: OperationStakeholderScalarWhereInput | OperationStakeholderScalarWhereInput[]
    OR?: OperationStakeholderScalarWhereInput[]
    NOT?: OperationStakeholderScalarWhereInput | OperationStakeholderScalarWhereInput[]
    id?: StringFilter<"OperationStakeholder"> | string
    businessOperationId?: StringFilter<"OperationStakeholder"> | string
    userId?: StringNullableFilter<"OperationStakeholder"> | string | null
    name?: StringFilter<"OperationStakeholder"> | string
    role?: StringFilter<"OperationStakeholder"> | string
    email?: StringFilter<"OperationStakeholder"> | string
    phone?: StringNullableFilter<"OperationStakeholder"> | string | null
    organization?: StringNullableFilter<"OperationStakeholder"> | string | null
    stakeholderType?: EnumStakeholderTypeFilter<"OperationStakeholder"> | $Enums.StakeholderType
    receiveNotifications?: BoolFilter<"OperationStakeholder"> | boolean
    isActive?: BoolFilter<"OperationStakeholder"> | boolean
    createdAt?: DateTimeFilter<"OperationStakeholder"> | Date | string
    updatedAt?: DateTimeFilter<"OperationStakeholder"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    userId?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserCreateWithoutManagedOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionCreateNestedManyWithoutCreatorInput
    assignedOperations?: BusinessOperationCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManagedOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionUncheckedCreateNestedManyWithoutCreatorInput
    assignedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractUncheckedCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManagedOperationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagedOperationsInput, UserUncheckedCreateWithoutManagedOperationsInput>
  }

  export type UserCreateWithoutAssignedOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationCreateNestedManyWithoutCurrentManagerInput
    directedOperations?: BusinessOperationCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionUncheckedCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput
    directedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractUncheckedCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedOperationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedOperationsInput, UserUncheckedCreateWithoutAssignedOperationsInput>
  }

  export type UserCreateWithoutDirectedOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationCreateNestedManyWithoutGovernmentPMInput
    contractorPMContracts?: ContractCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDirectedOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionUncheckedCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput
    contractorPMContracts?: ContractUncheckedCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDirectedOperationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDirectedOperationsInput, UserUncheckedCreateWithoutDirectedOperationsInput>
  }

  export type ContractCreateWithoutBusinessOperationInput = {
    id?: string
    contractName: string
    contractNumber: string
    contractorName: string
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorPM?: UserCreateNestedOneWithoutContractorPMContractsInput
    transitions?: TransitionCreateNestedManyWithoutContractInput
    auditLogs?: AuditLogCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutBusinessOperationInput = {
    id?: string
    contractName: string
    contractNumber: string
    contractorName: string
    contractorPMId?: string | null
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transitions?: TransitionUncheckedCreateNestedManyWithoutContractInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutBusinessOperationInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutBusinessOperationInput, ContractUncheckedCreateWithoutBusinessOperationInput>
  }

  export type ContractCreateManyBusinessOperationInputEnvelope = {
    data: ContractCreateManyBusinessOperationInput | ContractCreateManyBusinessOperationInput[]
    skipDuplicates?: boolean
  }

  export type OperationStakeholderCreateWithoutBusinessOperationInput = {
    id?: string
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutStakeholderOperationsInput
  }

  export type OperationStakeholderUncheckedCreateWithoutBusinessOperationInput = {
    id?: string
    userId?: string | null
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationStakeholderCreateOrConnectWithoutBusinessOperationInput = {
    where: OperationStakeholderWhereUniqueInput
    create: XOR<OperationStakeholderCreateWithoutBusinessOperationInput, OperationStakeholderUncheckedCreateWithoutBusinessOperationInput>
  }

  export type OperationStakeholderCreateManyBusinessOperationInputEnvelope = {
    data: OperationStakeholderCreateManyBusinessOperationInput | OperationStakeholderCreateManyBusinessOperationInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutBusinessOperationInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    contract?: ContractCreateNestedOneWithoutAuditLogsInput
    transition?: TransitionCreateNestedOneWithoutAuditLogsInput
    milestone?: MilestoneCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutBusinessOperationInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutBusinessOperationInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutBusinessOperationInput, AuditLogUncheckedCreateWithoutBusinessOperationInput>
  }

  export type AuditLogCreateManyBusinessOperationInputEnvelope = {
    data: AuditLogCreateManyBusinessOperationInput | AuditLogCreateManyBusinessOperationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutManagedOperationsInput = {
    update: XOR<UserUpdateWithoutManagedOperationsInput, UserUncheckedUpdateWithoutManagedOperationsInput>
    create: XOR<UserCreateWithoutManagedOperationsInput, UserUncheckedCreateWithoutManagedOperationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagedOperationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagedOperationsInput, UserUncheckedUpdateWithoutManagedOperationsInput>
  }

  export type UserUpdateWithoutManagedOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUpdateManyWithoutCreatorNestedInput
    assignedOperations?: BusinessOperationUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManagedOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUncheckedUpdateManyWithoutCreatorNestedInput
    assignedOperations?: BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUncheckedUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAssignedOperationsInput = {
    update: XOR<UserUpdateWithoutAssignedOperationsInput, UserUncheckedUpdateWithoutAssignedOperationsInput>
    create: XOR<UserCreateWithoutAssignedOperationsInput, UserUncheckedCreateWithoutAssignedOperationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedOperationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedOperationsInput, UserUncheckedUpdateWithoutAssignedOperationsInput>
  }

  export type UserUpdateWithoutAssignedOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUpdateManyWithoutCurrentManagerNestedInput
    directedOperations?: BusinessOperationUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUncheckedUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput
    directedOperations?: BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUncheckedUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutDirectedOperationsInput = {
    update: XOR<UserUpdateWithoutDirectedOperationsInput, UserUncheckedUpdateWithoutDirectedOperationsInput>
    create: XOR<UserCreateWithoutDirectedOperationsInput, UserUncheckedCreateWithoutDirectedOperationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDirectedOperationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDirectedOperationsInput, UserUncheckedUpdateWithoutDirectedOperationsInput>
  }

  export type UserUpdateWithoutDirectedOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUpdateManyWithoutGovernmentPMNestedInput
    contractorPMContracts?: ContractUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDirectedOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUncheckedUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput
    contractorPMContracts?: ContractUncheckedUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContractUpsertWithWhereUniqueWithoutBusinessOperationInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutBusinessOperationInput, ContractUncheckedUpdateWithoutBusinessOperationInput>
    create: XOR<ContractCreateWithoutBusinessOperationInput, ContractUncheckedCreateWithoutBusinessOperationInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutBusinessOperationInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutBusinessOperationInput, ContractUncheckedUpdateWithoutBusinessOperationInput>
  }

  export type ContractUpdateManyWithWhereWithoutBusinessOperationInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutBusinessOperationInput>
  }

  export type OperationStakeholderUpsertWithWhereUniqueWithoutBusinessOperationInput = {
    where: OperationStakeholderWhereUniqueInput
    update: XOR<OperationStakeholderUpdateWithoutBusinessOperationInput, OperationStakeholderUncheckedUpdateWithoutBusinessOperationInput>
    create: XOR<OperationStakeholderCreateWithoutBusinessOperationInput, OperationStakeholderUncheckedCreateWithoutBusinessOperationInput>
  }

  export type OperationStakeholderUpdateWithWhereUniqueWithoutBusinessOperationInput = {
    where: OperationStakeholderWhereUniqueInput
    data: XOR<OperationStakeholderUpdateWithoutBusinessOperationInput, OperationStakeholderUncheckedUpdateWithoutBusinessOperationInput>
  }

  export type OperationStakeholderUpdateManyWithWhereWithoutBusinessOperationInput = {
    where: OperationStakeholderScalarWhereInput
    data: XOR<OperationStakeholderUpdateManyMutationInput, OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutBusinessOperationInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutBusinessOperationInput, AuditLogUncheckedUpdateWithoutBusinessOperationInput>
    create: XOR<AuditLogCreateWithoutBusinessOperationInput, AuditLogUncheckedCreateWithoutBusinessOperationInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutBusinessOperationInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutBusinessOperationInput, AuditLogUncheckedUpdateWithoutBusinessOperationInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutBusinessOperationInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutBusinessOperationInput>
  }

  export type BusinessOperationCreateWithoutStakeholdersInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentManager?: UserCreateNestedOneWithoutManagedOperationsInput
    governmentPM: UserCreateNestedOneWithoutAssignedOperationsInput
    director: UserCreateNestedOneWithoutDirectedOperationsInput
    contracts?: ContractCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUncheckedCreateWithoutStakeholdersInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    governmentPMId: string
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationCreateOrConnectWithoutStakeholdersInput = {
    where: BusinessOperationWhereUniqueInput
    create: XOR<BusinessOperationCreateWithoutStakeholdersInput, BusinessOperationUncheckedCreateWithoutStakeholdersInput>
  }

  export type UserCreateWithoutStakeholderOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractCreateNestedManyWithoutContractorPMInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStakeholderOperationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionUncheckedCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractUncheckedCreateNestedManyWithoutContractorPMInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStakeholderOperationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStakeholderOperationsInput, UserUncheckedCreateWithoutStakeholderOperationsInput>
  }

  export type BusinessOperationUpsertWithoutStakeholdersInput = {
    update: XOR<BusinessOperationUpdateWithoutStakeholdersInput, BusinessOperationUncheckedUpdateWithoutStakeholdersInput>
    create: XOR<BusinessOperationCreateWithoutStakeholdersInput, BusinessOperationUncheckedCreateWithoutStakeholdersInput>
    where?: BusinessOperationWhereInput
  }

  export type BusinessOperationUpdateToOneWithWhereWithoutStakeholdersInput = {
    where?: BusinessOperationWhereInput
    data: XOR<BusinessOperationUpdateWithoutStakeholdersInput, BusinessOperationUncheckedUpdateWithoutStakeholdersInput>
  }

  export type BusinessOperationUpdateWithoutStakeholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManager?: UserUpdateOneWithoutManagedOperationsNestedInput
    governmentPM?: UserUpdateOneRequiredWithoutAssignedOperationsNestedInput
    director?: UserUpdateOneRequiredWithoutDirectedOperationsNestedInput
    contracts?: ContractUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateWithoutStakeholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    governmentPMId?: StringFieldUpdateOperationsInput | string
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessOperationNestedInput
  }

  export type UserUpsertWithoutStakeholderOperationsInput = {
    update: XOR<UserUpdateWithoutStakeholderOperationsInput, UserUncheckedUpdateWithoutStakeholderOperationsInput>
    create: XOR<UserCreateWithoutStakeholderOperationsInput, UserUncheckedCreateWithoutStakeholderOperationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStakeholderOperationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStakeholderOperationsInput, UserUncheckedUpdateWithoutStakeholderOperationsInput>
  }

  export type UserUpdateWithoutStakeholderOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUpdateManyWithoutContractorPMNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStakeholderOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUncheckedUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUncheckedUpdateManyWithoutContractorPMNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BusinessOperationCreateWithoutContractsInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentManager?: UserCreateNestedOneWithoutManagedOperationsInput
    governmentPM: UserCreateNestedOneWithoutAssignedOperationsInput
    director: UserCreateNestedOneWithoutDirectedOperationsInput
    stakeholders?: OperationStakeholderCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    governmentPMId: string
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stakeholders?: OperationStakeholderUncheckedCreateNestedManyWithoutBusinessOperationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationCreateOrConnectWithoutContractsInput = {
    where: BusinessOperationWhereUniqueInput
    create: XOR<BusinessOperationCreateWithoutContractsInput, BusinessOperationUncheckedCreateWithoutContractsInput>
  }

  export type UserCreateWithoutContractorPMContractsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationCreateNestedManyWithoutDirectorInput
    stakeholderOperations?: OperationStakeholderCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContractorPMContractsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionUncheckedCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput
    stakeholderOperations?: OperationStakeholderUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContractorPMContractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContractorPMContractsInput, UserUncheckedCreateWithoutContractorPMContractsInput>
  }

  export type TransitionCreateWithoutContractInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedTransitionsInput
    milestones?: MilestoneCreateNestedManyWithoutTransitionInput
    auditLogs?: AuditLogCreateNestedManyWithoutTransitionInput
  }

  export type TransitionUncheckedCreateWithoutContractInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneUncheckedCreateNestedManyWithoutTransitionInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTransitionInput
  }

  export type TransitionCreateOrConnectWithoutContractInput = {
    where: TransitionWhereUniqueInput
    create: XOR<TransitionCreateWithoutContractInput, TransitionUncheckedCreateWithoutContractInput>
  }

  export type TransitionCreateManyContractInputEnvelope = {
    data: TransitionCreateManyContractInput | TransitionCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutContractInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    businessOperation?: BusinessOperationCreateNestedOneWithoutAuditLogsInput
    transition?: TransitionCreateNestedOneWithoutAuditLogsInput
    milestone?: MilestoneCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutContractInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutContractInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutContractInput, AuditLogUncheckedCreateWithoutContractInput>
  }

  export type AuditLogCreateManyContractInputEnvelope = {
    data: AuditLogCreateManyContractInput | AuditLogCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type BusinessOperationUpsertWithoutContractsInput = {
    update: XOR<BusinessOperationUpdateWithoutContractsInput, BusinessOperationUncheckedUpdateWithoutContractsInput>
    create: XOR<BusinessOperationCreateWithoutContractsInput, BusinessOperationUncheckedCreateWithoutContractsInput>
    where?: BusinessOperationWhereInput
  }

  export type BusinessOperationUpdateToOneWithWhereWithoutContractsInput = {
    where?: BusinessOperationWhereInput
    data: XOR<BusinessOperationUpdateWithoutContractsInput, BusinessOperationUncheckedUpdateWithoutContractsInput>
  }

  export type BusinessOperationUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManager?: UserUpdateOneWithoutManagedOperationsNestedInput
    governmentPM?: UserUpdateOneRequiredWithoutAssignedOperationsNestedInput
    director?: UserUpdateOneRequiredWithoutDirectedOperationsNestedInput
    stakeholders?: OperationStakeholderUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    governmentPMId?: StringFieldUpdateOperationsInput | string
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stakeholders?: OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessOperationNestedInput
  }

  export type UserUpsertWithoutContractorPMContractsInput = {
    update: XOR<UserUpdateWithoutContractorPMContractsInput, UserUncheckedUpdateWithoutContractorPMContractsInput>
    create: XOR<UserCreateWithoutContractorPMContractsInput, UserUncheckedCreateWithoutContractorPMContractsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContractorPMContractsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContractorPMContractsInput, UserUncheckedUpdateWithoutContractorPMContractsInput>
  }

  export type UserUpdateWithoutContractorPMContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUpdateManyWithoutDirectorNestedInput
    stakeholderOperations?: OperationStakeholderUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContractorPMContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUncheckedUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput
    stakeholderOperations?: OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransitionUpsertWithWhereUniqueWithoutContractInput = {
    where: TransitionWhereUniqueInput
    update: XOR<TransitionUpdateWithoutContractInput, TransitionUncheckedUpdateWithoutContractInput>
    create: XOR<TransitionCreateWithoutContractInput, TransitionUncheckedCreateWithoutContractInput>
  }

  export type TransitionUpdateWithWhereUniqueWithoutContractInput = {
    where: TransitionWhereUniqueInput
    data: XOR<TransitionUpdateWithoutContractInput, TransitionUncheckedUpdateWithoutContractInput>
  }

  export type TransitionUpdateManyWithWhereWithoutContractInput = {
    where: TransitionScalarWhereInput
    data: XOR<TransitionUpdateManyMutationInput, TransitionUncheckedUpdateManyWithoutContractInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutContractInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutContractInput, AuditLogUncheckedUpdateWithoutContractInput>
    create: XOR<AuditLogCreateWithoutContractInput, AuditLogUncheckedCreateWithoutContractInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutContractInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutContractInput, AuditLogUncheckedUpdateWithoutContractInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutContractInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutContractInput>
  }

  export type ContractCreateWithoutTransitionsInput = {
    id?: string
    contractName: string
    contractNumber: string
    contractorName: string
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    businessOperation: BusinessOperationCreateNestedOneWithoutContractsInput
    contractorPM?: UserCreateNestedOneWithoutContractorPMContractsInput
    auditLogs?: AuditLogCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutTransitionsInput = {
    id?: string
    businessOperationId: string
    contractName: string
    contractNumber: string
    contractorName: string
    contractorPMId?: string | null
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutTransitionsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutTransitionsInput, ContractUncheckedCreateWithoutTransitionsInput>
  }

  export type UserCreateWithoutCreatedTransitionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    managedOperations?: BusinessOperationCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTransitionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    managedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractUncheckedCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTransitionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTransitionsInput, UserUncheckedCreateWithoutCreatedTransitionsInput>
  }

  export type MilestoneCreateWithoutTransitionInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneUncheckedCreateWithoutTransitionInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutMilestoneInput
  }

  export type MilestoneCreateOrConnectWithoutTransitionInput = {
    where: MilestoneWhereUniqueInput
    create: XOR<MilestoneCreateWithoutTransitionInput, MilestoneUncheckedCreateWithoutTransitionInput>
  }

  export type MilestoneCreateManyTransitionInputEnvelope = {
    data: MilestoneCreateManyTransitionInput | MilestoneCreateManyTransitionInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutTransitionInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    businessOperation?: BusinessOperationCreateNestedOneWithoutAuditLogsInput
    contract?: ContractCreateNestedOneWithoutAuditLogsInput
    milestone?: MilestoneCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutTransitionInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutTransitionInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutTransitionInput, AuditLogUncheckedCreateWithoutTransitionInput>
  }

  export type AuditLogCreateManyTransitionInputEnvelope = {
    data: AuditLogCreateManyTransitionInput | AuditLogCreateManyTransitionInput[]
    skipDuplicates?: boolean
  }

  export type ContractUpsertWithoutTransitionsInput = {
    update: XOR<ContractUpdateWithoutTransitionsInput, ContractUncheckedUpdateWithoutTransitionsInput>
    create: XOR<ContractCreateWithoutTransitionsInput, ContractUncheckedCreateWithoutTransitionsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutTransitionsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutTransitionsInput, ContractUncheckedUpdateWithoutTransitionsInput>
  }

  export type ContractUpdateWithoutTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessOperation?: BusinessOperationUpdateOneRequiredWithoutContractsNestedInput
    contractorPM?: UserUpdateOneWithoutContractorPMContractsNestedInput
    auditLogs?: AuditLogUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    contractorPMId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutContractNestedInput
  }

  export type UserUpsertWithoutCreatedTransitionsInput = {
    update: XOR<UserUpdateWithoutCreatedTransitionsInput, UserUncheckedUpdateWithoutCreatedTransitionsInput>
    create: XOR<UserCreateWithoutCreatedTransitionsInput, UserUncheckedCreateWithoutCreatedTransitionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTransitionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTransitionsInput, UserUncheckedUpdateWithoutCreatedTransitionsInput>
  }

  export type UserUpdateWithoutCreatedTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    managedOperations?: BusinessOperationUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    managedOperations?: BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUncheckedUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MilestoneUpsertWithWhereUniqueWithoutTransitionInput = {
    where: MilestoneWhereUniqueInput
    update: XOR<MilestoneUpdateWithoutTransitionInput, MilestoneUncheckedUpdateWithoutTransitionInput>
    create: XOR<MilestoneCreateWithoutTransitionInput, MilestoneUncheckedCreateWithoutTransitionInput>
  }

  export type MilestoneUpdateWithWhereUniqueWithoutTransitionInput = {
    where: MilestoneWhereUniqueInput
    data: XOR<MilestoneUpdateWithoutTransitionInput, MilestoneUncheckedUpdateWithoutTransitionInput>
  }

  export type MilestoneUpdateManyWithWhereWithoutTransitionInput = {
    where: MilestoneScalarWhereInput
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyWithoutTransitionInput>
  }

  export type MilestoneScalarWhereInput = {
    AND?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
    OR?: MilestoneScalarWhereInput[]
    NOT?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
    id?: StringFilter<"Milestone"> | string
    title?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    dueDate?: DateTimeFilter<"Milestone"> | Date | string
    priority?: EnumPriorityLevelFilter<"Milestone"> | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFilter<"Milestone"> | $Enums.MilestoneStatus
    transitionId?: StringFilter<"Milestone"> | string
    createdAt?: DateTimeFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutTransitionInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutTransitionInput, AuditLogUncheckedUpdateWithoutTransitionInput>
    create: XOR<AuditLogCreateWithoutTransitionInput, AuditLogUncheckedCreateWithoutTransitionInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutTransitionInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutTransitionInput, AuditLogUncheckedUpdateWithoutTransitionInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutTransitionInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutTransitionInput>
  }

  export type TransitionCreateWithoutMilestonesInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contract?: ContractCreateNestedOneWithoutTransitionsInput
    creator?: UserCreateNestedOneWithoutCreatedTransitionsInput
    auditLogs?: AuditLogCreateNestedManyWithoutTransitionInput
  }

  export type TransitionUncheckedCreateWithoutMilestonesInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    contractId?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTransitionInput
  }

  export type TransitionCreateOrConnectWithoutMilestonesInput = {
    where: TransitionWhereUniqueInput
    create: XOR<TransitionCreateWithoutMilestonesInput, TransitionUncheckedCreateWithoutMilestonesInput>
  }

  export type AuditLogCreateWithoutMilestoneInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    businessOperation?: BusinessOperationCreateNestedOneWithoutAuditLogsInput
    contract?: ContractCreateNestedOneWithoutAuditLogsInput
    transition?: TransitionCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutMilestoneInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutMilestoneInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutMilestoneInput, AuditLogUncheckedCreateWithoutMilestoneInput>
  }

  export type AuditLogCreateManyMilestoneInputEnvelope = {
    data: AuditLogCreateManyMilestoneInput | AuditLogCreateManyMilestoneInput[]
    skipDuplicates?: boolean
  }

  export type TransitionUpsertWithoutMilestonesInput = {
    update: XOR<TransitionUpdateWithoutMilestonesInput, TransitionUncheckedUpdateWithoutMilestonesInput>
    create: XOR<TransitionCreateWithoutMilestonesInput, TransitionUncheckedCreateWithoutMilestonesInput>
    where?: TransitionWhereInput
  }

  export type TransitionUpdateToOneWithWhereWithoutMilestonesInput = {
    where?: TransitionWhereInput
    data: XOR<TransitionUpdateWithoutMilestonesInput, TransitionUncheckedUpdateWithoutMilestonesInput>
  }

  export type TransitionUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneWithoutTransitionsNestedInput
    creator?: UserUpdateOneWithoutCreatedTransitionsNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionUncheckedUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTransitionNestedInput
  }

  export type AuditLogUpsertWithWhereUniqueWithoutMilestoneInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutMilestoneInput, AuditLogUncheckedUpdateWithoutMilestoneInput>
    create: XOR<AuditLogCreateWithoutMilestoneInput, AuditLogUncheckedCreateWithoutMilestoneInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutMilestoneInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutMilestoneInput, AuditLogUncheckedUpdateWithoutMilestoneInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutMilestoneInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutMilestoneInput>
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTransitions?: TransitionUncheckedCreateNestedManyWithoutCreatorInput
    managedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutCurrentManagerInput
    assignedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutGovernmentPMInput
    directedOperations?: BusinessOperationUncheckedCreateNestedManyWithoutDirectorInput
    contractorPMContracts?: ContractUncheckedCreateNestedManyWithoutContractorPMInput
    stakeholderOperations?: OperationStakeholderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type BusinessOperationCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentManager?: UserCreateNestedOneWithoutManagedOperationsInput
    governmentPM: UserCreateNestedOneWithoutAssignedOperationsInput
    director: UserCreateNestedOneWithoutDirectedOperationsInput
    contracts?: ContractCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    governmentPMId: string
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutBusinessOperationInput
    stakeholders?: OperationStakeholderUncheckedCreateNestedManyWithoutBusinessOperationInput
  }

  export type BusinessOperationCreateOrConnectWithoutAuditLogsInput = {
    where: BusinessOperationWhereUniqueInput
    create: XOR<BusinessOperationCreateWithoutAuditLogsInput, BusinessOperationUncheckedCreateWithoutAuditLogsInput>
  }

  export type ContractCreateWithoutAuditLogsInput = {
    id?: string
    contractName: string
    contractNumber: string
    contractorName: string
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    businessOperation: BusinessOperationCreateNestedOneWithoutContractsInput
    contractorPM?: UserCreateNestedOneWithoutContractorPMContractsInput
    transitions?: TransitionCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    businessOperationId: string
    contractName: string
    contractNumber: string
    contractorName: string
    contractorPMId?: string | null
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transitions?: TransitionUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutAuditLogsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutAuditLogsInput, ContractUncheckedCreateWithoutAuditLogsInput>
  }

  export type TransitionCreateWithoutAuditLogsInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contract?: ContractCreateNestedOneWithoutTransitionsInput
    creator?: UserCreateNestedOneWithoutCreatedTransitionsInput
    milestones?: MilestoneCreateNestedManyWithoutTransitionInput
  }

  export type TransitionUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    contractId?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    milestones?: MilestoneUncheckedCreateNestedManyWithoutTransitionInput
  }

  export type TransitionCreateOrConnectWithoutAuditLogsInput = {
    where: TransitionWhereUniqueInput
    create: XOR<TransitionCreateWithoutAuditLogsInput, TransitionUncheckedCreateWithoutAuditLogsInput>
  }

  export type MilestoneCreateWithoutAuditLogsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transition: TransitionCreateNestedOneWithoutMilestonesInput
  }

  export type MilestoneUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    transitionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MilestoneCreateOrConnectWithoutAuditLogsInput = {
    where: MilestoneWhereUniqueInput
    create: XOR<MilestoneCreateWithoutAuditLogsInput, MilestoneUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTransitions?: TransitionUncheckedUpdateManyWithoutCreatorNestedInput
    managedOperations?: BusinessOperationUncheckedUpdateManyWithoutCurrentManagerNestedInput
    assignedOperations?: BusinessOperationUncheckedUpdateManyWithoutGovernmentPMNestedInput
    directedOperations?: BusinessOperationUncheckedUpdateManyWithoutDirectorNestedInput
    contractorPMContracts?: ContractUncheckedUpdateManyWithoutContractorPMNestedInput
    stakeholderOperations?: OperationStakeholderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BusinessOperationUpsertWithoutAuditLogsInput = {
    update: XOR<BusinessOperationUpdateWithoutAuditLogsInput, BusinessOperationUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<BusinessOperationCreateWithoutAuditLogsInput, BusinessOperationUncheckedCreateWithoutAuditLogsInput>
    where?: BusinessOperationWhereInput
  }

  export type BusinessOperationUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: BusinessOperationWhereInput
    data: XOR<BusinessOperationUpdateWithoutAuditLogsInput, BusinessOperationUncheckedUpdateWithoutAuditLogsInput>
  }

  export type BusinessOperationUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManager?: UserUpdateOneWithoutManagedOperationsNestedInput
    governmentPM?: UserUpdateOneRequiredWithoutAssignedOperationsNestedInput
    director?: UserUpdateOneRequiredWithoutDirectedOperationsNestedInput
    contracts?: ContractUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    governmentPMId?: StringFieldUpdateOperationsInput | string
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationNestedInput
  }

  export type ContractUpsertWithoutAuditLogsInput = {
    update: XOR<ContractUpdateWithoutAuditLogsInput, ContractUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<ContractCreateWithoutAuditLogsInput, ContractUncheckedCreateWithoutAuditLogsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutAuditLogsInput, ContractUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ContractUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessOperation?: BusinessOperationUpdateOneRequiredWithoutContractsNestedInput
    contractorPM?: UserUpdateOneWithoutContractorPMContractsNestedInput
    transitions?: TransitionUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    contractorPMId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transitions?: TransitionUncheckedUpdateManyWithoutContractNestedInput
  }

  export type TransitionUpsertWithoutAuditLogsInput = {
    update: XOR<TransitionUpdateWithoutAuditLogsInput, TransitionUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<TransitionCreateWithoutAuditLogsInput, TransitionUncheckedCreateWithoutAuditLogsInput>
    where?: TransitionWhereInput
  }

  export type TransitionUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: TransitionWhereInput
    data: XOR<TransitionUpdateWithoutAuditLogsInput, TransitionUncheckedUpdateWithoutAuditLogsInput>
  }

  export type TransitionUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneWithoutTransitionsNestedInput
    creator?: UserUpdateOneWithoutCreatedTransitionsNestedInput
    milestones?: MilestoneUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUncheckedUpdateManyWithoutTransitionNestedInput
  }

  export type MilestoneUpsertWithoutAuditLogsInput = {
    update: XOR<MilestoneUpdateWithoutAuditLogsInput, MilestoneUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<MilestoneCreateWithoutAuditLogsInput, MilestoneUncheckedCreateWithoutAuditLogsInput>
    where?: MilestoneWhereInput
  }

  export type MilestoneUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: MilestoneWhereInput
    data: XOR<MilestoneUpdateWithoutAuditLogsInput, MilestoneUncheckedUpdateWithoutAuditLogsInput>
  }

  export type MilestoneUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transition?: TransitionUpdateOneRequiredWithoutMilestonesNestedInput
  }

  export type MilestoneUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    transitionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransitionCreateManyCreatorInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    contractId?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessOperationCreateManyCurrentManagerInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    governmentPMId: string
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessOperationCreateManyGovernmentPMInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    directorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessOperationCreateManyDirectorInput = {
    id?: string
    name: string
    businessFunction: string
    technicalDomain: string
    description?: string | null
    scope: string
    objectives: string
    performanceMetrics: JsonNullValueInput | InputJsonValue
    supportPeriodStart: Date | string
    supportPeriodEnd: Date | string
    currentContractEnd: Date | string
    currentManagerId?: string | null
    governmentPMId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateManyContractorPMInput = {
    id?: string
    businessOperationId: string
    contractName: string
    contractNumber: string
    contractorName: string
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationStakeholderCreateManyUserInput = {
    id?: string
    businessOperationId: string
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type TransitionUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneWithoutTransitionsNestedInput
    milestones?: MilestoneUpdateManyWithoutTransitionNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUncheckedUpdateManyWithoutTransitionNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessOperationUpdateWithoutCurrentManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governmentPM?: UserUpdateOneRequiredWithoutAssignedOperationsNestedInput
    director?: UserUpdateOneRequiredWithoutDirectedOperationsNestedInput
    contracts?: ContractUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateWithoutCurrentManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    governmentPMId?: StringFieldUpdateOperationsInput | string
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateManyWithoutCurrentManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    governmentPMId?: StringFieldUpdateOperationsInput | string
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessOperationUpdateWithoutGovernmentPMInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManager?: UserUpdateOneWithoutManagedOperationsNestedInput
    director?: UserUpdateOneRequiredWithoutDirectedOperationsNestedInput
    contracts?: ContractUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateWithoutGovernmentPMInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateManyWithoutGovernmentPMInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    directorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessOperationUpdateWithoutDirectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManager?: UserUpdateOneWithoutManagedOperationsNestedInput
    governmentPM?: UserUpdateOneRequiredWithoutAssignedOperationsNestedInput
    contracts?: ContractUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateWithoutDirectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    governmentPMId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutBusinessOperationNestedInput
    stakeholders?: OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessOperationNestedInput
  }

  export type BusinessOperationUncheckedUpdateManyWithoutDirectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    businessFunction?: StringFieldUpdateOperationsInput | string
    technicalDomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: StringFieldUpdateOperationsInput | string
    objectives?: StringFieldUpdateOperationsInput | string
    performanceMetrics?: JsonNullValueInput | InputJsonValue
    supportPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    supportPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentContractEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    currentManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    governmentPMId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUpdateWithoutContractorPMInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessOperation?: BusinessOperationUpdateOneRequiredWithoutContractsNestedInput
    transitions?: TransitionUpdateManyWithoutContractNestedInput
    auditLogs?: AuditLogUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutContractorPMInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transitions?: TransitionUncheckedUpdateManyWithoutContractNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutContractorPMInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationStakeholderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessOperation?: BusinessOperationUpdateOneRequiredWithoutStakeholdersNestedInput
  }

  export type OperationStakeholderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationStakeholderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessOperationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    businessOperation?: BusinessOperationUpdateOneWithoutAuditLogsNestedInput
    contract?: ContractUpdateOneWithoutAuditLogsNestedInput
    transition?: TransitionUpdateOneWithoutAuditLogsNestedInput
    milestone?: MilestoneUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateManyBusinessOperationInput = {
    id?: string
    contractName: string
    contractNumber: string
    contractorName: string
    contractorPMId?: string | null
    startDate: Date | string
    endDate: Date | string
    canBeExtended?: boolean
    status?: $Enums.ContractStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperationStakeholderCreateManyBusinessOperationInput = {
    id?: string
    userId?: string | null
    name: string
    role: string
    email: string
    phone?: string | null
    organization?: string | null
    stakeholderType: $Enums.StakeholderType
    receiveNotifications?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyBusinessOperationInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type ContractUpdateWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorPM?: UserUpdateOneWithoutContractorPMContractsNestedInput
    transitions?: TransitionUpdateManyWithoutContractNestedInput
    auditLogs?: AuditLogUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    contractorPMId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transitions?: TransitionUncheckedUpdateManyWithoutContractNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    contractorName?: StringFieldUpdateOperationsInput | string
    contractorPMId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    canBeExtended?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationStakeholderUpdateWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutStakeholderOperationsNestedInput
  }

  export type OperationStakeholderUncheckedUpdateWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationStakeholderUncheckedUpdateManyWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    stakeholderType?: EnumStakeholderTypeFieldUpdateOperationsInput | $Enums.StakeholderType
    receiveNotifications?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    contract?: ContractUpdateOneWithoutAuditLogsNestedInput
    transition?: TransitionUpdateOneWithoutAuditLogsNestedInput
    milestone?: MilestoneUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutBusinessOperationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransitionCreateManyContractInput = {
    id?: string
    contractName?: string | null
    contractNumber?: string | null
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    duration?: $Enums.TransitionDuration
    keyPersonnel?: string | null
    description?: string | null
    status?: $Enums.TransitionStatus
    requiresContinuousService?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyContractInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type TransitionUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedTransitionsNestedInput
    milestones?: MilestoneUpdateManyWithoutTransitionNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    milestones?: MilestoneUncheckedUpdateManyWithoutTransitionNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTransitionNestedInput
  }

  export type TransitionUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractName?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: EnumTransitionDurationFieldUpdateOperationsInput | $Enums.TransitionDuration
    keyPersonnel?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTransitionStatusFieldUpdateOperationsInput | $Enums.TransitionStatus
    requiresContinuousService?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    businessOperation?: BusinessOperationUpdateOneWithoutAuditLogsNestedInput
    transition?: TransitionUpdateOneWithoutAuditLogsNestedInput
    milestone?: MilestoneUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilestoneCreateManyTransitionInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    priority?: $Enums.PriorityLevel
    status?: $Enums.MilestoneStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyTransitionInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type MilestoneUpdateWithoutTransitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneUncheckedUpdateWithoutTransitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutMilestoneNestedInput
  }

  export type MilestoneUncheckedUpdateManyWithoutTransitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityLevelFieldUpdateOperationsInput | $Enums.PriorityLevel
    status?: EnumMilestoneStatusFieldUpdateOperationsInput | $Enums.MilestoneStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutTransitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    businessOperation?: BusinessOperationUpdateOneWithoutAuditLogsNestedInput
    contract?: ContractUpdateOneWithoutAuditLogsNestedInput
    milestone?: MilestoneUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutTransitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutTransitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyMilestoneInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    businessOperation?: BusinessOperationUpdateOneWithoutAuditLogsNestedInput
    contract?: ContractUpdateOneWithoutAuditLogsNestedInput
    transition?: TransitionUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutMilestoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}