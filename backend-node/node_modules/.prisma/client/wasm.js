
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Artifact_audit_logsScalarFieldEnum = {
  id: 'id',
  artifactId: 'artifactId',
  transitionId: 'transitionId',
  action: 'action',
  performedBy: 'performedBy',
  performedAt: 'performedAt',
  previousValue: 'previousValue',
  newValue: 'newValue',
  comments: 'comments',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId'
};

exports.Prisma.ArtifactsScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  name: 'name',
  description: 'description',
  type: 'type',
  mimeType: 'mimeType',
  filePath: 'filePath',
  fileSize: 'fileSize',
  checksum: 'checksum',
  version: 'version',
  status: 'status',
  isRequired: 'isRequired',
  submittedBy: 'submittedBy',
  submittedAt: 'submittedAt',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  approvalComments: 'approvalComments',
  parentId: 'parentId',
  expiresAt: 'expiresAt',
  securityClassification: 'securityClassification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Calendar_eventsScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  title: 'title',
  description: 'description',
  eventType: 'eventType',
  startDateTime: 'startDateTime',
  endDateTime: 'endDateTime',
  timeZone: 'timeZone',
  isAllDay: 'isAllDay',
  location: 'location',
  meetingUrl: 'meetingUrl',
  meetingId: 'meetingId',
  organizerId: 'organizerId',
  attendees: 'attendees',
  requiredAttendees: 'requiredAttendees',
  optionalAttendees: 'optionalAttendees',
  recurrenceRule: 'recurrenceRule',
  recurrenceExceptions: 'recurrenceExceptions',
  reminderMinutes: 'reminderMinutes',
  status: 'status',
  visibility: 'visibility',
  category: 'category',
  priority: 'priority',
  relatedEntityType: 'relatedEntityType',
  relatedEntityId: 'relatedEntityId',
  externalCalendarId: 'externalCalendarId',
  externalPlatform: 'externalPlatform',
  syncStatus: 'syncStatus',
  lastSyncAt: 'lastSyncAt',
  syncError: 'syncError',
  metadata: 'metadata',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelledAt: 'cancelledAt',
  cancelledBy: 'cancelledBy'
};

exports.Prisma.CommunicationsScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  communicationType: 'communicationType',
  direction: 'direction',
  platform: 'platform',
  externalId: 'externalId',
  threadId: 'threadId',
  fromUserId: 'fromUserId',
  fromEmail: 'fromEmail',
  fromName: 'fromName',
  toUsers: 'toUsers',
  toEmails: 'toEmails',
  ccEmails: 'ccEmails',
  bccEmails: 'bccEmails',
  subject: 'subject',
  content: 'content',
  contentType: 'contentType',
  attachments: 'attachments',
  priority: 'priority',
  isRead: 'isRead',
  readAt: 'readAt',
  readBy: 'readBy',
  relatedEntityType: 'relatedEntityType',
  relatedEntityId: 'relatedEntityId',
  status: 'status',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  sentAt: 'sentAt',
  receivedAt: 'receivedAt',
  createdAt: 'createdAt'
};

exports.Prisma.Contractor_proficiency_assessmentsScalarFieldEnum = {
  id: 'id',
  contractorId: 'contractorId',
  transitionId: 'transitionId',
  assessmentType: 'assessmentType',
  assessmentCategory: 'assessmentCategory',
  skillArea: 'skillArea',
  assessorId: 'assessorId',
  assessmentMethod: 'assessmentMethod',
  currentLevel: 'currentLevel',
  targetLevel: 'targetLevel',
  score: 'score',
  maxScore: 'maxScore',
  percentage: 'percentage',
  assessmentNotes: 'assessmentNotes',
  strengths: 'strengths',
  weaknesses: 'weaknesses',
  knowledgeGaps: 'knowledgeGaps',
  recommendedTraining: 'recommendedTraining',
  learningResources: 'learningResources',
  practiceAreas: 'practiceAreas',
  mentorshipNeeds: 'mentorshipNeeds',
  isCompleted: 'isCompleted',
  isPassing: 'isPassing',
  certificationRequired: 'certificationRequired',
  certificationStatus: 'certificationStatus',
  certificationDate: 'certificationDate',
  validUntil: 'validUntil',
  reassessmentRequired: 'reassessmentRequired',
  nextAssessmentDate: 'nextAssessmentDate',
  progressSinceLastAssessment: 'progressSinceLastAssessment',
  overallReadiness: 'overallReadiness',
  readinessNotes: 'readinessNotes',
  riskFactors: 'riskFactors',
  mitigationPlans: 'mitigationPlans',
  assessmentDate: 'assessmentDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Deliverable_quality_reviewsScalarFieldEnum = {
  id: 'id',
  artifactId: 'artifactId',
  transitionId: 'transitionId',
  reviewerId: 'reviewerId',
  reviewType: 'reviewType',
  reviewStatus: 'reviewStatus',
  overallScore: 'overallScore',
  completenessScore: 'completenessScore',
  accuracyScore: 'accuracyScore',
  clarityScore: 'clarityScore',
  usabilityScore: 'usabilityScore',
  complianceScore: 'complianceScore',
  securityScore: 'securityScore',
  qualityChecklist: 'qualityChecklist',
  strengths: 'strengths',
  weaknesses: 'weaknesses',
  recommendations: 'recommendations',
  correctiveActions: 'correctiveActions',
  publishingDecision: 'publishingDecision',
  publishingNotes: 'publishingNotes',
  reviewDuration: 'reviewDuration',
  reviewCriteria: 'reviewCriteria',
  isSignedOff: 'isSignedOff',
  signOffBy: 'signOffBy',
  signOffAt: 'signOffAt',
  requiredActions: 'requiredActions',
  followUpRequired: 'followUpRequired',
  nextReviewDate: 'nextReviewDate',
  reviewStartedAt: 'reviewStartedAt',
  reviewCompletedAt: 'reviewCompletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Knowledge_chunksScalarFieldEnum = {
  id: 'id',
  artifactId: 'artifactId',
  transitionId: 'transitionId',
  content: 'content',
  contentHash: 'contentHash',
  chunkIndex: 'chunkIndex',
  startOffset: 'startOffset',
  endOffset: 'endOffset',
  pageNumber: 'pageNumber',
  sectionTitle: 'sectionTitle',
  contentType: 'contentType',
  processingModel: 'processingModel',
  confidence: 'confidence',
  isActive: 'isActive',
  processedAt: 'processedAt',
  createdAt: 'createdAt'
};

exports.Prisma.MilestonesScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  completedDate: 'completedDate',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  percentComplete: 'percentComplete',
  dependencies: 'dependencies',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Notification_preferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  transitionId: 'transitionId',
  notificationType: 'notificationType',
  channelEmail: 'channelEmail',
  channelInApp: 'channelInApp',
  channelSms: 'channelSms',
  channelTeams: 'channelTeams',
  channelSlack: 'channelSlack',
  frequency: 'frequency',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  timeZone: 'timeZone',
  isEnabled: 'isEnabled',
  priority: 'priority',
  customSettings: 'customSettings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbreviation: 'abbreviation',
  type: 'type',
  parentId: 'parentId',
  contactEmail: 'contactEmail',
  securityOfficerEmail: 'securityOfficerEmail',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Person_organization_affiliationsScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  organizationId: 'organizationId',
  jobTitle: 'jobTitle',
  department: 'department',
  employeeId: 'employeeId',
  workLocation: 'workLocation',
  managerId: 'managerId',
  affiliationType: 'affiliationType',
  employmentStatus: 'employmentStatus',
  securityClearanceRequired: 'securityClearanceRequired',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  isPrimary: 'isPrimary',
  payrollNumber: 'payrollNumber',
  costCenter: 'costCenter',
  workSchedule: 'workSchedule',
  compensationLevel: 'compensationLevel',
  benefitsEligible: 'benefitsEligible',
  contractType: 'contractType',
  contractNumber: 'contractNumber',
  billableHours: 'billableHours',
  accessLevel: 'accessLevel',
  facilities: 'facilities',
  equipment: 'equipment',
  notes: 'notes',
  separationReason: 'separationReason',
  separationNotes: 'separationNotes',
  isEligibleForRehire: 'isEligibleForRehire',
  exitInterviewCompleted: 'exitInterviewCompleted',
  exitInterviewDate: 'exitInterviewDate',
  finalWorkDate: 'finalWorkDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonsScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  preferredName: 'preferredName',
  suffix: 'suffix',
  title: 'title',
  primaryEmail: 'primaryEmail',
  alternateEmail: 'alternateEmail',
  workPhone: 'workPhone',
  mobilePhone: 'mobilePhone',
  personalPhone: 'personalPhone',
  profileImageUrl: 'profileImageUrl',
  biography: 'biography',
  skills: 'skills',
  certifications: 'certifications',
  education: 'education',
  workLocation: 'workLocation',
  timeZone: 'timeZone',
  preferredLanguage: 'preferredLanguage',
  dateOfBirth: 'dateOfBirth',
  securityClearanceLevel: 'securityClearanceLevel',
  clearanceExpirationDate: 'clearanceExpirationDate',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  emergencyContactRelation: 'emergencyContactRelation',
  isActive: 'isActive',
  privacySettings: 'privacySettings',
  professionalSummary: 'professionalSummary',
  linkedInProfile: 'linkedInProfile',
  githubProfile: 'githubProfile',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archivedAt: 'archivedAt'
};

exports.Prisma.Proficiency_progress_trackingScalarFieldEnum = {
  id: 'id',
  contractorId: 'contractorId',
  transitionId: 'transitionId',
  skillArea: 'skillArea',
  baselineAssessmentId: 'baselineAssessmentId',
  currentAssessmentId: 'currentAssessmentId',
  baselineLevel: 'baselineLevel',
  currentLevel: 'currentLevel',
  targetLevel: 'targetLevel',
  progressPercentage: 'progressPercentage',
  learningVelocity: 'learningVelocity',
  totalAssessments: 'totalAssessments',
  averageScore: 'averageScore',
  trendDirection: 'trendDirection',
  lastImprovement: 'lastImprovement',
  plateauPeriod: 'plateauPeriod',
  strugglingIndicators: 'strugglingIndicators',
  interventionsApplied: 'interventionsApplied',
  learningStyle: 'learningStyle',
  motivationFactors: 'motivationFactors',
  blockers: 'blockers',
  supportNeeds: 'supportNeeds',
  projectedCompletionDate: 'projectedCompletionDate',
  riskLevel: 'riskLevel',
  confidenceInterval: 'confidenceInterval',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt'
};

exports.Prisma.Query_sessionsScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  userId: 'userId',
  query: 'query',
  response: 'response',
  sourceChunks: 'sourceChunks',
  confidence: 'confidence',
  responseTime: 'responseTime',
  feedback: 'feedback',
  feedbackComments: 'feedbackComments',
  ipAddress: 'ipAddress',
  sessionId: 'sessionId',
  createdAt: 'createdAt'
};

exports.Prisma.System_settingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  isPublic: 'isPublic',
  isEditable: 'isEditable',
  validationSchema: 'validationSchema',
  modifiedBy: 'modifiedBy',
  modifiedAt: 'modifiedAt',
  createdAt: 'createdAt'
};

exports.Prisma.Task_commentsScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  authorId: 'authorId',
  content: 'content',
  commentType: 'commentType',
  isInternal: 'isInternal',
  mentionedUsers: 'mentionedUsers',
  attachments: 'attachments',
  editedAt: 'editedAt',
  editedBy: 'editedBy',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt'
};

exports.Prisma.TasksScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  milestoneId: 'milestoneId',
  parentTaskId: 'parentTaskId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  startDate: 'startDate',
  dueDate: 'dueDate',
  completedDate: 'completedDate',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  percentComplete: 'percentComplete',
  tags: 'tags',
  dependencies: 'dependencies',
  blockers: 'blockers',
  notes: 'notes',
  attachments: 'attachments',
  isRecurring: 'isRecurring',
  recurringPattern: 'recurringPattern',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Transition_usersScalarFieldEnum = {
  id: 'id',
  transitionId: 'transitionId',
  userId: 'userId',
  role: 'role',
  securityStatus: 'securityStatus',
  platformAccess: 'platformAccess',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  acceptedAt: 'acceptedAt',
  lastAccessAt: 'lastAccessAt',
  accessNotes: 'accessNotes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransitionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contractName: 'contractName',
  contractNumber: 'contractNumber',
  organizationId: 'organizationId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description',
  priority: 'priority',
  currentPhase: 'currentPhase',
  progressPercentage: 'progressPercentage',
  riskLevel: 'riskLevel',
  riskFactors: 'riskFactors',
  budget: 'budget',
  actualCost: 'actualCost',
  clientOrganization: 'clientOrganization',
  contractorOrganization: 'contractorOrganization',
  keyPersonnel: 'keyPersonnel',
  securityRequirements: 'securityRequirements',
  complianceRequirements: 'complianceRequirements',
  deliverableRequirements: 'deliverableRequirements',
  communicationPlan: 'communicationPlan',
  escalationMatrix: 'escalationMatrix',
  businessImpact: 'businessImpact',
  technicalComplexity: 'technicalComplexity',
  stakeholderCount: 'stakeholderCount',
  documentsRequired: 'documentsRequired',
  trainingRequired: 'trainingRequired',
  certificationRequired: 'certificationRequired',
  clearanceRequired: 'clearanceRequired',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archivedAt: 'archivedAt',
  transitionLevel: 'transitionLevel',
  transitionSource: 'transitionSource',
  impactScope: 'impactScope',
  approvalLevel: 'approvalLevel',
  parentTransitionId: 'parentTransitionId'
};

exports.Prisma.User_registration_requestsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  organizationName: 'organizationName',
  position: 'position',
  verificationToken: 'verificationToken',
  isEmailVerified: 'isEmailVerified',
  verificationTokenExpiry: 'verificationTokenExpiry',
  adminApprovalStatus: 'adminApprovalStatus',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedReason: 'rejectedReason',
  requestedRoles: 'requestedRoles',
  registrationIP: 'registrationIP',
  userAgent: 'userAgent',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  username: 'username',
  keycloakId: 'keycloakId',
  invitationStatus: 'invitationStatus',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  invitationToken: 'invitationToken',
  invitationExpiresAt: 'invitationExpiresAt',
  confirmationToken: 'confirmationToken',
  confirmationSentAt: 'confirmationSentAt',
  confirmedAt: 'confirmedAt',
  emailVerified: 'emailVerified',
  accountStatus: 'accountStatus',
  statusReason: 'statusReason',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  passwordHash: 'passwordHash',
  passwordChangedAt: 'passwordChangedAt',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  mustChangePassword: 'mustChangePassword',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorMethod: 'twoFactorMethod',
  backupCodes: 'backupCodes',
  sessionTimeout: 'sessionTimeout',
  allowedIpRanges: 'allowedIpRanges',
  deviceFingerprints: 'deviceFingerprints',
  securityNotifications: 'securityNotifications',
  apiKeyEnabled: 'apiKeyEnabled',
  apiKeyHash: 'apiKeyHash',
  apiKeyExpiresAt: 'apiKeyExpiresAt',
  roles: 'roles',
  permissions: 'permissions',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deactivatedAt: 'deactivatedAt',
  deactivatedBy: 'deactivatedBy',
  isFirstUser: 'isFirstUser',
  registrationRequestId: 'registrationRequestId',
  accountApprovalStatus: 'accountApprovalStatus',
  emailVerifiedAt: 'emailVerifiedAt'
};

exports.Prisma.User_sessionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  sessionFingerprint: 'sessionFingerprint',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.User_rolesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  isActive: 'isActive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AuditAction = exports.$Enums.AuditAction = {
  Created: 'Created',
  Updated: 'Updated',
  Submitted: 'Submitted',
  Reviewed: 'Reviewed',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Downloaded: 'Downloaded',
  Deleted: 'Deleted',
  Restored: 'Restored',
  Status_Changed: 'Status_Changed'
};

exports.ArtifactType = exports.$Enums.ArtifactType = {
  Documentation: 'Documentation',
  Source_Code: 'Source_Code',
  Configuration: 'Configuration',
  Database_Export: 'Database_Export',
  Training_Materials: 'Training_Materials',
  Contract_Deliverable: 'Contract_Deliverable',
  Other: 'Other'
};

exports.ArtifactStatus = exports.$Enums.ArtifactStatus = {
  Draft: 'Draft',
  Submitted: 'Submitted',
  Under_Review: 'Under_Review',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Superseded: 'Superseded',
  Archived: 'Archived'
};

exports.SecurityClassification = exports.$Enums.SecurityClassification = {
  Unclassified: 'Unclassified',
  Confidential: 'Confidential',
  Secret: 'Secret',
  Top_Secret: 'Top_Secret'
};

exports.EventType = exports.$Enums.EventType = {
  Meeting: 'Meeting',
  Milestone_Deadline: 'Milestone_Deadline',
  Task_Due_Date: 'Task_Due_Date',
  Review_Session: 'Review_Session',
  Training: 'Training',
  Presentation: 'Presentation',
  Conference_Call: 'Conference_Call',
  Site_Visit: 'Site_Visit',
  Other: 'Other'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  Scheduled: 'Scheduled',
  Confirmed: 'Confirmed',
  Tentative: 'Tentative',
  Cancelled: 'Cancelled',
  Completed: 'Completed',
  In_Progress: 'In_Progress',
  Postponed: 'Postponed'
};

exports.EventVisibility = exports.$Enums.EventVisibility = {
  Public: 'Public',
  Internal: 'Internal',
  Private: 'Private',
  Confidential: 'Confidential'
};

exports.Priority = exports.$Enums.Priority = {
  Low: 'Low',
  Medium: 'Medium',
  High: 'High',
  Critical: 'Critical',
  Urgent: 'Urgent',
  Normal: 'Normal'
};

exports.RelatedEntityType = exports.$Enums.RelatedEntityType = {
  Task: 'Task',
  Milestone: 'Milestone',
  Artifact: 'Artifact',
  Event: 'Event',
  User: 'User',
  Transition: 'Transition'
};

exports.ExternalPlatform = exports.$Enums.ExternalPlatform = {
  Microsoft_Outlook: 'Microsoft_Outlook',
  Microsoft_Teams: 'Microsoft_Teams',
  Google_Calendar: 'Google_Calendar',
  Zoom: 'Zoom',
  WebEx: 'WebEx',
  Other: 'Other'
};

exports.SyncStatus = exports.$Enums.SyncStatus = {
  Not_Synced: 'Not_Synced',
  Synced: 'Synced',
  Sync_Pending: 'Sync_Pending',
  Sync_Failed: 'Sync_Failed',
  Sync_Conflict: 'Sync_Conflict'
};

exports.CommunicationType = exports.$Enums.CommunicationType = {
  Email: 'Email',
  Chat: 'Chat',
  SMS: 'SMS',
  Notification: 'Notification',
  System_Message: 'System_Message',
  Voice_Call: 'Voice_Call',
  Video_Call: 'Video_Call'
};

exports.CommunicationDirection = exports.$Enums.CommunicationDirection = {
  Inbound: 'Inbound',
  Outbound: 'Outbound',
  Internal: 'Internal'
};

exports.CommunicationPlatform = exports.$Enums.CommunicationPlatform = {
  TIP_Internal: 'TIP_Internal',
  Microsoft_Teams: 'Microsoft_Teams',
  Slack: 'Slack',
  Email: 'Email',
  Zoom: 'Zoom',
  Discord: 'Discord',
  WhatsApp: 'WhatsApp',
  SMS_Gateway: 'SMS_Gateway'
};

exports.ContentType = exports.$Enums.ContentType = {
  Text: 'Text',
  HTML: 'HTML',
  Markdown: 'Markdown',
  Rich_Text: 'Rich_Text',
  JSON: 'JSON',
  Table: 'Table',
  List: 'List',
  Code: 'Code',
  Metadata: 'Metadata',
  Header: 'Header',
  Footer: 'Footer'
};

exports.CommStatus = exports.$Enums.CommStatus = {
  Pending: 'Pending',
  Delivered: 'Delivered',
  Failed: 'Failed',
  Bounced: 'Bounced',
  Spam: 'Spam',
  Quarantined: 'Quarantined'
};

exports.AssessmentType = exports.$Enums.AssessmentType = {
  Initial_Assessment: 'Initial_Assessment',
  Progress_Review: 'Progress_Review',
  Milestone_Assessment: 'Milestone_Assessment',
  Final_Assessment: 'Final_Assessment',
  Certification_Exam: 'Certification_Exam',
  Competency_Check: 'Competency_Check',
  Peer_Review: 'Peer_Review'
};

exports.AssessmentCategory = exports.$Enums.AssessmentCategory = {
  Technical_Skills: 'Technical_Skills',
  Domain_Knowledge: 'Domain_Knowledge',
  Process_Understanding: 'Process_Understanding',
  Tool_Proficiency: 'Tool_Proficiency',
  Security_Awareness: 'Security_Awareness',
  Communication_Skills: 'Communication_Skills',
  Leadership_Skills: 'Leadership_Skills',
  Project_Management: 'Project_Management'
};

exports.AssessmentMethod = exports.$Enums.AssessmentMethod = {
  Written_Test: 'Written_Test',
  Practical_Exercise: 'Practical_Exercise',
  Code_Review: 'Code_Review',
  Presentation: 'Presentation',
  Interview: 'Interview',
  Observation: 'Observation',
  Peer_Evaluation: 'Peer_Evaluation',
  Self_Assessment: 'Self_Assessment',
  Portfolio_Review: 'Portfolio_Review'
};

exports.ProficiencyLevel = exports.$Enums.ProficiencyLevel = {
  None: 'None',
  Beginner: 'Beginner',
  Basic: 'Basic',
  Intermediate: 'Intermediate',
  Advanced: 'Advanced',
  Expert: 'Expert',
  Master: 'Master'
};

exports.CertificationStatus = exports.$Enums.CertificationStatus = {
  Not_Required: 'Not_Required',
  Required: 'Required',
  In_Progress: 'In_Progress',
  Scheduled: 'Scheduled',
  Completed: 'Completed',
  Failed: 'Failed',
  Expired: 'Expired',
  Renewed: 'Renewed'
};

exports.OverallReadiness = exports.$Enums.OverallReadiness = {
  Not_Ready: 'Not_Ready',
  Limited_Ready: 'Limited_Ready',
  Partially_Ready: 'Partially_Ready',
  Mostly_Ready: 'Mostly_Ready',
  Fully_Ready: 'Fully_Ready',
  Exceeds_Requirements: 'Exceeds_Requirements'
};

exports.ReviewType = exports.$Enums.ReviewType = {
  Initial_Review: 'Initial_Review',
  Revision_Review: 'Revision_Review',
  Final_Review: 'Final_Review',
  Compliance_Review: 'Compliance_Review',
  Security_Review: 'Security_Review',
  Technical_Review: 'Technical_Review',
  Content_Review: 'Content_Review'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  Pending: 'Pending',
  In_Progress: 'In_Progress',
  Completed: 'Completed',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Needs_Revision: 'Needs_Revision',
  On_Hold: 'On_Hold',
  Escalated: 'Escalated'
};

exports.PublishingDecision = exports.$Enums.PublishingDecision = {
  Approved_for_Publishing: 'Approved_for_Publishing',
  Rejected: 'Rejected',
  Approved_with_Conditions: 'Approved_with_Conditions',
  Needs_Revision: 'Needs_Revision',
  Under_Review: 'Under_Review'
};

exports.MilestoneStatus = exports.$Enums.MilestoneStatus = {
  Not_Started: 'Not_Started',
  In_Progress: 'In_Progress',
  Blocked: 'Blocked',
  Completed: 'Completed',
  Cancelled: 'Cancelled',
  Overdue: 'Overdue'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  Task_Assignment: 'Task_Assignment',
  Task_Due: 'Task_Due',
  Task_Completed: 'Task_Completed',
  Milestone_Due: 'Milestone_Due',
  Artifact_Submitted: 'Artifact_Submitted',
  Artifact_Approved: 'Artifact_Approved',
  Meeting_Reminder: 'Meeting_Reminder',
  Status_Change: 'Status_Change',
  Mention: 'Mention',
  System_Alert: 'System_Alert'
};

exports.NotificationFrequency = exports.$Enums.NotificationFrequency = {
  Immediate: 'Immediate',
  Hourly_Digest: 'Hourly_Digest',
  Daily_Digest: 'Daily_Digest',
  Weekly_Digest: 'Weekly_Digest',
  Never: 'Never'
};

exports.OrganizationType = exports.$Enums.OrganizationType = {
  Government_Agency: 'Government_Agency',
  Prime_Contractor: 'Prime_Contractor',
  Subcontractor: 'Subcontractor',
  Vendor: 'Vendor'
};

exports.AffiliationType = exports.$Enums.AffiliationType = {
  Employee: 'Employee',
  Contractor: 'Contractor',
  Consultant: 'Consultant',
  Vendor: 'Vendor',
  Partner: 'Partner',
  Volunteer: 'Volunteer',
  Intern: 'Intern'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  Active: 'Active',
  On_Leave: 'On_Leave',
  Terminated: 'Terminated',
  Resigned: 'Resigned',
  Retired: 'Retired',
  Contract_Ended: 'Contract_Ended',
  Transferred: 'Transferred'
};

exports.SecurityClearanceLevel = exports.$Enums.SecurityClearanceLevel = {
  None: 'None',
  Public_Trust: 'Public_Trust',
  Confidential: 'Confidential',
  Secret: 'Secret',
  Top_Secret: 'Top_Secret',
  TS_SCI: 'TS_SCI'
};

exports.ContractType = exports.$Enums.ContractType = {
  Full_Time: 'Full_Time',
  Part_Time: 'Part_Time',
  Contract: 'Contract',
  Temporary: 'Temporary',
  Seasonal: 'Seasonal',
  Project_Based: 'Project_Based'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  Visitor: 'Visitor',
  Standard: 'Standard',
  Elevated: 'Elevated',
  Administrative: 'Administrative',
  Executive: 'Executive'
};

exports.SeparationReason = exports.$Enums.SeparationReason = {
  Voluntary_Resignation: 'Voluntary_Resignation',
  Involuntary_Termination: 'Involuntary_Termination',
  End_of_Contract: 'End_of_Contract',
  Retirement: 'Retirement',
  Transfer: 'Transfer',
  Layoff: 'Layoff',
  Performance: 'Performance',
  Misconduct: 'Misconduct'
};

exports.TrendDirection = exports.$Enums.TrendDirection = {
  Improving: 'Improving',
  Stable: 'Stable',
  Declining: 'Declining',
  Rapid_Improvement: 'Rapid_Improvement',
  Stagnant: 'Stagnant'
};

exports.LearningStyle = exports.$Enums.LearningStyle = {
  Visual: 'Visual',
  Auditory: 'Auditory',
  Kinesthetic: 'Kinesthetic',
  Reading_Writing: 'Reading_Writing',
  Mixed: 'Mixed'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  Low: 'Low',
  Medium: 'Medium',
  High: 'High',
  Critical: 'Critical'
};

exports.QueryFeedback = exports.$Enums.QueryFeedback = {
  Helpful: 'Helpful',
  Partially_Helpful: 'Partially_Helpful',
  Not_Helpful: 'Not_Helpful',
  Incorrect: 'Incorrect'
};

exports.CommentType = exports.$Enums.CommentType = {
  General: 'General',
  Progress_Update: 'Progress_Update',
  Blocker: 'Blocker',
  Question: 'Question',
  Decision: 'Decision',
  Status_Change: 'Status_Change'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  Not_Started: 'Not_Started',
  Assigned: 'Assigned',
  In_Progress: 'In_Progress',
  On_Hold: 'On_Hold',
  Blocked: 'Blocked',
  Under_Review: 'Under_Review',
  Completed: 'Completed',
  Cancelled: 'Cancelled',
  Overdue: 'Overdue'
};

exports.TransitionRole = exports.$Enums.TransitionRole = {
  Program_Manager: 'Program_Manager',
  Departing_Contractor: 'Departing_Contractor',
  Incoming_Contractor: 'Incoming_Contractor',
  Security_Officer: 'Security_Officer',
  Observer: 'Observer'
};

exports.SecurityStatus = exports.$Enums.SecurityStatus = {
  Pending: 'Pending',
  In_Process: 'In_Process',
  Interim_Cleared: 'Interim_Cleared',
  Cleared: 'Cleared',
  Denied: 'Denied',
  Revoked: 'Revoked'
};

exports.PlatformAccess = exports.$Enums.PlatformAccess = {
  Disabled: 'Disabled',
  Read_Only: 'Read_Only',
  Standard: 'Standard',
  Full_Access: 'Full_Access'
};

exports.TransitionStatus = exports.$Enums.TransitionStatus = {
  Planning: 'Planning',
  Active: 'Active',
  On_Hold: 'On_Hold',
  Completed: 'Completed',
  Cancelled: 'Cancelled',
  Delayed: 'Delayed'
};

exports.TransitionLevel = exports.$Enums.TransitionLevel = {
  MAJOR: 'MAJOR',
  PERSONNEL: 'PERSONNEL',
  OPERATIONAL: 'OPERATIONAL'
};

exports.TransitionSource = exports.$Enums.TransitionSource = {
  STRATEGIC: 'STRATEGIC',
  CONTRACTUAL: 'CONTRACTUAL',
  PERSONNEL: 'PERSONNEL',
  COMMUNICATION: 'COMMUNICATION',
  CHANGE_REQUEST: 'CHANGE_REQUEST',
  ENHANCEMENT: 'ENHANCEMENT'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  Not_Invited: 'Not_Invited',
  Invited: 'Invited',
  Invitation_Sent: 'Invitation_Sent',
  Invitation_Expired: 'Invitation_Expired',
  Invitation_Accepted: 'Invitation_Accepted',
  Invitation_Declined: 'Invitation_Declined'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  Pending: 'Pending',
  Active: 'Active',
  Inactive: 'Inactive',
  Suspended: 'Suspended',
  Locked: 'Locked',
  Expired: 'Expired',
  Deactivated: 'Deactivated'
};

exports.TwoFactorMethod = exports.$Enums.TwoFactorMethod = {
  None: 'None',
  SMS: 'SMS',
  Email: 'Email',
  TOTP: 'TOTP',
  Hardware_Token: 'Hardware_Token',
  Biometric: 'Biometric'
};

exports.Prisma.ModelName = {
  artifact_audit_logs: 'artifact_audit_logs',
  artifacts: 'artifacts',
  calendar_events: 'calendar_events',
  communications: 'communications',
  contractor_proficiency_assessments: 'contractor_proficiency_assessments',
  deliverable_quality_reviews: 'deliverable_quality_reviews',
  knowledge_chunks: 'knowledge_chunks',
  milestones: 'milestones',
  notification_preferences: 'notification_preferences',
  organizations: 'organizations',
  person_organization_affiliations: 'person_organization_affiliations',
  persons: 'persons',
  proficiency_progress_tracking: 'proficiency_progress_tracking',
  query_sessions: 'query_sessions',
  system_settings: 'system_settings',
  task_comments: 'task_comments',
  tasks: 'tasks',
  transition_users: 'transition_users',
  transitions: 'transitions',
  user_registration_requests: 'user_registration_requests',
  users: 'users',
  user_sessions: 'user_sessions',
  roles: 'roles',
  user_roles: 'user_roles'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
