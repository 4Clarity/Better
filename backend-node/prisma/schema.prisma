generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransitionStatus {
  NOT_STARTED
  ON_TRACK
  AT_RISK
  BLOCKED
  COMPLETED
}

enum ContractStatus {
  PLANNING
  ACTIVE
  RENEWAL
  EXPIRING
  EXPIRED
  EXTENDED
}

enum StakeholderType {
  INTERNAL_PROGRAM
  INTERNAL_TECHNICAL
  INTERNAL_EXECUTIVE
  EXTERNAL_VENDOR
  EXTERNAL_SERVICE
  EXTERNAL_SME_RESOURCE
  INCOMING_CONTRACTOR
}

// User Management Enums
enum SecurityClearanceLevel {
  NONE
  PUBLIC_TRUST
  CONFIDENTIAL
  SECRET
  TOP_SECRET
  TS_SCI
}

enum InvitationStatus {
  NOT_INVITED
  INVITED
  INVITATION_SENT
  INVITATION_EXPIRED
  INVITATION_ACCEPTED
  INVITATION_DECLINED
}

enum AccountStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  LOCKED
  EXPIRED
  DEACTIVATED
}

enum TwoFactorMethod {
  NONE
  SMS
  EMAIL
  TOTP
  HARDWARE_TOKEN
  BIOMETRIC
}

enum AffiliationType {
  EMPLOYEE
  CONTRACTOR
  CONSULTANT
  VENDOR
  PARTNER
  VOLUNTEER
  INTERN
}

enum EmploymentStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
  RESIGNED
  RETIRED
  CONTRACT_ENDED
  TRANSFERRED
}

enum ContractType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  SEASONAL
  PROJECT_BASED
}

enum AccessLevel {
  VISITOR
  STANDARD
  ELEVATED
  ADMINISTRATIVE
  EXECUTIVE
}

enum SeparationReason {
  VOLUNTARY_RESIGNATION
  INVOLUNTARY_TERMINATION
  END_OF_CONTRACT
  RETIREMENT
  TRANSFER
  LAYOFF
  PERFORMANCE
  MISCONDUCT
}

enum OrganizationType {
  GOVERNMENT_AGENCY
  PRIME_CONTRACTOR
  SUBCONTRACTOR
  VENDOR
}

enum TransitionRole {
  PROGRAM_MANAGER
  DEPARTING_CONTRACTOR
  INCOMING_CONTRACTOR
  SECURITY_OFFICER
  OBSERVER
}

enum SecurityStatus {
  PENDING
  IN_PROCESS
  INTERIM_CLEARED
  CLEARED
  DENIED
  REVOKED
}

enum PlatformAccess {
  DISABLED
  READ_ONLY
  STANDARD
  FULL_ACCESS
}

enum PIVStatus {
  PIV_VERIFIED
  PIV_EXCEPTION_PENDING
  PIV_EXCEPTION_INTERIM
  PIV_EXPIRED
  PIV_SUSPENDED
}

enum TransitionDuration {
  IMMEDIATE
  THIRTY_DAYS
  FORTY_FIVE_DAYS
  SIXTY_DAYS
  NINETY_DAYS
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  OVERDUE
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Person Entity - Core individual profile
model Person {
  id                        String    @id @default(uuid())
  firstName                 String    @db.VarChar(100)
  middleName                String?   @db.VarChar(100)
  lastName                  String    @db.VarChar(100)
  preferredName             String?   @db.VarChar(100)
  suffix                    String?   @db.VarChar(20)
  title                     String?   @db.VarChar(100)
  primaryEmail              String    @unique @db.VarChar(255)
  alternateEmail            String?   @db.VarChar(255)
  workPhone                 String?   @db.VarChar(20)
  mobilePhone               String?   @db.VarChar(20)
  personalPhone             String?   @db.VarChar(20)
  profileImageUrl           String?   @db.VarChar(500)
  biography                 String?   @db.Text
  skills                    Json?     // Array of professional skills
  certifications            Json?     // Professional certifications
  education                 Json?     // Educational background
  workLocation              String?   @db.VarChar(255)
  timeZone                  String    @default("UTC") @db.VarChar(50)
  preferredLanguage         String    @default("en") @db.VarChar(10)
  dateOfBirth               DateTime? @db.Date
  securityClearanceLevel    SecurityClearanceLevel?
  clearanceExpirationDate   DateTime? @db.Date
  pivStatus                 PIVStatus @default(PIV_EXCEPTION_PENDING)
  pivExpirationDate         DateTime? @db.Date
  emergencyContactName      String?   @db.VarChar(255)
  emergencyContactPhone     String?   @db.VarChar(20)
  emergencyContactRelation  String?   @db.VarChar(100)
  isActive                  Boolean   @default(true)
  privacySettings           Json?     // Privacy and visibility preferences
  professionalSummary       String?   @db.Text
  linkedInProfile           String?   @db.VarChar(500)
  githubProfile             String?   @db.VarChar(500)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  archivedAt                DateTime?

  // Relations
  user                      User?
  organizationAffiliations  PersonOrganizationAffiliation[]
  managedAffiliations       PersonOrganizationAffiliation[] @relation("ManagerRelation")

  @@index([primaryEmail])
  @@index([lastName, firstName])
  @@index([isActive])
  @@index([securityClearanceLevel])
  @@index([pivStatus])
}

// User Entity - Authentication and authorization
model User {
  id                        String            @id @default(uuid())
  personId                  String            @unique
  username                  String            @unique @db.VarChar(100)
  keycloakId                String            @unique
  invitationStatus          InvitationStatus  @default(NOT_INVITED)
  invitedBy                 String?
  invitedAt                 DateTime?
  invitationToken           String?           @db.VarChar(255)
  invitationExpiresAt       DateTime?
  confirmationToken         String?           @db.VarChar(255)
  confirmationSentAt        DateTime?
  confirmedAt               DateTime?
  emailVerified             Boolean           @default(false)
  accountStatus             AccountStatus     @default(PENDING)
  statusReason              String?           @db.Text
  lastLoginAt               DateTime?
  lastLoginIp               String?           @db.Inet
  failedLoginAttempts       Int               @default(0)
  lockedUntil               DateTime?
  passwordChangedAt         DateTime?
  mustChangePassword        Boolean           @default(false)
  twoFactorEnabled          Boolean           @default(false)
  twoFactorMethod           TwoFactorMethod?
  backupCodes               Json?             // Encrypted backup authentication codes
  sessionTimeout            Int?              // Custom session timeout (minutes)
  allowedIpRanges           Json?             // Restricted IP address ranges
  deviceFingerprints        Json?             // Trusted device identifiers
  securityNotifications     Boolean           @default(true)
  apiKeyEnabled             Boolean           @default(false)
  apiKeyHash                String?           @db.VarChar(255)
  apiKeyExpiresAt           DateTime?
  roles                     Json              @default("[]") // Array of assigned system roles
  permissions               Json?             // Specific permission overrides
  metadata                  Json?             // Additional user metadata
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  deactivatedAt             DateTime?
  deactivatedBy             String?

  // Relations
  person                    Person            @relation(fields: [personId], references: [id])
  invitedByUser             User?             @relation("UserInvitation", fields: [invitedBy], references: [id])
  invitedUsers              User[]            @relation("UserInvitation")
  deactivatedByUser         User?             @relation("UserDeactivation", fields: [deactivatedBy], references: [id])
  deactivatedUsers          User[]            @relation("UserDeactivation")
  transitionUsers           TransitionUser[]  @relation("TransitionUserAssignment")
  invitedTransitionUsers    TransitionUser[]  @relation("TransitionUserInvitation")
  
  // Legacy relations (keeping for backward compatibility)
  createdTransitions        Transition[]      @relation("TransitionCreator")
  managedOperations         BusinessOperation[] @relation("OperationManager")
  assignedOperations        BusinessOperation[] @relation("OperationPM")
  directedOperations        BusinessOperation[] @relation("OperationDirector")
  contractorPMContracts     Contract[]        @relation("ContractorPM")
  stakeholderOperations     OperationStakeholder[]
  auditLogs                 AuditLog[]

  @@index([personId])
  @@index([username])
  @@index([keycloakId])
  @@index([invitationStatus])
  @@index([accountStatus])
  @@index([emailVerified])
  @@index([invitationToken])
  @@index([confirmationToken])
  @@index([lastLoginAt])
}

// Organization Entity
model Organization {
  id                        String    @id @default(uuid())
  name                      String    @db.VarChar(255)
  abbreviation              String?   @db.VarChar(50)
  type                      OrganizationType
  parentId                  String?
  contactEmail              String?   @db.VarChar(255)
  securityOfficerEmail      String?   @db.VarChar(255)
  isActive                  Boolean   @default(true)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  // Relations
  parentOrganization        Organization? @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  childOrganizations        Organization[] @relation("OrganizationHierarchy")
  affiliations              PersonOrganizationAffiliation[]
  transitions               Transition[] @relation("OrganizationTransitions")

  @@index([type])
  @@index([parentId])
}

// Person Organization Affiliation - Many-to-many with history
model PersonOrganizationAffiliation {
  id                        String              @id @default(uuid())
  personId                  String
  organizationId            String
  jobTitle                  String?             @db.VarChar(255)
  department                String?             @db.VarChar(255)
  employeeId                String?             @db.VarChar(100)
  workLocation              String?             @db.VarChar(255)
  managerId                 String?
  affiliationType           AffiliationType
  employmentStatus          EmploymentStatus
  securityClearanceRequired SecurityClearanceLevel?
  startDate                 DateTime            @db.Date
  endDate                   DateTime?           @db.Date
  isActive                  Boolean             @default(true)
  isPrimary                 Boolean             @default(false)
  payrollNumber             String?             @db.VarChar(100)
  costCenter                String?             @db.VarChar(100)
  workSchedule              Json?               // Work schedule and hours
  compensationLevel         String?             @db.VarChar(50)
  benefitsEligible          Boolean             @default(false)
  contractType              ContractType?
  contractNumber            String?             @db.VarChar(100)
  billableHours             Decimal?            @db.Decimal(5, 2)
  accessLevel               AccessLevel         @default(STANDARD)
  facilities                Json?               // Facility access permissions
  equipment                 Json?               // Assigned equipment and assets
  notes                     String?             @db.Text
  separationReason          SeparationReason?
  separationNotes           String?             @db.Text
  isEligibleForRehire       Boolean?
  exitInterviewCompleted    Boolean             @default(false)
  exitInterviewDate         DateTime?           @db.Date
  finalWorkDate             DateTime?           @db.Date
  createdBy                 String
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt

  // Relations
  person                    Person              @relation(fields: [personId], references: [id])
  organization              Organization        @relation(fields: [organizationId], references: [id])
  manager                   Person?             @relation("ManagerRelation", fields: [managerId], references: [id])

  @@unique([personId, organizationId, startDate])
  @@index([personId])
  @@index([organizationId])
  @@index([isActive])
  @@index([isPrimary])
  @@index([startDate])
  @@index([endDate])
  @@index([employmentStatus])
}

// Transition Users - Junction table with role-based permissions
model TransitionUser {
  id                        String              @id @default(uuid())
  transitionId              String
  userId                    String
  role                      TransitionRole
  securityStatus            SecurityStatus      @default(PENDING)
  platformAccess            PlatformAccess      @default(DISABLED)
  invitedBy                 String
  invitedAt                 DateTime            @default(now())
  acceptedAt                DateTime?
  lastAccessAt              DateTime?
  accessNotes               String?             @db.Text
  isActive                  Boolean             @default(true)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt

  // Relations
  transition                Transition          @relation(fields: [transitionId], references: [id])
  user                      User                @relation("TransitionUserAssignment", fields: [userId], references: [id])
  invitedByUser             User                @relation("TransitionUserInvitation", fields: [invitedBy], references: [id])

  @@unique([transitionId, userId])
  @@index([transitionId])
  @@index([userId])
  @@index([securityStatus])
  @@index([platformAccess])
}

model BusinessOperation {
  id                    String        @id @default(cuid())
  name                  String
  businessFunction      String
  technicalDomain       String
  description           String?
  scope                 String        // Functional and technical boundaries
  objectives            String        // Operation objectives
  performanceMetrics    Json          // Operational, quality, compliance metrics
  supportPeriodStart    DateTime
  supportPeriodEnd      DateTime
  currentContractEnd    DateTime
  currentManagerId      String?
  governmentPMId        String
  directorId            String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  currentManager        User?                  @relation("OperationManager", fields: [currentManagerId], references: [id])
  governmentPM          User                   @relation("OperationPM", fields: [governmentPMId], references: [id])
  director              User                   @relation("OperationDirector", fields: [directorId], references: [id])
  contracts             Contract[]
  stakeholders          OperationStakeholder[]
  auditLogs             AuditLog[]

  @@index([businessFunction])
  @@index([technicalDomain])
  @@index([governmentPMId])
  @@index([directorId])
}

model OperationStakeholder {
  id                 String          @id @default(cuid())
  businessOperationId String
  userId             String?
  name               String
  role               String
  email              String
  phone              String?
  organization       String?
  stakeholderType    StakeholderType
  receiveNotifications Boolean        @default(false)
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  businessOperation  BusinessOperation @relation(fields: [businessOperationId], references: [id], onDelete: Cascade)
  user               User?             @relation(fields: [userId], references: [id])

  @@index([businessOperationId])
  @@index([stakeholderType])
  @@index([userId])
}

model Contract {
  id                  String        @id @default(cuid())
  businessOperationId String
  contractName        String
  contractNumber      String        @unique
  contractorName      String
  contractorPMId      String?       // Contractor's Program Manager
  startDate           DateTime
  endDate             DateTime
  canBeExtended       Boolean       @default(true)
  status              ContractStatus @default(PLANNING)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  businessOperation   BusinessOperation @relation(fields: [businessOperationId], references: [id])
  contractorPM        User?            @relation("ContractorPM", fields: [contractorPMId], references: [id])
  transitions         Transition[]
  auditLogs           AuditLog[]

  @@index([businessOperationId])
  @@index([contractNumber])
  @@index([status])
  @@index([endDate])
}


model Transition {
  id               String            @id @default(cuid())
  // Legacy fields (keeping for existing data)
  contractName     String?
  contractNumber   String?
  // New hierarchy fields (optional initially for migration)
  contractId       String?
  organizationId   String?           // New field for organization relation
  name             String?            // Transition name
  startDate        DateTime          // Transition start date
  endDate          DateTime          // Transition end date
  duration         TransitionDuration @default(THIRTY_DAYS)
  keyPersonnel     String?           // JSON string or separate table
  description      String?
  status           TransitionStatus   @default(NOT_STARTED)
  requiresContinuousService Boolean  @default(true)
  createdBy        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  contract         Contract?         @relation(fields: [contractId], references: [id])
  organization     Organization?     @relation("OrganizationTransitions", fields: [organizationId], references: [id])
  creator          User?             @relation("TransitionCreator", fields: [createdBy], references: [id])
  milestones       Milestone[]
  auditLogs        AuditLog[]
  transitionUsers  TransitionUser[]

  @@index([status])
  @@index([contractId])
  @@index([organizationId])
  @@index([contractNumber])
  @@index([createdBy])
  @@index([startDate])
  @@index([endDate])
}

model Milestone {
  id           String          @id @default(cuid())
  title        String
  description  String?
  dueDate      DateTime
  priority     PriorityLevel   @default(MEDIUM)
  status       MilestoneStatus @default(PENDING)
  transitionId String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  transition   Transition      @relation(fields: [transitionId], references: [id], onDelete: Cascade)
  auditLogs    AuditLog[]

  @@index([status])
  @@index([dueDate])
  @@index([transitionId])
}

model AuditLog {
  id                String            @id @default(cuid())
  entityType        String            // "business_operation", "contract", "transition", "milestone"
  entityId          String
  action            String            // "CREATE", "UPDATE", "DELETE"
  oldValues         Json?             // Previous state
  newValues         Json?             // New state
  userId            String
  timestamp         DateTime          @default(now())
  user              User              @relation(fields: [userId], references: [id])
  businessOperation BusinessOperation? @relation(fields: [entityId], references: [id], map: "AuditLog_businessOperationId_fkey")
  contract          Contract?         @relation(fields: [entityId], references: [id], map: "AuditLog_contractId_fkey")
  transition        Transition?       @relation(fields: [entityId], references: [id], map: "AuditLog_transitionId_fkey")
  milestone         Milestone?        @relation(fields: [entityId], references: [id], map: "AuditLog_milestoneId_fkey")

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
}
